// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 14512;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([2,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,12,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,14,0,0,0,16,0,0,0,4,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,12,0,0,0,4,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,4,0,0,0,4,0,0,0,25,0,0,0,26,0,0,0,4,0,0,0,4,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,4,0,0,0,4,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,4,0,0,0,4,0,0,0,37,0,0,0,39,0,0,0,8,0,0,0,4,0,0,0,40,0,0,0,41,0,0,0,4,0,0,0,4,0,0,0,42,0,0,0,43,0,0,0,4,0,0,0,4,0,0,0,44,0,0,0,45,0,0,0,4,0,0,0,4,0,0,0,46,0,0,0,48,0,0,0,4,0,0,0,4,0,0,0,49,0,0,0,50,0,0,0,16,0,0,0,4,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,4,0,0,0,4,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,4,0,0,0,4,0,0,0,59,0,0,0,60,0,0,0,0,0,0,0,61,0,0,0,4,0,0,0,4,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,136,7,0,0,13,0,0,0,3,30,0,0,192,1,0,0,240,7,0,0,13,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,3,0,0,0,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,2,0,0,0,0,6,0,2,0,0,7,0,0,2,8,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,2,4,0,0,12,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,3,3,4,3,3,3,3,3,3,5,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,192,255,0,0,0,0,255,3,0,0,0,0,0,0,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,192,1,0,192,255,0,0,0,0,0,0,255,3,255,3,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,255,255,255,255,231,1,0,0,0,0,0,0,128,0,0,0,254,3,0,7,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,2,4,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,255,3,0,0,0,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,192,255,255,255,255,255,255,65,0,0,0,4,0,0,0,4,0,0,0,66,0,0,0,67,0,0,0,8,0,0,0,4,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,4,0,0,0,4,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,4,0,0,0,4,0,0,0,76,0,0,0,77,0,0,0,4,0,0,0,4,0,0,0,78,0,0,0,79,0,0,0,4,0,0,0,4,0,0,0,80,0,0,0,81,0,0,0,4,0,0,0,4,0,0,0,82,0,0,0,124,17,0,0,14,0,0,0,0,0,0,0,1,0,0,0,85,25,0,0,43,0,0,0,128,25,0,0,31,0,0,0,79,1,0,0,20,0,0,0,168,52,0,0,0,0,0,0,34,18,0,0,2,0,0,0,3,18,0,0,31,0,0,0,138,3,0,0,4,0,0,0,239,24,0,0,34,0,0,0,126,3,0,0,16,0,0,0,181,24,0,0,45,0,0,0,226,24,0,0,12,0,0,0,238,24,0,0,1,0,0,0,138,18,0,0,40,0,0,0,55,0,0,0,8,0,0,0,138,18,0,0,40,0,0,0,57,0,0,0,8,0,0,0,138,18,0,0,40,0,0,0,59,0,0,0,8,0,0,0,138,18,0,0,40,0,0,0,61,0,0,0,8,0,0,0,85,24,0,0,39,0,0,0,54,0,0,0,12,0,0,0,85,24,0,0,39,0,0,0,59,0,0,0,12,0,0,0,35,24,0,0,50,0,0,0,255,18,0,0,43,0,0,0,64,19,0,0,32,0,0,0,42,19,0,0,21,0,0,0,63,19,0,0,1,0,0,0,217,21,0,0,44,0,0,0,155,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,190,21,0,0,8,0,0,0,198,21,0,0,15,0,0,0,213,21,0,0,3,0,0,0,216,21,0,0,1,0,0,0,216,21,0,0,1,0,0,0,63,19,0,0,1,0,0,0,52,21,0,0,88,0,0,0,35,21,0,0,17,0,0,0,10,0,0,0,30,21,0,0,2,0,0,0,34,18,0,0,2,0,0,0,32,21,0,0,3,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,30,21,0,0,2,0,0,0,34,18,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,94,20,0,0,51,0,0,0,209,20,0,0,34,0,0,0,58,3,0,0,10,0,0,0,173,20,0,0,36,0,0,0,230,3,0,0,20,0,0,0,173,20,0,0,36,0,0,0,46,4,0,0,20,0,0,0,173,20,0,0,36,0,0,0,59,4,0,0,20,0,0,0,208,23,0,0,17,0,0,0,225,23,0,0,33,0,0,0,202,2,0,0,8,0,0,0,32,22,0,0,36,0,0,0,68,22,0,0,3,0,0,0,5,22,0,0,27,0,0,0,239,0,0,0,8,0,0,0,176,23,0,0,32,0,0,0,209,0,0,0,42,0,0,0,168,52,0,0,0,0,0,0,168,52,0,0,0,0,0,0,112,23,0,0,11,0,0,0,29,20,0,0,1,0,0,0,141,23,0,0,35,0,0,0,101,0,0,0,12,0,0,0,0,0,0,0,38,0,0,0,25,25,0,0,36,0,0,0,225,23,0,0,33,0,0,0,109,2,0,0,8,0,0,0,232,25,0,0,45,0,0,0,21,0,0,0,4,0,0,0,185,25,0,0,47,0,0,0,193,0,0,0,8,0,0,0,75,26,0,0,36,0,0,0,195,1,0,0,17,0,0,0,208,23,0,0,17,0,0,0,225,23,0,0,33,0,0,0,12,2,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,205,26,0,0,28,0,0,0,233,26,0,0,29,0,0,0,89,4,0,0,8,0,0,0,0,0,0,0,13,0,0,0,44,27,0,0,19,0,0,0,34,18,0,0,2,0,0,0,12,27,0,0,32,0,0,0,180,2,0,0,8,0,0,0,152,27,0,0,33,0,0,0,27,1,0,0,20,0,0,0,152,27,0,0,33,0,0,0,63,1,0,0,20,0,0,0,2,0,0,0,152,27,0,0,33,0,0,0,113,1,0,0,8,0,0,0,222,27,0,0,46,0,0,0,55,0,0,0,12,0,0,0,86,28,0,0,46,0,0,0,46,0,0,0,25,0,0,0,170,28,0,0,37,0,0,0,90,0,0,0,8,0,0,0,207,28,0,0,21,0,0,0,228,28,0,0,1,0,0,0,229,28,0,0,32,0,0,0,5,29,0,0,37,0,0,0,33,0,0,0,4,0,0,0,42,29,0,0,40,0,0,0,5,29,0,0,37,0,0,0,49,0,0,0,4,0,0,0,168,52,0,0,0,0,0,0,137,29,0,0,17,0,0,0,154,29,0,0,33,0,0,0,202,2,0,0,8,0,0,0,225,29,0,0,34,0,0,0,58,3,0,0,10,0,0,0,187,29,0,0,38,0,0,0,86,0,0,0,28,0,0,0,187,29,0,0,38,0,0,0,90,0,0,0,28,0,0,0,233,31,0,0,45,0,0,0,22,32,0,0,12,0,0,0,34,32,0,0,1,0,0,0,197,31,0,0,36,0,0,0,136,2,0,0,8,0,0,0,195,31,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,235,33,0,0,34,0,0,0,58,3,0,0,10,0,0,0,13,34,0,0,32,0,0,0,45,34,0,0,18,0,0,0,7,35,0,0,6,0,0,0,13,35,0,0,34,0,0,0,235,33,0,0,34,0,0,0,234,2,0,0,4,0,0,0,48,35,0,0,22,0,0,0,70,35,0,0,13,0,0,0,235,33,0,0,34,0,0,0,240,2,0,0,4,0,0,0,120,35,0,0,11,0,0,0,59,41,0,0,22,0,0,0,47,35,0,0,1,0,0,0,88,35,0,0,32,0,0,0,178,8,0,0,8,0,0,0,25,41,0,0,14,0,0,0,39,41,0,0,4,0,0,0,43,41,0,0,16,0,0,0,47,35,0,0,1,0,0,0,88,35,0,0,32,0,0,0,182,8,0,0,4,0,0,0,207,40,0,0,43,0,0,0,250,40,0,0,31,0,0,0,79,1,0,0,20,0,0,0,120,35,0,0,11,0,0,0,131,35,0,0,38,0,0,0,169,35,0,0,8,0,0,0,177,35,0,0,6,0,0,0,47,35,0,0,1,0,0,0,88,35,0,0,32,0,0,0,195,8,0,0,4,0,0,0,168,52,0,0,0,0,0,0,215,35,0,0,2,0,0,0,183,35,0,0,32,0,0,0,247,3,0,0,17,0,0,0,183,35,0,0,32,0,0,0,235,3,0,0,40,0,0,0,168,52,0,0,0,0,0,0,81,41,0,0,1,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,168,52,0,0,0,0,0,0,168,52,0,0,0,0,0,0,168,52,0,0,0,0,0,0,168,52,0,0,0,0,0,0,250,40,0,0,31,0,0,0,71,3,0,0,4,0,0,0,168,52,0,0,0,0,0,0,81,41,0,0,1,0,0,0,115,41,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,168,52,0,0,0,0,0,0,83,41,0,0,1,0,0,0,115,41,0,0,2,0,0,0,168,52,0,0,0,0,0,0,168,52,0,0,0,0,0,0,123,41,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,85,0,0,0,176,52,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,16,0,0,72,101,108,108,111,44,32,119,111,114,108,100,33,10,65,99,99,101,115,115,69,114,114,111,114,117,115,101,32,111,102,32,115,116,100,58,58,116,104,114,101,97,100,58,58,99,117,114,114,101,110,116,40,41,32,105,115,32,110,111,116,32,112,111,115,115,105,98,108,101,32,97,102,116,101,114,32,116,104,101,32,116,104,114,101,97,100,39,115,32,108,111,99,97,108,32,100,97,116,97,32,104,97,115,32,98,101,101,110,32,100,101,115,116,114,111,121,101,100,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115,58,32,116,104,114,101,97,100,32,110,97,109,101,32,109,97,121,32,110,111,116,32,99,111,110,116,97,105,110,32,105,110,116,101,114,105,111,114,32,110,117,108,108,32,98,121,116,101,115,102,97,105,108,101,100,32,116,111,32,103,101,110,101,114,97,116,101,32,117,110,105,113,117,101,32,116,104,114,101,97,100,32,73,68,58,32,98,105,116,115,112,97,99,101,32,101,120,104,97,117,115,116,101,100,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,99,111,110,100,118,97,114,46,114,115,114,119,108,111,99,107,32,109,97,120,105,109,117,109,32,114,101,97,100,101,114,32,99,111,117,110,116,32,101,120,99,101,101,100,101,100,114,119,108,111,99,107,32,114,101,97,100,32,108,111,99,107,32,119,111,117,108,100,32,114,101,115,117,108,116,32,105,110,32,100,101,97,100,108,111,99,107,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,97,110,105,99,107,105,110,103,46,32,97,98,111,114,116,105,110,103,46,10,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,10,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,116,101,32,112,97,110,105,99,44,32,101,114,114,111,114,32,82,85,83,84,95,66,65,67,75,84,82,65,67,69,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,48,102,117,108,108,66,111,120,60,65,110,121,62,60,117,110,110,97,109,101,100,62,102,111,114,109,97,116,116,101,114,32,101,114,114,111,114,83,116,114,105,110,103,69,114,114,111,114,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,119,104,111,108,101,32,98,117,102,102,101,114,1,60,117,110,107,110,111,119,110,62,69,95,90,78,90,78,49,55,104,58,58,95,36,46,36,36,83,80,36,64,36,66,80,36,42,36,82,70,36,38,36,76,84,36,60,36,71,84,36,62,36,76,80,36,40,36,82,80,36,41,36,67,36,44,36,117,55,101,36,126,36,117,50,48,36,32,36,117,50,55,36,39,36,117,53,98,36,91,36,117,53,100,36,93,36,117,55,98,36,123,36,117,55,100,36,125,36,117,51,98,36,59,36,117,50,98,36,43,36,117,50,50,36,34,110,111,116,101,58,32,82,117,110,32,119,105,116,104,32,96,82,85,83,84,95,66,65,67,75,84,82,65,67,69,61,49,96,32,102,111,114,32,97,32,98,97,99,107,116,114,97,99,101,46,10,95,95,114,117,115,116,95,98,101,103,105,110,95,115,104,111,114,116,95,98,97,99,107,116,114,97,99,101,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,32,32,32,45,32,115,116,97,99,107,32,98,97,99,107,116,114,97,99,101,58,10,110,111,116,101,58,32,83,111,109,101,32,100,101,116,97,105,108,115,32,97,114,101,32,111,109,105,116,116,101,100,44,32,114,117,110,32,119,105,116,104,32,96,82,85,83,84,95,66,65,67,75,84,82,65,67,69,61,102,117,108,108,96,32,102,111,114,32,97,32,118,101,114,98,111,115,101,32,98,97,99,107,116,114,97,99,101,46,10,85,110,119,105,110,100,69,114,114,111,114,117,110,101,120,112,101,99,116,101,100,32,114,101,116,117,114,110,32,118,97,108,117,101,32,119,104,105,108,101,32,117,110,119,105,110,100,105,110,103,116,104,114,101,97,100,32,39,39,32,112,97,110,105,99,107,101,100,32,97,116,32,39,39,44,32,58,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,98,97,99,107,116,114,97,99,101,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,101,110,118,46,114,115,102,97,105,108,101,100,32,116,111,32,103,101,116,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,96,96,58,32,101,110,116,105,116,121,32,110,111,116,32,102,111,117,110,100,99,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,99,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,110,111,116,32,99,111,110,110,101,99,116,101,100,97,100,100,114,101,115,115,32,105,110,32,117,115,101,97,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,98,114,111,107,101,110,32,112,105,112,101,101,110,116,105,116,121,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,111,112,101,114,97,116,105,111,110,32,119,111,117,108,100,32,98,108,111,99,107,105,110,118,97,108,105,100,32,105,110,112,117,116,32,112,97,114,97,109,101,116,101,114,105,110,118,97,108,105,100,32,100,97,116,97,116,105,109,101,100,32,111,117,116,119,114,105,116,101,32,122,101,114,111,111,112,101,114,97,116,105,111,110,32,105,110,116,101,114,114,117,112,116,101,100,111,116,104,101,114,32,111,115,32,101,114,114,111,114,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,32,40,111,115,32,101,114,114,111,114,32,115,116,114,101,114,114,111,114,95,114,32,102,97,105,108,117,114,101,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,111,115,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,101,114,114,111,114,46,114,115,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,97,108,108,111,99,47,114,97,119,95,118,101,99,46,114,115,100,97,116,97,32,112,114,111,118,105,100,101,100,32,99,111,110,116,97,105,110,115,32,97,32,110,117,108,32,98,121,116,101,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,97,110,105,99,46,32,97,98,111,114,116,105,110,103,46,10,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,114,119,108,111,99,107,46,114,115,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,10,32,32,108,101,102,116,58,32,96,96,44,10,32,114,105,103,104,116,58,32,96,96,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,116,104,114,101,97,100,47,109,111,100,46,114,115,78,117,108,69,114,114,111,114,84,114,105,101,100,32,116,111,32,115,104,114,105,110,107,32,116,111,32,97,32,108,97,114,103,101,114,32,99,97,112,97,99,105,116,121,97,108,114,101,97,100,121,32,109,117,116,97,98,108,121,32,98,111,114,114,111,119,101,100,99,97,108,108,101,100,32,96,79,112,116,105,111,110,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,32,96,78,111,110,101,96,32,118,97,108,117,101,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,107,101,121,32,33,61,32,48,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,97,116,116,101,109,112,116,101,100,32,116,111,32,117,115,101,32,97,32,99,111,110,100,105,116,105,111,110,32,118,97,114,105,97,98,108,101,32,119,105,116,104,32,116,119,111,32,109,117,116,101,120,101,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,99,111,110,100,118,97,114,46,114,115,80,111,105,115,111,110,69,114,114,111,114,32,123,32,105,110,110,101,114,58,32,46,46,32,125,99,97,110,110,111,116,32,97,99,99,101,115,115,32,115,116,100,111,117,116,32,100,117,114,105,110,103,32,115,104,117,116,100,111,119,110,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,116,104,101,32,98,117,102,102,101,114,101,100,32,100,97,116,97,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,101,110,100,32,60,61,32,108,101,110,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,97,108,108,111,99,47,118,101,99,46,114,115,115,116,100,111,117,116,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,115,116,100,105,111,46,114,115,102,97,105,108,101,100,32,112,114,105,110,116,105,110,103,32,116,111,32,79,110,99,101,32,105,110,115,116,97,110,99,101,32,104,97,115,32,112,114,101,118,105,111,117,115,108,121,32,98,101,101,110,32,112,111,105,115,111,110,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,116,97,116,101,32,38,32,83,84,65,84,69,95,77,65,83,75,32,61,61,32,82,85,78,78,73,78,71,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,111,110,99,101,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,113,117,101,117,101,32,97,115,32,117,115,105,122,101,32,33,61,32,49,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,97,116,95,101,120,105,116,95,105,109,112,46,114,115,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,108,105,103,110,109,101,110,116,32,111,110,32,96,114,101,97,108,108,111,99,96,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,99,46,98,111,114,114,111,119,40,41,46,105,115,95,110,111,110,101,40,41,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,105,110,102,111,46,114,115,109,97,105,110,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,42,112,116,114,41,46,105,115,95,110,111,110,101,40,41,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,97,114,103,115,46,114,115,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,10,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,112,116,114,46,105,115,95,110,117,108,108,40,41,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,112,97,110,105,99,95,117,110,119,105,110,100,47,101,109,99,99,46,114,115,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,97,108,108,111,99,97,116,111,114,32,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,117,110,115,117,112,112,111,114,116,101,100,32,97,108,108,111,99,97,116,111,114,32,114,101,113,117,101,115,116,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,97,108,108,111,99,47,114,97,119,95,118,101,99,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,115,116,100,95,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,7,0,0,8,0,0,0,6,0,0,0,0,0,8,0,8,0,0,0,0,0,8,0,9,6,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,120,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,10,32,32,108,101,102,116,58,32,96,96,44,10,32,114,105,103,104,116,58,32,96,96,78,111,110,101,83,111,109,101,95,85,82,67,95,78,79,95,82,69,65,83,79,78,95,85,82,67,95,70,79,82,69,73,71,78,95,69,88,67,69,80,84,73,79,78,95,67,65,85,71,72,84,95,85,82,67,95,70,65,84,65,76,95,80,72,65,83,69,50,95,69,82,82,79,82,95,85,82,67,95,70,65,84,65,76,95,80,72,65,83,69,49,95,69,82,82,79,82,95,85,82,67,95,78,79,82,77,65,76,95,83,84,79,80,95,85,82,67,95,69,78,68,95,79,70,95,83,84,65,67,75,95,85,82,67,95,72,65,78,68,76,69,82,95,70,79,85,78,68,95,85,82,67,95,73,78,83,84,65,76,76,95,67,79,78,84,69,88,84,95,85,82,67,95,67,79,78,84,73,78,85,69,95,85,78,87,73,78,68,95,85,82,67,95,70,65,73,76,85,82,69,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,116,104,101,32,108,101,110,32,105,115,32,32,98,117,116,32,116,104,101,32,105,110,100,101,120,32,105,115,32,48,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,49,48,49,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,50,48,50,49,50,50,50,51,50,52,50,53,50,54,50,55,50,56,50,57,51,48,51,49,51,50,51,51,51,52,51,53,51,54,51,55,51,56,51,57,52,48,52,49,52,50,52,51,52,52,52,53,52,54,52,55,52,56,52,57,53,48,53,49,53,50,53,51,53,52,53,53,53,54,53,55,53,56,53,57,54,48,54,49,54,50,54,51,54,52,54,53,54,54,54,55,54,56,54,57,55,48,55,49,55,50,55,51,55,52,55,53,55,54,55,55,55,56,55,57,56,48,56,49,56,50,56,51,56,52,56,53,56,54,56,55,56,56,56,57,57,48,57,49,57,50,57,51,57,52,57,53,57,54,57,55,57,56,57,57,105,110,100,101,120,32,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,108,105,99,101,32,111,102,32,108,101,110,103,116,104,32,96,115,108,105,99,101,32,105,110,100,101,120,32,115,116,97,114,116,115,32,97,116,32,32,98,117,116,32,101,110,100,115,32,97,116,32,91,46,46,46,93,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115,98,121,116,101,32,105,110,100,101,120,32,32,105,115,32,110,111,116,32,97,32,99,104,97,114,32,98,111,117,110,100,97,114,121,59,32,105,116,32,105,115,32,105,110,115,105,100,101,32,32,40,98,121,116,101,115,32,41,32,111,102,32,96,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115,46,46,0,1,3,5,5,8,6,3,7,4,8,7,9,16,10,27,11,24,12,22,13,20,14,22,15,4,16,3,18,18,19,9,22,1,23,5,24,2,25,3,26,7,28,1,31,22,32,3,35,1,43,5,44,2,45,11,46,1,48,3,49,1,50,2,167,1,168,2,169,2,170,4,171,8,250,2,251,5,253,4,254,3,255,9,173,120,121,139,141,162,48,87,88,96,136,139,140,144,28,29,221,14,15,75,76,46,47,63,92,93,181,226,132,141,142,145,146,169,177,186,187,197,198,201,202,222,228,229,4,17,18,41,49,52,55,58,59,61,73,74,93,132,142,146,169,177,180,186,187,198,202,206,207,228,229,4,13,14,17,18,41,49,52,58,59,69,70,73,74,94,100,101,132,145,155,157,201,206,207,4,13,17,41,69,73,87,100,101,132,141,145,169,180,186,187,197,201,223,228,229,240,4,13,17,59,60,69,73,100,101,128,129,132,178,188,190,191,213,215,240,241,131,133,134,137,139,140,152,160,164,166,168,169,172,186,190,191,197,199,206,207,218,219,72,152,189,205,198,206,207,73,78,79,87,89,94,95,137,142,143,177,182,183,191,193,198,199,215,17,22,23,91,92,246,247,254,255,128,13,109,113,222,223,14,15,31,110,111,28,29,95,125,126,174,175,247,22,23,30,31,70,71,78,79,88,90,92,94,126,127,181,197,212,213,220,240,241,245,114,115,143,255,116,117,150,151,201,47,95,38,46,47,167,175,183,191,199,207,215,223,154,64,151,152,143,31,255,175,254,255,206,255,78,79,90,91,7,8,15,16,39,47,238,239,110,111,55,61,63,66,69,144,145,254,255,83,103,117,200,201,208,209,216,217,231,254,255,0,32,95,34,130,223,4,130,68,8,27,5,5,17,129,172,14,59,5,95,65,30,22,128,223,3,25,8,1,4,32,5,10,4,52,4,7,3,1,7,6,7,16,11,80,15,18,7,1,7,77,8,2,4,28,10,9,3,8,3,7,3,2,3,3,3,12,4,5,3,11,6,1,14,21,5,58,3,17,7,6,5,16,8,86,7,2,7,21,14,79,4,67,3,45,3,1,4,17,6,15,12,58,4,29,37,13,6,76,32,109,4,106,37,128,200,5,130,176,3,26,6,130,253,3,89,7,21,11,23,9,20,12,20,12,106,6,10,6,26,6,88,8,43,5,70,10,44,4,12,4,1,3,49,11,44,4,26,6,11,3,128,172,6,10,6,31,65,76,4,45,3,116,8,60,3,15,3,60,55,8,8,42,6,128,246,5,130,4,17,24,8,47,17,45,3,31,17,33,15,128,140,4,130,151,25,11,21,135,90,3,21,26,4,16,128,244,5,47,5,59,7,2,14,24,9,128,165,59,116,12,128,214,26,12,5,128,255,5,41,3,128,138,5,36,12,155,198,10,210,22,42,132,141,3,55,9,129,92,20,128,184,8,128,184,63,53,4,10,6,56,8,70,8,12,6,116,11,30,3,90,4,89,9,128,131,24,28,10,22,9,70,10,128,138,6,171,164,12,23,4,49,161,4,129,218,38,7,12,5,5,128,165,17,129,109,16,120,40,42,6,76,4,128,141,4,128,190,3,27,3,15,13,0,6,1,1,3,1,4,2,8,8,9,2,10,3,11,2,16,1,17,4,18,5,19,18,20,2,21,2,28,5,36,1,106,3,107,2,188,2,209,2,212,12,213,9,214,2,215,2,218,1,224,5,232,2,238,32,240,4,241,1,249,4,12,39,59,62,78,79,143,158,158,159,6,7,9,54,61,62,86,243,208,209,4,20,24,86,87,189,53,206,207,224,18,135,137,142,158,4,13,14,17,18,41,49,52,58,59,69,70,73,74,78,79,100,101,90,92,182,183,9,55,144,145,168,111,95,238,239,90,98,154,155,39,40,85,157,160,161,163,164,167,168,173,186,188,196,6,11,12,21,29,58,63,69,81,166,167,204,205,160,7,25,26,34,37,197,198,4,32,35,37,38,40,51,56,58,72,74,76,80,83,85,86,88,90,92,94,96,99,101,102,107,115,120,125,127,138,164,170,175,176,192,208,47,31,49,50,63,94,34,123,5,3,4,45,3,101,4,1,47,46,128,130,29,3,49,15,28,4,36,12,27,5,43,5,68,4,14,42,128,170,6,36,4,36,4,40,8,52,11,1,128,144,129,55,9,22,10,8,128,152,57,3,99,8,9,48,22,5,33,3,27,5,1,64,56,4,75,5,40,4,3,4,9,8,9,7,64,32,39,4,12,9,54,3,58,5,26,7,4,12,7,80,73,55,51,13,51,7,6,129,96,31,129,129,78,4,30,15,67,14,25,7,10,6,68,12,39,9,117,11,63,65,42,6,59,5,10,6,81,6,1,5,16,3,5,128,139,94,34,72], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([8,10,128,166,94,34,69,11,10,6,13,19,56,8,10,54,26,3,15,4,16,129,96,83,12,1,129,192,57,129,7,70,10,29,3,71,131,73,131,154,102,117,11,128,196,138,188,132,47,143,209,130,71,161,185,130,57,7,42,4,2,96,38,10,70,10,40,5,19,131,112,69,11,47,16,17,64,1,31,151,237,19,130,243,165,13,2,139,254,107,5,13,3,9,7,16,147,96,128,246,10,115,8,110,23,70,128,186,87,9,18,128,142,129,71,3,133,66,15,21,133,80,43,135,213,128,215,41,75,5,10,4,2,132,160,60,6,1,4,85,5,27,52,2,129,14,44,4,100,12,86,10,13,3,92,4,61,57,29,13,44,4,9,7,2,128,174,131,211,13,13,3,7,9,116,12,85,43,12,4,56,8,10,6,40,8,30,98,24,8,28,4,15,33,18,46,1,134,63,99,97,108,108,101,100,32,96,79,112,116,105,111,110,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,32,96,78,111,110,101,96,32,118,97,108,117,101,47,99,104,101,99,107,111,117,116,47,115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115,98,101,103,105,110,32,60,61,32,101,110,100,32,40,32,60,61,32,41,32,119,104,101,110,32,115,108,105,99,105,110,103,32,96,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,111,102,32,96,10,41,32,32,32,32,32,66,111,114,114,111,119,69,114,114,111,114,66,111,114,114,111,119,77,117,116,69,114,114,111,114,32,123,58,32,10,125,32,125,44,32,91,107,105,110,100,69,109,112,116,121,48,120,80,97,114,115,101,73,110,116,69,114,114,111,114,73,110,118,97,108,105,100,68,105,103,105,116,79,118,101,114,102,108,111,119,85,110,100,101,114,102,108,111,119,85,116,102,56,69,114,114,111,114,118,97,108,105,100,95,117,112,95,116,111,101,114,114,111,114,95,108,101,110,78,111,110,101,83,111,109,101,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

   

  function _pthread_mutexattr_settype() {}

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_condattr_destroy() { return 0; }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function ___lock() {}

  function ___unlock() {}

  function _pthread_mutexattr_init() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _pthread_mutexattr_destroy() {}

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }  

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function _llvm_trap() {
      abort('trap!');
    }

  var _llvm_ctlz_i32=true;

  function _pthread_cond_init() { return 0; }

  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module['dynCall_iii'](func, 0, arg);
        if (ret !== 0) return;
      }
    }

  function _pthread_condattr_setclock() { return 0; }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_rwlock_rdlock() { return 0; }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

   

  function _pthread_cond_signal() { return 0; }


  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

   

   

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  function ___gxx_personality_v0() {
    }

  function _pthread_mutex_destroy() {}

  function _pthread_cond_wait() { return 0; }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function _pthread_condattr_init() { return 0; }

   


  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _pthread_rwlock_unlock() { return 0; }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_key_create": _pthread_key_create, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "___gxx_personality_v0": ___gxx_personality_v0, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___buildEnvironment": ___buildEnvironment, "_pthread_cond_init": _pthread_cond_init, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "__emscripten_traverse_stack": __emscripten_traverse_stack, "___setErrNo": ___setErrNo, "___cxa_free_exception": ___cxa_free_exception, "_pthread_key_delete": _pthread_key_delete, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_pthread_condattr_setclock": _pthread_condattr_setclock, "_pthread_getspecific": _pthread_getspecific, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_abort": _abort, "_pthread_condattr_init": _pthread_condattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_getenv": _getenv, "_pthread_condattr_destroy": _pthread_condattr_destroy, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_setspecific": _pthread_setspecific, "_dladdr": _dladdr, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall4": ___syscall4, "_pthread_cond_destroy": _pthread_cond_destroy, "_llvm_trap": _llvm_trap, "_pthread_mutex_init": _pthread_mutex_init, "__Unwind_Backtrace": __Unwind_Backtrace, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_key_create=env._pthread_key_create;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pthread_cond_init=env._pthread_cond_init;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var ___setErrNo=env.___setErrNo;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var _pthread_key_delete=env._pthread_key_delete;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _pthread_condattr_setclock=env._pthread_condattr_setclock;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _abort=env._abort;
  var _pthread_condattr_init=env._pthread_condattr_init;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _getenv=env._getenv;
  var _pthread_condattr_destroy=env._pthread_condattr_destroy;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_setspecific=env._pthread_setspecific;
  var _dladdr=env._dladdr;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall4=env.___syscall4;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _llvm_trap=env._llvm_trap;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN4main4main17hf6c132e6daf255a9E() {
 var $_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_2 = sp;
 __ZN4core3fmt9Arguments6new_v117h17f1472db13ed851E($_2,2264,1,12908,0);
 __ZN3std2io5stdio6_print17hae3bb5eaa91b1bf2E($_2);
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN3std2rt10lang_start17hf12ee8202991cf74E(86,$0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt9Arguments6new_v117h17f1472db13ed851E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_6 = sp;
 HEAP32[$_6>>2] = 0;
 HEAP32[$0>>2] = $1;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 8|0);
 ;HEAP32[$6>>2]=HEAP32[$_6>>2]|0;HEAP32[$6+4>>2]=HEAP32[$_6+4>>2]|0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $4;
 STACKTOP = sp;return;
}
function ___rust_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rdl_alloc($0,$1,$2)|0);
 return ($3|0);
}
function ___rust_oom($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_oom($0);
 // unreachable;
}
function ___rust_dealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rdl_dealloc($0,$1,$2);
 return;
}
function ___rust_realloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___rdl_realloc($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function __ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17haec9f51133c6f98dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_6 = sp;
 __ZN4core3fmt9Formatter12debug_struct17h7f7bbbf8a1914645E($_6,$1,4490,11);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17hf5f00ad81e214bfcE($_6)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e5681632d507562E() {
 var $$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i4$i = 0, $_0$sroa$0$0 = 0, $_11$i = 0, $_12$sroa$5$0$$sroa_idx15$i = 0, $_15$i = 0, $_18$i = 0, $_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_22$0$in$pre$phiZZZ2D = 0, $_28$i = 0, $_6$i$i$i$i = 0, $_9$i = 0;
 var $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i62$i = 0, $cond$i$i$i69$i = 0, $cond$i$i2$i = 0, $cond$i2$i = 0, $cond3 = 0, $err$i$i$i = 0, $magicptr = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$16$0$i = 0, $phitmp$i$i = 0, $t1$i$i$i$i$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = 0, $value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $err$i$i$i = sp + 120|0;
 $_6$i$i$i$i = sp + 104|0;
 $_28$i = sp + 96|0;
 $_18$i = sp + 88|0;
 $_15$i = sp + 72|0;
 $_11$i = sp + 56|0;
 $t1$i$i$i$i$i = sp + 24|0;
 $_9$i = sp;
 $0 = HEAP32[568]|0;
 $cond$i$i2$i = ($0|0)==(0);
 if ($cond$i$i2$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2272)|0);
  $_0$0$i$i4$i = $1;
 } else {
  $_0$0$i$i4$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i4$i|0))|0);
 $magicptr = $2;
 switch ($magicptr|0) {
 case 0:  {
  label = 4;
  break;
 }
 case 1:  {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  $$pn = $2;
 }
 }
 if ((label|0) == 4) {
  $3 = (___rust_alloc(24,4,$err$i$i$i)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
   // unreachable;
  }
  HEAP32[$3>>2] = 2272;
  $_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($3)) + 4|0);
  HEAP32[$_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $5 = HEAP32[568]|0;
  $cond$i$i$i = ($5|0)==(0);
  if ($cond$i$i$i) {
   $6 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2272)|0);
   $_0$0$i$i$i = $6;
  } else {
   $_0$0$i$i$i = $5;
  }
  (_pthread_setspecific(($_0$0$i$i$i|0),($3|0))|0);
  $$pn = $3;
 }
 $7 = ((($$pn)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $cond3 = ($8|0)==(0);
 do {
  if ($cond3) {
   dest=$t1$i$i$i$i$i; src=$7; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   HEAP8[$7>>0]=1&255;HEAP8[$7+1>>0]=(1>>8)&255;HEAP8[$7+2>>0]=(1>>16)&255;HEAP8[$7+3>>0]=1>>24;
   $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = ((($$pn)) + 8|0);
   HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx>>0]=0&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+3>>0]=0>>24;
   $value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = ((($$pn)) + 20|0);
   HEAP8[$value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx>>0]=0&255;HEAP8[$value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$416$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx+3>>0]=0>>24;
   ;HEAP32[$_9$i>>2]=HEAP32[$t1$i$i$i$i$i>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$t1$i$i$i$i$i+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$t1$i$i$i$i$i+8>>2]|0;HEAP32[$_9$i+12>>2]=HEAP32[$t1$i$i$i$i$i+12>>2]|0;HEAP32[$_9$i+16>>2]=HEAP32[$t1$i$i$i$i$i+16>>2]|0;
   $9 = HEAP32[$_9$i>>2]|0;
   $cond$i2$i = ($9|0)==(0);
   if (!($cond$i2$i)) {
    $10 = ((($_9$i)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $13 = HEAP32[$11>>2]|0;HEAP32[$11>>2] = (($13-1)|0);
     $14 = ($13|0)==(1);
     if ($14) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($10);
     }
    }
   }
   $15 = HEAP32[$7>>2]|0;
   $cond$i$i = ($15|0)==(0);
   if ($cond$i$i) {
    __ZN4core9panicking5panic17h8ce57b1f932a0889E(2280);
    // unreachable;
   } else {
    $$pre$phiZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx;$_22$0$in$pre$phiZZZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx;
    break;
   }
  } else {
   $$pre43 = ((($$pn)) + 8|0);
   $$pre$phiZ2D = $$pre43;$_22$0$in$pre$phiZZZ2D = $$pre43;
  }
 } while(0);
 $16 = HEAP32[$$pre$phiZ2D>>2]|0;
 $cond$i$i$i$i = ($16|0)==(-1);
 do {
  if ($cond$i$i$i$i) {
   __THREW__ = 0;
   invoke_v(87);
   $17 = __THREW__; __THREW__ = 0;
  } else {
   $18 = $_22$0$in$pre$phiZZZ2D;
   $19 = (($16) + 1)|0;
   HEAP8[$$pre$phiZ2D>>0]=$19&255;HEAP8[$$pre$phiZ2D+1>>0]=($19>>8)&255;HEAP8[$$pre$phiZ2D+2>>0]=($19>>16)&255;HEAP8[$$pre$phiZ2D+3>>0]=$19>>24;
   $20 = ((($$pn)) + 12|0);
   $phitmp$i$i = $20;
   $21 = ((($$pn)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   HEAP8[$$pre$phiZ2D>>0]=$16&255;HEAP8[$$pre$phiZ2D+1>>0]=($16>>8)&255;HEAP8[$$pre$phiZ2D+2>>0]=($16>>16)&255;HEAP8[$$pre$phiZ2D+3>>0]=$16>>24;
   if ($23) {
    HEAP32[$_15$i>>2] = 0;
    __THREW__ = 0;
    $24 = (invoke_ii(88,($_15$i|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    $27 = $24;
    HEAP32[$_11$i>>2] = 0;
    $_12$sroa$5$0$$sroa_idx15$i = ((($_11$i)) + 8|0);
    HEAP32[$_12$sroa$5$0$$sroa_idx15$i>>2] = $27;
    $28 = HEAP32[$$pre$phiZ2D>>2]|0;
    $cond$i$i$i62$i = ($28|0)==(0);
    if (!($cond$i$i$i62$i)) {
     __THREW__ = 0;
     invoke_v(89);
     $29 = __THREW__; __THREW__ = 0;
     $30 = ___cxa_find_matching_catch_2()|0;
     $31 = tempRet0;
     __ZN4core3ptr13drop_in_place17hc13f35ed5dba80d4E($_11$i);
     $personalityslot$sroa$0$0$i = $30;$personalityslot$sroa$16$0$i = $31;
     ___resumeException($personalityslot$sroa$0$0$i|0);
     // unreachable;
    }
    HEAP8[$$pre$phiZ2D>>0]=-1&255;HEAP8[$$pre$phiZ2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phiZ2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phiZ2D+3>>0]=-1>>24;
    $32 = $_18$i;
    $33 = $32;
    HEAP32[$33>>2] = $phitmp$i$i;
    $34 = (($32) + 4)|0;
    $35 = $34;
    HEAP32[$35>>2] = $18;
    $36 = HEAP32[$21>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($38-1)|0);
     $39 = ($38|0)==(1);
     if ($39) {
      /* fence */;
      __THREW__ = 0;
      invoke_vi(90,($21|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $61 = ___cxa_find_matching_catch_2()|0;
       $62 = tempRet0;
       ;HEAP32[$20>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_11$i+8>>2]|0;
       __ZN4core3ptr13drop_in_place17h34b7009619ef173bE($_18$i);
       $personalityslot$sroa$0$0$i = $61;$personalityslot$sroa$16$0$i = $62;
       ___resumeException($personalityslot$sroa$0$0$i|0);
       // unreachable;
      }
     }
    }
    ;HEAP32[$20>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_11$i+8>>2]|0;
    $42 = ((($_18$i)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP8[$43>>0]=0&255;HEAP8[$43+1>>0]=(0>>8)&255;HEAP8[$43+2>>0]=(0>>16)&255;HEAP8[$43+3>>0]=0>>24;
    $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
    $44 = $$pre;
   } else {
    $44 = $16;
   }
   $cond$i$i$i69$i = ($44|0)==(0);
   if (!($cond$i$i$i69$i)) {
    __THREW__ = 0;
    invoke_v(89);
    $45 = __THREW__; __THREW__ = 0;
    $46 = ___cxa_find_matching_catch_2()|0;
    $47 = tempRet0;
    $personalityslot$sroa$0$0$i = $46;$personalityslot$sroa$16$0$i = $47;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   HEAP8[$$pre$phiZ2D>>0]=-1&255;HEAP8[$$pre$phiZ2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phiZ2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phiZ2D+3>>0]=-1>>24;
   $48 = $_28$i;
   $49 = $48;
   HEAP32[$49>>2] = $phitmp$i$i;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $18;
   $52 = HEAP32[$21>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    __THREW__ = 0;
    invoke_vi(91,(2280|0));
    $54 = __THREW__; __THREW__ = 0;
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    __ZN4core3ptr13drop_in_place17h34b7009619ef173bE($_28$i);
    $personalityslot$sroa$0$0$i = $55;$personalityslot$sroa$16$0$i = $56;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   $57 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($57+1)|0);
   $58 = ($57|0)<(0);
   if ($58) {
    _llvm_trap();
    // unreachable;
   }
   $63 = $52;
   HEAP8[$_22$0$in$pre$phiZZZ2D>>0]=0&255;HEAP8[$_22$0$in$pre$phiZZZ2D+1>>0]=(0>>8)&255;HEAP8[$_22$0$in$pre$phiZZZ2D+2>>0]=(0>>16)&255;HEAP8[$_22$0$in$pre$phiZZZ2D+3>>0]=0>>24;
   $_0$sroa$0$0 = $63;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 } while(0);
 $59 = ___cxa_find_matching_catch_2()|0;
 $60 = tempRet0;
 $personalityslot$sroa$0$0$i = $59;$personalityslot$sroa$16$0$i = $60;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h3960634c37b68044E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($3-1)|0);
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($0);
 return;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_4$sroa$0$0$copyload23 = 0, $_5$sroa$0$0$copyload2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_4$sroa$0$0$copyload23 = HEAP32[$0>>2]|0;
 $1 = ((($_4$sroa$0$0$copyload23)) + 8|0);
 __ZN4core3ptr13drop_in_place17h401d4ca239274040E($1);
 $_5$sroa$0$0$copyload2$i$i = HEAP32[$0>>2]|0;
 $2 = ((($_5$sroa$0$0$copyload2$i$i)) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3-1)|0);
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 /* fence */;
 ___rust_dealloc($_4$sroa$0$0$copyload23,40,8);
 return;
}
function __ZN4core3ptr13drop_in_place17h401d4ca239274040E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  HEAP8[$2>>0] = 0;
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   ___rust_dealloc($7,$5,1);
  }
 }
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 (_pthread_mutex_destroy(($9|0))|0);
 $10 = HEAP32[$8>>2]|0;
 ___rust_dealloc($10,28,4);
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 (_pthread_cond_destroy(($12|0))|0);
 $13 = HEAP32[$11>>2]|0;
 ___rust_dealloc($13,48,4);
 return;
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$1 = 0, $_22$i = 0, $_22$i15 = 0, $_29$0$$sroa_idx = 0, $_29$0$copyload = 0, $_29$i = 0, $_35$0$copyload = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_6$sroa$0$0$$sroa_idx$i$i20 = 0, $_7$i = 0, $_7$i18 = 0, $key$i = 0, $key$i19 = 0, $key1$031 = 0, $left_val$i = 0;
 var $left_val$i17 = 0, $right_val$i = 0, $right_val$i16 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_22$i15 = sp + 40|0;
 $right_val$i16 = sp + 92|0;
 $left_val$i17 = sp + 88|0;
 $_7$i18 = sp + 84|0;
 $key$i19 = sp + 80|0;
 $_29$i = sp + 24|0;
 $_22$i = sp;
 $right_val$i = sp + 76|0;
 $left_val$i = sp + 72|0;
 $_7$i = sp + 68|0;
 $key$i = sp + 64|0;
 $_29$0$$sroa_idx = ((($0)) + 4|0);
 $_29$0$copyload = HEAP32[$_29$0$$sroa_idx>>2]|0;
 HEAP32[$key$i>>2] = 0;
 $1 = (_pthread_key_create(($key$i|0),($_29$0$copyload|0))|0);
 HEAP32[$_7$i>>2] = $1;
 HEAP32[$left_val$i>>2] = $_7$i;
 HEAP32[$right_val$i>>2] = 12724;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $left_val$i;
  $4 = $right_val$i;
  HEAP32[$_29$i>>2] = $3;
  $5 = ((($_29$i)) + 4|0);
  HEAP32[$5>>2] = (92);
  $6 = ((($_29$i)) + 8|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($_29$i)) + 12|0);
  HEAP32[$7>>2] = (92);
  HEAP32[$_22$i>>2] = 2352;
  $8 = ((($_22$i)) + 4|0);
  HEAP32[$8>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i$i = ((($_22$i)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
  $9 = ((($_22$i)) + 16|0);
  HEAP32[$9>>2] = $_29$i;
  $10 = ((($_22$i)) + 20|0);
  HEAP32[$10>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_22$i,2976);
  // unreachable;
 }
 $11 = HEAP32[$key$i>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $_35$0$copyload = HEAP32[$_29$0$$sroa_idx>>2]|0;
  HEAP32[$key$i19>>2] = 0;
  $13 = (_pthread_key_create(($key$i19|0),($_35$0$copyload|0))|0);
  HEAP32[$_7$i18>>2] = $13;
  HEAP32[$left_val$i17>>2] = $_7$i18;
  HEAP32[$right_val$i16>>2] = 12724;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = $left_val$i17;
   $16 = $right_val$i16;
   HEAP32[$_29$i>>2] = $15;
   $17 = ((($_29$i)) + 4|0);
   HEAP32[$17>>2] = (92);
   $18 = ((($_29$i)) + 8|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($_29$i)) + 12|0);
   HEAP32[$19>>2] = (92);
   HEAP32[$_22$i15>>2] = 2352;
   $20 = ((($_22$i15)) + 4|0);
   HEAP32[$20>>2] = 3;
   $_6$sroa$0$0$$sroa_idx$i$i20 = ((($_22$i15)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i$i20>>2] = 0;
   $21 = ((($_22$i15)) + 16|0);
   HEAP32[$21>>2] = $_29$i;
   $22 = ((($_22$i15)) + 20|0);
   HEAP32[$22>>2] = 2;
   __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_22$i15,2976);
   // unreachable;
  }
  $23 = HEAP32[$key$i19>>2]|0;
  (_pthread_key_delete(0)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(6559,26,2992);
   // unreachable;
  } else {
   $key1$031 = $23;
  }
 } else {
  $key1$031 = $11;
 }
 $25 = HEAP32[$0>>2]|0;if (($25|0) == 0) HEAP32[$0>>2] = $key1$031;
 $success = ($25|0)==(0);
 if ($success) {
  $_0$1 = $key1$031;
  STACKTOP = sp;return ($_0$1|0);
 }
 (_pthread_key_delete(($key1$031|0))|0);
 $_0$1 = $25;
 STACKTOP = sp;return ($_0$1|0);
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($0) {
 $0 = $0|0;
 var $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $err = sp;
 ;HEAP32[$err>>2]=HEAP32[$0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$0+8>>2]|0;
 ___rust_oom($err);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17hd3623847d1842216E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_12 = sp + 32|0;
 $_5 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6461;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 24;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_12>>2] = $1;
 $3 = ((($_12)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_12)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_12)) + 12|0);
 HEAP32[$5>>2] = (94);
 HEAP32[$_5>>2] = 2304;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $7 = ((($_5)) + 16|0);
 HEAP32[$7>>2] = $_12;
 $8 = ((($_5)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,2320);
 // unreachable;
}
function __ZN3std6thread6Thread3new17hf3c4d6d1510ff550E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $_10 = 0, $_10$i$i$i = 0, $_3$i$i$i = 0, $_3$i$i$i$i = 0, $_4$i$i = 0, $_4$sroa$0$0$$sroa_idx$i = 0;
 var $_6$i$i$i$i = 0, $_6$i$i$i$i29 = 0, $_6$i$i$i$i32 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_8 = 0, $_8$sroa_raw_idx = 0, $attr$i$i$i = 0, $c$i = 0, $cname$sroa$0$0 = 0, $cname$sroa$5$0 = 0, $cond$i$i$i = 0, $data$i$sroa$0$0$$sroa_idx = 0, $data$i$sroa$4$0$$sroa_idx = 0, $data$i$sroa$5$0$$sroa_idx = 0, $data$i$sroa$6$0$$sroa_idx = 0, $err$i$i$i = 0, $err$i$i$i28 = 0, $err$i$i$i31 = 0, $name$sroa$0$sroa$0$0$copyload = 0, $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx = 0;
 var $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $self$i$sroa$0$0$copyload$i$i = 0, $self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx = 0, $self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx42 = 0, $self$i$sroa$4$0$$sroa_idx16$i$i = 0, $self$i$sroa$4$0$copyload$i$i40 = 0, $self$i$sroa$4$0$copyload$i$i43 = 0, $self$i$sroa$6$0$$sroa_idx = 0, $self$i$sroa$6$0$$sroa_idx$i$i = 0, $self$i$sroa$6$4$$sroa_idx$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $err$i$i$i31 = sp + 184|0;
 $_6$i$i$i$i32 = sp + 168|0;
 $c$i = sp + 160|0;
 $err$i$i$i28 = sp + 144|0;
 $_6$i$i$i$i29 = sp + 128|0;
 $attr$i$i$i = sp + 120|0;
 $err$i$i$i = sp + 104|0;
 $_6$i$i$i$i = sp + 88|0;
 $_10$i$i$i = sp + 72|0;
 $_3$i$i$i$i = sp + 56|0;
 $_3$i$i$i = sp + 40|0;
 $_4$i$i = sp + 16|0;
 $_10 = sp + 8|0;
 $_8 = sp;
 $name$sroa$0$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $1 = ($name$sroa$0$sroa$0$0$copyload|0)==(0|0);
 do {
  if ($1) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx = ((($0)) + 4|0);
   $2 = $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx;
   $3 = $2;
   $4 = HEAP32[$3>>2]|0;
   $5 = (($2) + 4)|0;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$_3$i$i$i$i>>2] = $name$sroa$0$sroa$0$0$copyload;
   $self$i$sroa$6$0$$sroa_idx = ((($_3$i$i$i$i)) + 4|0);
   $8 = $self$i$sroa$6$0$$sroa_idx;
   $9 = $8;
   HEAP32[$9>>2] = $4;
   $10 = (($8) + 4)|0;
   $11 = $10;
   HEAP32[$11>>2] = $7;
   __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17h2f31aea922f6b518E($_3$i$i$i,$_3$i$i$i$i);
   __ZN3std3ffi5c_str7CString4_new17h55226b30b4e6e293E($_4$i$i,$_3$i$i$i);
   $self$i$sroa$0$0$copyload$i$i = HEAP32[$_4$i$i>>2]|0;
   $cond$i$i$i = ($self$i$sroa$0$0$copyload$i$i|0)==(0);
   if ($cond$i$i$i) {
    $self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx42 = ((($_4$i$i)) + 8|0);
    $self$i$sroa$4$0$copyload$i$i43 = HEAP32[$self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx42>>2]|0;
    $self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx = ((($_4$i$i)) + 4|0);
    $self$i$sroa$4$0$copyload$i$i40 = HEAP32[$self$i$sroa$4$0$$sroa_cast$i$i$sroa_idx>>2]|0;
    $cname$sroa$0$0 = $self$i$sroa$4$0$copyload$i$i40;$cname$sroa$5$0 = $self$i$sroa$4$0$copyload$i$i43;
    break;
   } else {
    $self$i$sroa$4$0$$sroa_idx16$i$i = ((($_4$i$i)) + 4|0);
    $12 = $self$i$sroa$4$0$$sroa_idx16$i$i;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = (($12) + 4)|0;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $self$i$sroa$6$0$$sroa_idx$i$i = ((($_4$i$i)) + 12|0);
    $18 = $self$i$sroa$6$0$$sroa_idx$i$i;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18) + 4)|0;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = $_10$i$i$i;
    $25 = $24;
    HEAP32[$25>>2] = $14;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = $17;
    $self$i$sroa$6$4$$sroa_idx$i$i = ((($_10$i$i$i)) + 8|0);
    $28 = $self$i$sroa$6$4$$sroa_idx$i$i;
    $29 = $28;
    HEAP32[$29>>2] = $20;
    $30 = (($28) + 4)|0;
    $31 = $30;
    HEAP32[$31>>2] = $23;
    __ZN4core6result13unwrap_failed17h07768e6bfa26f9f8E(4644,47,$_10$i$i$i);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$_8>>2] = $cname$sroa$0$0;
 $_8$sroa_raw_idx = ((($_8)) + 4|0);
 HEAP32[$_8$sroa_raw_idx>>2] = $cname$sroa$5$0;
 (_pthread_mutex_lock(((12696)|0))|0);
 $32 = 12608;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34|0)==(-1);
 $39 = ($37|0)==(-1);
 $40 = $38 & $39;
 if ($40) {
  (_pthread_mutex_unlock(((12696)|0))|0);
  __THREW__ = 0;
  invoke_viii(95,(4691|0),55,(2336|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = tempRet0;
  $personalityslot$sroa$0$0 = $42;$personalityslot$sroa$6$0 = $43;
  __ZN4core3ptr13drop_in_place17ha9c55441396e7dcdE($_8);
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $44 = (_i64Add(($34|0),($37|0),1,0)|0);
 $45 = tempRet0;
 $46 = 12608;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 (_pthread_mutex_unlock(((12696)|0))|0);
 $50 = (___rust_alloc(28,4,$err$i$i$i)|0);
 $51 = ($50|0)==(0|0);
 if ($51) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$50>>2]=HEAP32[(12616)>>2]|0;HEAP32[$50+4>>2]=HEAP32[(12616)+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[(12616)+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[(12616)+12>>2]|0;HEAP32[$50+16>>2]=HEAP32[(12616)+16>>2]|0;HEAP32[$50+20>>2]=HEAP32[(12616)+20>>2]|0;HEAP32[$50+24>>2]=HEAP32[(12616)+24>>2]|0;
 $52 = $50;
 (_pthread_mutexattr_init(($attr$i$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i$i|0),0)|0);
 (_pthread_mutex_init(($50|0),($attr$i$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i$i|0))|0);
 $53 = $_10;
 $54 = $53;
 HEAP32[$54>>2] = $52;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = 0;
 $57 = (___rust_alloc(48,4,$err$i$i$i31)|0);
 $58 = ($57|0)==(0|0);
 if ($58) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i32);
  // unreachable;
 }
 dest=$57; src=(12648); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $59 = $57;
 HEAP32[$c$i>>2] = $59;
 $_4$sroa$0$0$$sroa_idx$i = ((($c$i)) + 4|0);
 HEAP32[$_4$sroa$0$0$$sroa_idx$i>>2] = 0;
 __THREW__ = 0;
 invoke_vi(96,($57|0));
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $93 = ___cxa_find_matching_catch_2()|0;
  $94 = tempRet0;
  __ZN4core3ptr13drop_in_place17h850892b3d274c2fcE($c$i);
  __ZN4core3ptr13drop_in_place17hee7c73624b8fa3c5E($_10);
  $personalityslot$sroa$0$0 = $93;$personalityslot$sroa$6$0 = $94;
  __ZN4core3ptr13drop_in_place17ha9c55441396e7dcdE($_8);
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $62 = $c$i;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = $_8;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (___rust_alloc(40,8,$err$i$i$i28)|0);
 $75 = ($74|0)==(0|0);
 if ($75) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i29);
  // unreachable;
 } else {
  HEAP32[$74>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($74)) + 4|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 1;
  $data$i$sroa$0$0$$sroa_idx = ((($74)) + 8|0);
  $76 = $data$i$sroa$0$0$$sroa_idx;
  $77 = $76;
  HEAP32[$77>>2] = $34;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $37;
  $data$i$sroa$4$0$$sroa_idx = ((($74)) + 16|0);
  $80 = $data$i$sroa$4$0$$sroa_idx;
  $81 = $80;
  HEAP32[$81>>2] = $70;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $73;
  $data$i$sroa$5$0$$sroa_idx = ((($74)) + 24|0);
  $84 = $data$i$sroa$5$0$$sroa_idx;
  $85 = $84;
  HEAP32[$85>>2] = $52;
  $86 = (($84) + 4)|0;
  $87 = $86;
  HEAP32[$87>>2] = 0;
  $data$i$sroa$6$0$$sroa_idx = ((($74)) + 32|0);
  $88 = $data$i$sroa$6$0$$sroa_idx;
  $89 = $88;
  HEAP32[$89>>2] = $64;
  $90 = (($88) + 4)|0;
  $91 = $90;
  HEAP32[$91>>2] = $67;
  $92 = $74;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function __ZN4core6result13unwrap_failed17h0f6cc8b8f2677502E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_12 = sp + 32|0;
 $_5 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 4595;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_12>>2] = $1;
 $3 = ((($_12)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_12)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_12)) + 12|0);
 HEAP32[$5>>2] = (97);
 HEAP32[$_5>>2] = 2304;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $7 = ((($_5)) + 16|0);
 HEAP32[$7>>2] = $_12;
 $8 = ((($_5)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,2320);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hc13f35ed5dba80d4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($4-1)|0);
 $5 = ($4|0)==(1);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 8|0);
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($6);
 return;
}
function __ZN4core3ptr13drop_in_place17h34b7009619ef173bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h3a64b0c1b3d07c41E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h509ce010b1cead94E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN3std3ffi5c_str7CString4_new17h55226b30b4e6e293E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $$sroa_idx = 0, $$sroa_idx18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$sroa$4$0$$sroa_idx2 = 0, $_3$sroa$0$0$copyload2$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, $_8$i = 0, $bytes = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $_8$i = sp + 40|0;
 $v$i = sp + 24|0;
 $bytes = sp + 8|0;
 ;HEAP32[$bytes>>2]=HEAP32[$1>>2]|0;HEAP32[$bytes+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$bytes+8>>2]=HEAP32[$1+8>>2]|0;
 $_3$sroa$0$0$copyload2$i$i = HEAP32[$bytes>>2]|0;
 $3 = ((($bytes)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_memchr($_3$sroa$0$0$copyload2$i$i,0,$4)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $22 = $5;
  $23 = $_3$sroa$0$0$copyload2$i$i;
  $24 = (($22) - ($23))|0;
  HEAP32[$0>>2] = 1;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $24;
  $_10$sroa$4$0$$sroa_idx2 = ((($0)) + 8|0);
  ;HEAP32[$_10$sroa$4$0$$sroa_idx2>>2]=HEAP32[$bytes>>2]|0;HEAP32[$_10$sroa$4$0$$sroa_idx2+4>>2]=HEAP32[$bytes+4>>2]|0;HEAP32[$_10$sroa$4$0$$sroa_idx2+8>>2]=HEAP32[$bytes+8>>2]|0;
  STACKTOP = sp;return;
 }
 ;HEAP32[$v$i>>2]=HEAP32[$bytes>>2]|0;HEAP32[$v$i+4>>2]=HEAP32[$bytes+4>>2]|0;HEAP32[$v$i+8>>2]=HEAP32[$bytes+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(98,($v$i|0),1);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($v$i);
  ___resumeException($20|0);
  // unreachable;
 }
 $9 = ((($v$i)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($v$i)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)==($12|0);
 do {
  if ($13) {
   __THREW__ = 0;
   invoke_vi(99,($v$i|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($v$i);
    ___resumeException($20|0);
    // unreachable;
   } else {
    $$pre$i$i = HEAP32[$9>>2]|0;
    $17 = $$pre$i$i;
    break;
   }
  } else {
   $17 = $10;
  }
 } while(0);
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$v$i>>2]|0;
 $16 = (($_3$sroa$0$0$copyload2$i$i$i$i) + ($17)|0);
 HEAP8[$16>>0] = 0;
 $18 = (($17) + 1)|0;
 HEAP32[$9>>2] = $18;
 ;HEAP32[$_8$i>>2]=HEAP32[$v$i>>2]|0;HEAP32[$_8$i+4>>2]=HEAP32[$v$i+4>>2]|0;HEAP32[$_8$i+8>>2]=HEAP32[$v$i+8>>2]|0;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_16into_boxed_slice17h642cc4ad68d1941bE($2,$_8$i);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $19 = $$sreg$field;
 HEAP32[$0>>2] = 0;
 $$sroa_idx = ((($0)) + 4|0);
 HEAP32[$$sroa_idx>>2] = $19;
 $$sroa_idx18 = ((($0)) + 8|0);
 HEAP32[$$sroa_idx18>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4core6result13unwrap_failed17h07768e6bfa26f9f8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_12 = sp + 48|0;
 $_5 = sp + 24|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 ;HEAP32[$error>>2]=HEAP32[$2>>2]|0;HEAP32[$error+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$_12>>2] = $4;
 $6 = ((($_12)) + 4|0);
 HEAP32[$6>>2] = (93);
 $7 = ((($_12)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($_12)) + 12|0);
 HEAP32[$8>>2] = (100);
 HEAP32[$_5>>2] = 2304;
 $9 = ((($_5)) + 4|0);
 HEAP32[$9>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($_5)) + 16|0);
 HEAP32[$10>>2] = $_12;
 $11 = ((($_5)) + 20|0);
 HEAP32[$11>>2] = 2;
 __THREW__ = 0;
 invoke_vii(101,($_5|0),(2320|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 __ZN4core3ptr13drop_in_place17hab0dbab777900203E($error);
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $_6$i$i$i$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_6$i$i$i$i = sp;
 $3 = (___rust_alloc(8,4,$err$i$i$i)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 } else {
  HEAP32[$3>>2] = $0;
  $5 = ((($3)) + 4|0);
  HEAP32[$5>>2] = $1;
  __ZN3std9panicking20rust_panic_with_hook17h40c378ced5747092E($3,224,$2);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17ha9c55441396e7dcdE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 HEAP8[$1>>0] = 0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$0>>2]|0;
 ___rust_dealloc($6,$4,1);
 return;
}
function __ZN3std3sys3imp7condvar7Condvar4init17h92d73bb59c7061f8E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_103 = 0, $_133 = 0, $_140 = 0, $_20 = 0, $_27 = 0, $_57 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i26 = 0, $_6$sroa$0$0$$sroa_idx$i27 = 0, $_6$sroa$0$0$$sroa_idx$i28 = 0, $_64 = 0, $_96 = 0, $attr = 0, $left_val = 0, $left_val2 = 0, $left_val5 = 0, $left_val8 = 0, $r = 0, $r1 = 0, $r4 = 0;
 var $r7 = 0, $right_val = 0, $right_val3 = 0, $right_val6 = 0, $right_val9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_140 = sp + 152|0;
 $_133 = sp + 128|0;
 $right_val9 = sp + 212|0;
 $left_val8 = sp + 208|0;
 $r7 = sp + 204|0;
 $_103 = sp + 112|0;
 $_96 = sp + 88|0;
 $right_val6 = sp + 200|0;
 $left_val5 = sp + 196|0;
 $r4 = sp + 192|0;
 $_64 = sp + 72|0;
 $_57 = sp + 48|0;
 $right_val3 = sp + 188|0;
 $left_val2 = sp + 184|0;
 $r1 = sp + 180|0;
 $_27 = sp + 32|0;
 $_20 = sp + 8|0;
 $right_val = sp + 176|0;
 $left_val = sp + 172|0;
 $r = sp + 168|0;
 $attr = sp;
 $1 = (_pthread_condattr_init(($attr|0))|0);
 HEAP32[$r>>2] = $1;
 HEAP32[$left_val>>2] = $r;
 HEAP32[$right_val>>2] = 12724;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $left_val;
  $4 = $right_val;
  HEAP32[$_27>>2] = $3;
  $5 = ((($_27)) + 4|0);
  HEAP32[$5>>2] = (92);
  $6 = ((($_27)) + 8|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($_27)) + 12|0);
  HEAP32[$7>>2] = (92);
  HEAP32[$_20>>2] = 2352;
  $8 = ((($_20)) + 4|0);
  HEAP32[$8>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_20)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $9 = ((($_20)) + 16|0);
  HEAP32[$9>>2] = $_27;
  $10 = ((($_20)) + 20|0);
  HEAP32[$10>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_20,2376);
  // unreachable;
 }
 $11 = (_pthread_condattr_setclock(($attr|0),1)|0);
 HEAP32[$r1>>2] = $11;
 HEAP32[$left_val2>>2] = $r1;
 HEAP32[$right_val3>>2] = 12724;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = $left_val2;
  $14 = $right_val3;
  HEAP32[$_64>>2] = $13;
  $15 = ((($_64)) + 4|0);
  HEAP32[$15>>2] = (92);
  $16 = ((($_64)) + 8|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($_64)) + 12|0);
  HEAP32[$17>>2] = (92);
  HEAP32[$_57>>2] = 2352;
  $18 = ((($_57)) + 4|0);
  HEAP32[$18>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i26 = ((($_57)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i26>>2] = 0;
  $19 = ((($_57)) + 16|0);
  HEAP32[$19>>2] = $_64;
  $20 = ((($_57)) + 20|0);
  HEAP32[$20>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_57,2392);
  // unreachable;
 }
 $21 = (_pthread_cond_init(($0|0),($attr|0))|0);
 HEAP32[$r4>>2] = $21;
 HEAP32[$left_val5>>2] = $r4;
 HEAP32[$right_val6>>2] = 12724;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = $left_val5;
  $24 = $right_val6;
  HEAP32[$_103>>2] = $23;
  $25 = ((($_103)) + 4|0);
  HEAP32[$25>>2] = (92);
  $26 = ((($_103)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = ((($_103)) + 12|0);
  HEAP32[$27>>2] = (92);
  HEAP32[$_96>>2] = 2352;
  $28 = ((($_96)) + 4|0);
  HEAP32[$28>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i27 = ((($_96)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i27>>2] = 0;
  $29 = ((($_96)) + 16|0);
  HEAP32[$29>>2] = $_103;
  $30 = ((($_96)) + 20|0);
  HEAP32[$30>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_96,2408);
  // unreachable;
 }
 $31 = (_pthread_condattr_destroy(($attr|0))|0);
 HEAP32[$r7>>2] = $31;
 HEAP32[$left_val8>>2] = $r7;
 HEAP32[$right_val9>>2] = 12724;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 } else {
  $33 = $left_val8;
  $34 = $right_val9;
  HEAP32[$_140>>2] = $33;
  $35 = ((($_140)) + 4|0);
  HEAP32[$35>>2] = (92);
  $36 = ((($_140)) + 8|0);
  HEAP32[$36>>2] = $34;
  $37 = ((($_140)) + 12|0);
  HEAP32[$37>>2] = (92);
  HEAP32[$_133>>2] = 2352;
  $38 = ((($_133)) + 4|0);
  HEAP32[$38>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i28 = ((($_133)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i28>>2] = 0;
  $39 = ((($_133)) + 16|0);
  HEAP32[$39>>2] = $_140;
  $40 = ((($_133)) + 20|0);
  HEAP32[$40>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_133,2424);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17h850892b3d274c2fcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (_pthread_cond_destroy(($1|0))|0);
 $2 = HEAP32[$0>>2]|0;
 ___rust_dealloc($2,48,4);
 return;
}
function __ZN4core3ptr13drop_in_place17hee7c73624b8fa3c5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (_pthread_mutex_destroy(($1|0))|0);
 $2 = HEAP32[$0>>2]|0;
 ___rust_dealloc($2,28,4);
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hd91e1b34bf067662E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h2fccaf9d4f289295E($2,$1)|0);
 return ($3|0);
}
function __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_1$sroa$4$0$$sroa_idx2$i = 0, $_1$sroa$5$0$$sroa_idx4$i = 0, $_10$i = 0, $_8$i = 0, $_9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10$i = sp + 40|0;
 $_8$i = sp + 32|0;
 $_9 = sp + 16|0;
 $s = sp;
 HEAP32[$s>>2] = 1;
 $_1$sroa$4$0$$sroa_idx2$i = ((($s)) + 4|0);
 HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2] = 0;
 $_1$sroa$5$0$$sroa_idx4$i = ((($s)) + 8|0);
 HEAP32[$_1$sroa$5$0$$sroa_idx4$i>>2] = 0;
 HEAP32[$_8$i>>2] = $s;
 ;HEAP32[$_10$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(102,($_8$i|0),(8|0),($_10$i|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZN4core3ptr13drop_in_place17h5fb21c76c2129501E($s);
  ___resumeException($4|0);
  // unreachable;
 } else {
  ;HEAP32[$_9>>2]=HEAP32[$s>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$s+8>>2]|0;
  __ZN3std9panicking11begin_panic17h67f1dccf0642b18bE($_9,$1);
  // unreachable;
 }
}
function __ZN3std9panicking11begin_panic17h67f1dccf0642b18bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_6$i$i$i$i = 0, $err$i$i$i = 0, $x$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i = sp + 32|0;
 $_6$i$i$i$i = sp + 16|0;
 $x$sroa$0$i = sp;
 ;HEAP32[$x$sroa$0$i>>2]=HEAP32[$0>>2]|0;HEAP32[$x$sroa$0$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$x$sroa$0$i+8>>2]=HEAP32[$0+8>>2]|0;
 $2 = (___rust_alloc(12,4,$err$i$i$i)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 } else {
  ;HEAP32[$2>>2]=HEAP32[$x$sroa$0$i>>2]|0;HEAP32[$2+4>>2]=HEAP32[$x$sroa$0$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$x$sroa$0$i+8>>2]|0;
  __ZN3std9panicking20rust_panic_with_hook17h40c378ced5747092E($2,32,$1);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17h5fb21c76c2129501E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i,$2,1);
 return;
}
function __ZN3std9panicking20rust_panic_with_hook17h40c378ced5747092E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre23 = 0, $$sink$in$phi$trans$insert = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_26$sroa$0$0$$sroa_idx = 0, $_26$sroa$4$0$$sroa_idx2 = 0, $_26$sroa$5$0$$sroa_idx4 = 0, $_26$sroa$6$0$$sroa_idx6 = 0;
 var $_47 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i13 = 0, $cond = 0, $cond2$i$i = 0, $info = 0, $msg = 0, $not$ = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_47 = sp + 56|0;
 $info = sp + 32|0;
 $_13 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $1;
 __THREW__ = 0;
 $13 = (invoke_i(103)|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if (!($15)) {
   $16 = ($13|0)==(0|0);
   if ($16) {
    __THREW__ = 0;
    invoke_v(104);
    $22 = __THREW__; __THREW__ = 0;
    break;
   }
   $17 = HEAP32[$13>>2]|0;
   $cond2$i$i = ($17|0)==(0);
   if ($cond2$i$i) {
    $18 = $13;
    $19 = $18;
    HEAP8[$19>>0]=1&255;HEAP8[$19+1>>0]=(1>>8)&255;HEAP8[$19+2>>0]=(1>>16)&255;HEAP8[$19+3>>0]=1>>24;
    $20 = (($18) + 4)|0;
    $21 = $20;
    HEAP8[$21>>0]=0&255;HEAP8[$21+1>>0]=(0>>8)&255;HEAP8[$21+2>>0]=(0>>16)&255;HEAP8[$21+3>>0]=0>>24;
    $$pre23 = ((($13)) + 4|0);
    HEAP8[$$pre23>>0]=1&255;HEAP8[$$pre23+1>>0]=(1>>8)&255;HEAP8[$$pre23+2>>0]=(1>>16)&255;HEAP8[$$pre23+3>>0]=1>>24;
    $46 = 1;
   } else {
    $$sink$in$phi$trans$insert = ((($13)) + 4|0);
    $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
    $phitmp = (($$pre) + 1)|0;
    HEAP8[$$sink$in$phi$trans$insert>>0]=$phitmp&255;HEAP8[$$sink$in$phi$trans$insert+1>>0]=($phitmp>>8)&255;HEAP8[$$sink$in$phi$trans$insert+2>>0]=($phitmp>>16)&255;HEAP8[$$sink$in$phi$trans$insert+3>>0]=$phitmp>>24;
    $23 = ($phitmp>>>0)>(2);
    if ($23) {
     HEAP32[$_13>>2] = 2472;
     $30 = ((($_13)) + 4|0);
     HEAP32[$30>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i = ((($_13)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
     $31 = ((($_13)) + 16|0);
     HEAP32[$31>>2] = 12908;
     $32 = ((($_13)) + 20|0);
     HEAP32[$32>>2] = 0;
     __THREW__ = 0;
     invoke_vi(105,($_13|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break;
     }
     _llvm_trap();
     // unreachable;
    } else {
     $46 = $phitmp;
    }
   }
   HEAP32[$info>>2] = $11;
   $24 = ((($info)) + 4|0);
   HEAP32[$24>>2] = $12;
   $_26$sroa$0$0$$sroa_idx = ((($info)) + 8|0);
   HEAP32[$_26$sroa$0$0$$sroa_idx>>2] = $4;
   $_26$sroa$4$0$$sroa_idx2 = ((($info)) + 12|0);
   HEAP32[$_26$sroa$4$0$$sroa_idx2>>2] = $6;
   $_26$sroa$5$0$$sroa_idx4 = ((($info)) + 16|0);
   HEAP32[$_26$sroa$5$0$$sroa_idx4>>2] = $8;
   $_26$sroa$6$0$$sroa_idx6 = ((($info)) + 20|0);
   HEAP32[$_26$sroa$6$0$$sroa_idx6>>2] = $10;
   $25 = (_pthread_rwlock_rdlock(((12728)|0))|0);
   switch ($25|0) {
   case 11:  {
    __THREW__ = 0;
    invoke_viii(95,(4786|0),36,(2440|0));
    $26 = __THREW__; __THREW__ = 0;
    break L1;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 9;
   }
   }
   do {
    if ((label|0) == 9) {
     $27 = HEAP8[(12764)>>0]|0;
     $not$ = ($27<<24>>24)==(0);
     if (!($not$)) {
      $28 = ($25|0)==(0);
      if (!($28)) {
       break;
      }
      (_pthread_rwlock_unlock(((12728)|0))|0);
      break;
     }
     $35 = HEAP32[(12760)>>2]|0;HEAP32[(12760)>>2] = (($35+1)|0);
     $36 = HEAP32[3192]|0;
     $cond = ($36|0)==(0);
     if ($cond) {
      __THREW__ = 0;
      invoke_vi(106,($info|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break L1;
      }
     } else {
      $39 = HEAP32[(12772)>>2]|0;
      $40 = HEAP32[(12776)>>2]|0;
      $41 = ((($40)) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_vii($42|0,($39|0),($info|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L1;
      }
     }
     $45 = HEAP32[(12760)>>2]|0;HEAP32[(12760)>>2] = (($45-1)|0);
     (_pthread_rwlock_unlock(((12728)|0))|0);
     $47 = ($46>>>0)>(1);
     if (!($47)) {
      _rust_panic($0,$1);
      // unreachable;
     }
     HEAP32[$_47>>2] = 2480;
     $48 = ((($_47)) + 4|0);
     HEAP32[$48>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i13 = ((($_47)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i13>>2] = 0;
     $49 = ((($_47)) + 16|0);
     HEAP32[$49>>2] = 12908;
     $50 = ((($_47)) + 20|0);
     HEAP32[$50>>2] = 0;
     __THREW__ = 0;
     invoke_vi(105,($_47|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break L1;
     }
     _llvm_trap();
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(95,(4822|0),41,(2456|0));
   $29 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $53 = ___cxa_find_matching_catch_2()|0;
 $54 = tempRet0;
 __ZN4core3ptr13drop_in_place17h6356e46d3794a700E($msg);
 ___resumeException($53|0);
 // unreachable;
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i4$i = 0, $_6$i$i$i$i = 0;
 var $cond$i$i$i = 0, $cond$i$i2$i = 0, $err$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_6$i$i$i$i = sp;
 $0 = HEAP32[736]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2944)|0);
  $_0$0$i$i$i = $1;
 } else {
  $_0$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $15 = $$$i;
  STACKTOP = sp;return ($15|0);
 }
 $6 = (___rust_alloc(12,4,$err$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = 2944;
 $8 = ((($6)) + 4|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[736]|0;
 $cond$i$i2$i = ($13|0)==(0);
 if ($cond$i$i2$i) {
  $14 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2944)|0);
  $_0$0$i$i4$i = $14;
 } else {
  $_0$0$i$i4$i = $13;
 }
 (_pthread_setspecific(($_0$0$i$i4$i|0),($6|0))|0);
 $15 = $8;
 STACKTOP = sp;return ($15|0);
}
function __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_12 = sp + 32|0;
 $_5 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 6268;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 57;
 $1 = $msg;
 $2 = $error;
 HEAP32[$_12>>2] = $1;
 $3 = ((($_12)) + 4|0);
 HEAP32[$3>>2] = (93);
 $4 = ((($_12)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_12)) + 12|0);
 HEAP32[$5>>2] = (107);
 HEAP32[$_5>>2] = 2304;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $7 = ((($_5)) + 16|0);
 HEAP32[$7>>2] = $_12;
 $8 = ((($_5)) + 20|0);
 HEAP32[$8>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,2320);
 // unreachable;
}
function __ZN3std10sys_common4util10dumb_print17h13e1706209dc3034E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$14$4$$sroa_idx24 = 0, $_3$sroa$14$4$copyload = 0;
 var $_3$sroa$5$4$copyload = 0, $_3$sroa$9$4$$sroa_idx19 = 0, $_3$sroa$9$4$copyload = 0, $_3$sroa$9$sroa$0$0$extract$trunc = 0, $_5$i$i = 0, $_8$i = 0, $cond$i$i = 0, $or$cond = 0, $stderr$i$i = 0, $switch$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $stderr$i$i = sp + 40|0;
 $_5$i$i = sp + 16|0;
 $_8$i = sp;
 ;HEAP32[$_5$i$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_5$i$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_5$i$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_5$i$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_5$i$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_5$i$i+20>>2]=HEAP32[$0+20>>2]|0;
 __ZN3std2io5Write9write_fmt17h7174bf30b986bf79E($_8$i,$stderr$i$i,$_5$i$i);
 $_3$sroa$5$4$copyload = HEAP32[$_8$i>>2]|0;
 $_3$sroa$9$4$$sroa_idx19 = ((($_8$i)) + 4|0);
 $_3$sroa$9$4$copyload = HEAP32[$_3$sroa$9$4$$sroa_idx19>>2]|0;
 $_3$sroa$9$sroa$0$0$extract$trunc = $_3$sroa$9$4$copyload&255;
 $_3$sroa$14$4$$sroa_idx24 = ((($_8$i)) + 8|0);
 $_3$sroa$14$4$copyload = HEAP32[$_3$sroa$14$4$$sroa_idx24>>2]|0;
 $cond$i$i = ($_3$sroa$5$4$copyload|0)==(0);
 $switch$i4 = ($_3$sroa$9$sroa$0$0$extract$trunc&255)<(2);
 $or$cond = $cond$i$i | $switch$i4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $1 = ((($_3$sroa$14$4$copyload)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($_3$sroa$14$4$copyload)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($2|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$3>>2]|0;
  __ZN5alloc4heap8box_free17he7aff06e65e4596eE($17,$18);
  __ZN5alloc4heap8box_free17h53b02e8f65dea423E($_3$sroa$14$4$copyload);
  ___resumeException($15|0);
  // unreachable;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($8)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  ___rust_dealloc($12,$10,$14);
 }
 ___rust_dealloc($_3$sroa$14$4$copyload,12,4);
 STACKTOP = sp;return;
}
function __ZN3std9panicking12default_hook17hf7e2d6bbe02d6d77E($0) {
 $0 = $0|0;
 var $$ = 0, $$cast = 0, $$fca$1$gep = 0, $$pre = 0, $$pre144 = 0, $$sink = 0, $$sink$i = 0, $$sink$sink = 0, $$sink12 = 0, $$sink142$in$phi$trans$insert = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i = 0, $_0$0$i$i86 = 0;
 var $_10$i = 0, $_25$0$i = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, $_33$sroa$0$0 = 0, $_33$sroa$6$0 = 0, $_49 = 0, $_5$i = 0, $_51$0$$sroa_idx = 0, $_73$0$off0 = 0, $_73$1 = 0, $_73$2$off0129 = 0, $col = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i92 = 0, $cond2$i$i$i = 0, $err = 0, $extract$t = 0, $file = 0, $lhsc = 0;
 var $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0, $personalityslot$sroa$0$3130 = 0, $personalityslot$sroa$12$0 = 0, $personalityslot$sroa$12$2 = 0, $personalityslot$sroa$12$3131 = 0, $s = 0, $self$i$i$sroa$0$0$copyload = 0, $self$i$i$sroa$4$0$$sroa_idx111 = 0, $stderr = 0, $storemerge = 0, $thread = 0, $val$0$i$ph = 0, $val$0$i125141 = 0, $write = 0;
 var $x$i$sroa$6$0$$sroa_idx114 = 0, $x$i$sroa$6$0$copyload = 0, $x$i$sroa$7$0$$sroa_idx116 = 0, $x$i$sroa$7$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_5$i = sp + 112|0;
 $_10$i = sp + 96|0;
 $s = sp + 88|0;
 $stderr = sp + 80|0;
 $_49 = sp + 64|0;
 $write = sp + 40|0;
 $name = sp + 32|0;
 $thread = sp + 24|0;
 $err = sp + 16|0;
 $msg = sp + 8|0;
 $col = sp + 128|0;
 $line = sp + 124|0;
 $file = sp;
 $log_backtrace = sp + 132|0;
 $1 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
  // unreachable;
 }
 $3 = HEAP32[$1>>2]|0;
 $cond2$i$i$i = ($3|0)==(0);
 if ($cond2$i$i$i) {
  $4 = $1;
  $5 = $4;
  HEAP8[$5>>0]=1&255;HEAP8[$5+1>>0]=(1>>8)&255;HEAP8[$5+2>>0]=(1>>16)&255;HEAP8[$5+3>>0]=1>>24;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
  $$pre144 = ((($1)) + 4|0);
  HEAP8[$$pre144>>0]=0&255;HEAP8[$$pre144+1>>0]=(0>>8)&255;HEAP8[$$pre144+2>>0]=(0>>16)&255;HEAP8[$$pre144+3>>0]=0>>24;
  label = 6;
 } else {
  $$sink142$in$phi$trans$insert = ((($1)) + 4|0);
  $$pre = HEAP32[$$sink142$in$phi$trans$insert>>2]|0;
  $8 = ($$pre>>>0)>(1);
  if ($8) {
   $storemerge = 2;
  } else {
   label = 6;
  }
 }
 L7: do {
  if ((label|0) == 6) {
   $9 = HEAP32[3195]|0;
   switch ($9|0) {
   case 1:  {
    $storemerge = 0;
    break L7;
    break;
   }
   case 0:  {
    __ZN3std3env7_var_os17hc17d294ff5049f9cE($_10$i,4960,14);
    $10 = HEAP32[$_10$i>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $val$0$i125141 = 0;
    } else {
     $x$i$sroa$6$0$$sroa_idx114 = ((($_10$i)) + 4|0);
     $x$i$sroa$6$0$copyload = HEAP32[$x$i$sroa$6$0$$sroa_idx114>>2]|0;
     $x$i$sroa$7$0$$sroa_idx116 = ((($_10$i)) + 8|0);
     $x$i$sroa$7$0$copyload = HEAP32[$x$i$sroa$7$0$$sroa_idx116>>2]|0;
     L14: do {
      switch ($x$i$sroa$7$0$copyload|0) {
      case 1:  {
       $12 = ($10|0)==(5014|0);
       if ($12) {
        $val$0$i$ph = 0;
       } else {
        $lhsc = HEAP8[$10>>0]|0;
        $13 = ($lhsc<<24>>24)==(48);
        $$ = $13 ? 0 : 3;
        $val$0$i$ph = $$;
       }
       break;
      }
      case 4:  {
       $14 = ($10|0)==(5015|0);
       if (!($14)) {
        $15 = (_memcmp($10,5015,4)|0);
        $16 = ($15|0)==(0);
        if (!($16)) {
         $val$0$i$ph = 3;
         break L14;
        }
       }
       $val$0$i$ph = 2;
       break;
      }
      default: {
       $val$0$i$ph = 3;
      }
      }
     } while(0);
     $17 = ($x$i$sroa$6$0$copyload|0)==(0);
     if ($17) {
      $val$0$i125141 = $val$0$i$ph;
     } else {
      ___rust_dealloc($10,$x$i$sroa$6$0$copyload,1);
      $val$0$i125141 = $val$0$i$ph;
     }
    }
    $18 = ($val$0$i125141<<24>>24)==(0);
    $19 = $val$0$i125141&255;
    $_25$0$i = $18 ? 1 : $19;
    HEAP32[3195] = $_25$0$i;
    $storemerge = $val$0$i125141;
    break L7;
    break;
   }
   case 2:  {
    $storemerge = 2;
    break L7;
    break;
   }
   case 3:  {
    $storemerge = 3;
    break L7;
    break;
   }
   default: {
    __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(4974,40,2512);
    // unreachable;
   }
   }
  }
 } while(0);
 HEAP8[$log_backtrace>>0] = $storemerge;
 $20 = ((($0)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$file>>2] = $21;
 $24 = ((($file)) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($0)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$line>>2] = $26;
 $27 = ((($0)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$col>>2] = $28;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 127]($29)|0);
 $35 = tempRet0;
 $36 = ($34|0)==(-563829082);
 $37 = ($35|0)==(-296224341);
 $38 = $36 & $37;
 $_0$0$i$i86 = $38 ? $29 : 0;
 if ($38) {
  $44 = HEAP32[$_0$0$i$i86>>2]|0;
  $45 = ((($_0$0$i$i86)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$msg>>2] = $44;
  $$sink$sink = $46;
 } else {
  $39 = (FUNCTION_TABLE_ii[$33 & 127]($29)|0);
  $40 = tempRet0;
  $41 = ($39|0)==(1957608458);
  $42 = ($40|0)==(1366732518);
  $43 = $41 & $42;
  if ($43) {
   $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$29>>2]|0;
   $47 = ((($29)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $$sink = $48;$$sink12 = $_3$sroa$0$0$copyload2$i$i$i;
  } else {
   $$sink = 8;$$sink12 = 5019;
  }
  HEAP32[$msg>>2] = $$sink12;
  $$sink$sink = $$sink;
 }
 $49 = ((($msg)) + 4|0);
 HEAP32[$49>>2] = $$sink$sink;
 HEAP8[$err>>0] = 1;
 $50 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e5681632d507562E()|0);
 HEAP32[$thread>>2] = $50;
 $51 = ($50|0)==(0);
 $52 = $50;
 if ($51) {
  $_33$sroa$0$0 = 0;$_33$sroa$6$0 = 0;
  label = 31;
 } else {
  $53 = ((($52)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $_33$sroa$0$0 = 0;$_33$sroa$6$0 = 0;
   label = 31;
  } else {
   $56 = ((($52)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + -1)|0;
   $59 = ($57|0)==(0);
   if ($59) {
    __THREW__ = 0;
    invoke_vii(108,($58|0),0);
    $60 = __THREW__; __THREW__ = 0;
   } else {
    $_33$sroa$0$0 = $54;$_33$sroa$6$0 = $58;
    label = 31;
   }
  }
 }
 do {
  if ((label|0) == 31) {
   $63 = ($_33$sroa$0$0|0)!=(0|0);
   $$sink3$i = $63 ? $_33$sroa$0$0 : 5027;
   $$sink$i = $63 ? $_33$sroa$6$0 : 9;
   HEAP32[$name>>2] = $$sink3$i;
   $$fca$1$gep = ((($name)) + 4|0);
   HEAP32[$$fca$1$gep>>2] = $$sink$i;
   HEAP32[$write>>2] = $name;
   $64 = ((($write)) + 4|0);
   HEAP32[$64>>2] = $msg;
   $65 = ((($write)) + 8|0);
   HEAP32[$65>>2] = $file;
   $66 = ((($write)) + 12|0);
   HEAP32[$66>>2] = $line;
   $67 = ((($write)) + 16|0);
   HEAP32[$67>>2] = $col;
   $68 = ((($write)) + 20|0);
   HEAP32[$68>>2] = $log_backtrace;
   __THREW__ = 0;
   invoke_vi(109,($_5$i|0));
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if (!($70)) {
    $self$i$i$sroa$0$0$copyload = HEAP32[$_5$i>>2]|0;
    $cond$i$i = ($self$i$i$sroa$0$0$copyload|0)==(0);
    if (!($cond$i$i)) {
     __THREW__ = 0;
     invoke_v(104);
     $71 = __THREW__; __THREW__ = 0;
     break;
    }
    $self$i$i$sroa$4$0$$sroa_idx111 = ((($_5$i)) + 4|0);
    $72 = $self$i$i$sroa$4$0$$sroa_idx111;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($72) + 4)|0;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP8[$err>>0]|0;
    $cond$i = ($78<<24>>24)==(0);
    $79 = ((($err)) + 1|0);
    $_0$0$i = $cond$i ? 0 : $79;
    $80 = $_49;
    $81 = $80;
    HEAP32[$81>>2] = $74;
    $82 = (($80) + 4)|0;
    $83 = $82;
    HEAP32[$83>>2] = $77;
    $_51$0$$sroa_idx = ((($_49)) + 8|0);
    HEAP32[$_51$0$$sroa_idx>>2] = $_0$0$i;
    $84 = ($74|0)==(0);
    L44: do {
     if ($84) {
      if ($cond$i) {
       $_73$1 = 1;
       label = 49;
      } else {
       __THREW__ = 0;
       invoke_viii(110,($write|0),($_51$0$$sroa_idx|0),(48|0));
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        $126 = ___cxa_find_matching_catch_2()|0;
        $127 = tempRet0;
        $_73$2$off0129 = 1;$personalityslot$sroa$0$3130 = $126;$personalityslot$sroa$12$3131 = $127;
        label = 36;
       } else {
        $_73$1 = 1;
        label = 49;
       }
      }
     } else {
      $87 = $77;
      HEAP32[$stderr>>2] = $74;
      $88 = ((($stderr)) + 4|0);
      HEAP32[$88>>2] = $87;
      $$cast = $74;
      $89 = $77;
      __THREW__ = 0;
      invoke_viii(110,($write|0),($$cast|0),($89|0));
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $124 = ___cxa_find_matching_catch_2()|0;
       $125 = tempRet0;
       __ZN4core3ptr13drop_in_place17h94058cbd70f31d0cE($stderr);
       $_73$2$off0129 = 0;$personalityslot$sroa$0$3130 = $124;$personalityslot$sroa$12$3131 = $125;
       label = 36;
       break;
      }
      HEAP32[$s>>2] = $74;
      $94 = ((($s)) + 4|0);
      HEAP32[$94>>2] = $77;
      $95 = $s;
      __THREW__ = 0;
      $96 = (invoke_ii(111,($95|0))|0);
      $97 = __THREW__; __THREW__ = 0;
      $98 = $97&1;
      do {
       if (!($98)) {
        $cond$i$i92 = ($96<<24>>24)==(0);
        if (!($cond$i$i92)) {
         __THREW__ = 0;
         invoke_v(104);
         $99 = __THREW__; __THREW__ = 0;
         break;
        }
        $100 = HEAP32[$s>>2]|0;
        $101 = ($100|0)==(0|0);
        if (!($101)) {
         $102 = HEAP32[$94>>2]|0;
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         invoke_vi($103|0,($100|0));
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          $113 = ___cxa_find_matching_catch_2()|0;
          $114 = tempRet0;
          $115 = HEAP32[$s>>2]|0;
          $116 = HEAP32[$94>>2]|0;
          __ZN5alloc4heap8box_free17ha0354743f27ea686E($115,$116);
          $_73$2$off0129 = 0;$personalityslot$sroa$0$3130 = $113;$personalityslot$sroa$12$3131 = $114;
          label = 36;
          break L44;
         }
         $106 = HEAP32[$94>>2]|0;
         $107 = ((($106)) + 4|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($108|0)==(0);
         if (!($109)) {
          $110 = HEAP32[$s>>2]|0;
          $111 = ((($106)) + 8|0);
          $112 = HEAP32[$111>>2]|0;
          ___rust_dealloc($110,$108,$112);
         }
        }
        $_73$1 = 0;
        label = 49;
        break L44;
       }
      } while(0);
      $144 = ___cxa_find_matching_catch_2()|0;
      $145 = tempRet0;
      __ZN4core3ptr13drop_in_place17h9d1780c1d7d5f498E($s);
      $_73$2$off0129 = 0;$personalityslot$sroa$0$3130 = $144;$personalityslot$sroa$12$3131 = $145;
      label = 36;
     }
    } while(0);
    do {
     if ((label|0) == 36) {
      __ZN4core3ptr13drop_in_place17h3960634c37b68044E($thread);
      $_73$0$off0 = $_73$2$off0129;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3130;$personalityslot$sroa$12$2 = $personalityslot$sroa$12$3131;
     }
     else if ((label|0) == 49) {
      if (!($51)) {
       $117 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($117-1)|0);
       $118 = ($117|0)==(1);
       if ($118) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(90,($thread|0));
        $119 = __THREW__; __THREW__ = 0;
        $120 = $119&1;
        if ($120) {
         $146 = ___cxa_find_matching_catch_2()|0;
         $147 = tempRet0;
         $extract$t = ($_73$1<<24>>24)!=(0);
         $_73$0$off0 = $extract$t;$personalityslot$sroa$0$2 = $146;$personalityslot$sroa$12$2 = $147;
         break;
        }
       }
      }
      $121 = HEAP32[$_49>>2]|0;
      $122 = ($121|0)==(0|0);
      $123 = ($_73$1<<24>>24)==(0);
      $or$cond = $123 | $122;
      if ($or$cond) {
       STACKTOP = sp;return;
      }
      $128 = ((($_49)) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = HEAP32[$129>>2]|0;
      __THREW__ = 0;
      invoke_vi($130|0,($121|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       $140 = ___cxa_find_matching_catch_2()|0;
       $141 = tempRet0;
       $142 = HEAP32[$_49>>2]|0;
       $143 = HEAP32[$128>>2]|0;
       __ZN5alloc4heap8box_free17ha0354743f27ea686E($142,$143);
       ___resumeException($140|0);
       // unreachable;
      }
      $133 = HEAP32[$128>>2]|0;
      $134 = ((($133)) + 4|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($135|0)==(0);
      if ($136) {
       STACKTOP = sp;return;
      }
      $137 = HEAP32[$_49>>2]|0;
      $138 = ((($133)) + 8|0);
      $139 = HEAP32[$138>>2]|0;
      ___rust_dealloc($137,$135,$139);
      STACKTOP = sp;return;
     }
    } while(0);
    $85 = HEAP32[$_49>>2]|0;
    $86 = ($85|0)==(0|0);
    if ($86) {
     __ZN4core3ptr13drop_in_place17h9d1780c1d7d5f498E($_49);
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    if (!($_73$0$off0)) {
     $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    __ZN4core3ptr13drop_in_place17h94058cbd70f31d0cE($_49);
    $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$12$0 = $personalityslot$sroa$12$2;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch_2()|0;
 $62 = tempRet0;
 __ZN4core3ptr13drop_in_place17h3960634c37b68044E($thread);
 $personalityslot$sroa$0$0 = $61;$personalityslot$sroa$12$0 = $62;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$sroa$3$0$$sroa_idx1 = 0, $_10$sroa$4$0$$sroa_idx2 = 0, $_10$sroa$54$0$$sroa_idx5 = 0, $_10$sroa$6$0$$sroa_idx6 = 0, $_11$i = 0, $_17 = 0, $_4$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $args$i = 0, $code = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_11$i = sp + 56|0;
 $_4$i = sp + 32|0;
 $args$i = sp + 8|0;
 $_17 = sp;
 $code = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $4 = (___rust_start_panic($2,$3)|0);
 HEAP32[$code>>2] = $4;
 $5 = $code;
 HEAP32[$_17>>2] = $5;
 $6 = ((($_17)) + 4|0);
 HEAP32[$6>>2] = (112);
 HEAP32[$args$i>>2] = 2488;
 $_10$sroa$3$0$$sroa_idx1 = ((($args$i)) + 4|0);
 HEAP32[$_10$sroa$3$0$$sroa_idx1>>2] = 1;
 $_10$sroa$4$0$$sroa_idx2 = ((($args$i)) + 8|0);
 HEAP32[$_10$sroa$4$0$$sroa_idx2>>2] = 0;
 $_10$sroa$54$0$$sroa_idx5 = ((($args$i)) + 16|0);
 HEAP32[$_10$sroa$54$0$$sroa_idx5>>2] = $_17;
 $_10$sroa$6$0$$sroa_idx6 = ((($args$i)) + 20|0);
 HEAP32[$_10$sroa$6$0$$sroa_idx6>>2] = 1;
 $7 = $args$i;
 HEAP32[$_11$i>>2] = $7;
 $8 = ((($_11$i)) + 4|0);
 HEAP32[$8>>2] = (113);
 HEAP32[$_4$i>>2] = 2496;
 $9 = ((($_4$i)) + 4|0);
 HEAP32[$9>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i$i = ((($_4$i)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
 $10 = ((($_4$i)) + 16|0);
 HEAP32[$10>>2] = $_11$i;
 $11 = ((($_4$i)) + 20|0);
 HEAP32[$11>>2] = 1;
 __ZN3std10sys_common4util10dumb_print17h13e1706209dc3034E($_4$i);
 _abort();
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h6356e46d3794a700E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17h9e51f905cf5cb162E($16,$17);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 ___rust_dealloc($11,$9,$13);
 return;
}
function __ZN5alloc4heap8box_free17h9e51f905cf5cb162E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN3std3env7_var_os17hc17d294ff5049f9cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $_11$i = 0, $_11$i$sroa_raw_idx = 0, $_12$i = 0, $_13$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i49$i = 0, $_38$i$i$i$i$i$i = 0, $_4$i = 0, $_6$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $cond$i = 0, $e$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $err$i$i$i$i$i$i$i = 0, $k$i = 0, $key = 0;
 var $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$8$0$i = 0, $phitmp = 0, $ptr$0$i$i$i$i$i$i = 0, $ret$sroa$0$0$i = 0, $self$i$sroa$3 = 0, $self$i$sroa$3$4$sroa_idx30 = 0, $self$i$sroa$3$4$sroa_idx3034 = 0, $val$sroa$0$0$$sroa_idx9$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_13$i = sp + 160|0;
 $_6$i = sp + 136|0;
 $e$i = sp + 128|0;
 $self$i$sroa$3 = sp + 112|0;
 $err$i$i$i$i$i$i$i = sp + 96|0;
 $_38$i$i$i$i$i$i = sp + 80|0;
 $vector$i$i$i = sp + 64|0;
 $_12$i = sp + 48|0;
 $_11$i = sp + 40|0;
 $_4$i = sp + 16|0;
 $k$i = sp + 8|0;
 $key = sp;
 HEAP32[$key>>2] = $1;
 $3 = ((($key)) + 4|0);
 HEAP32[$3>>2] = $2;
 __ZN3std3ffi5c_str7CString3new17h282a25fff99126d3E($_4$i,$1,$2);
 $4 = HEAP32[$_4$i>>2]|0;
 $cond$i = ($4|0)==(0);
 if (!($cond$i)) {
  $5 = ((($_4$i)) + 4|0);
  ;HEAP32[$_12$i>>2]=HEAP32[$5>>2]|0;HEAP32[$_12$i+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$_12$i+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$_12$i+12>>2]=HEAP32[$5+12>>2]|0;
  __THREW__ = 0;
  invoke_vii(114,($_11$i|0),($_12$i|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   $53 = HEAP32[$_11$i>>2]|0;
   $_11$i$sroa_raw_idx = ((($_11$i)) + 4|0);
   $54 = HEAP32[$_11$i$sroa_raw_idx>>2]|0;
   HEAP32[$self$i$sroa$3>>2] = $53;
   $self$i$sroa$3$4$sroa_idx30 = ((($self$i$sroa$3)) + 4|0);
   $55 = $self$i$sroa$3$4$sroa_idx30;
   $56 = $55;
   HEAP32[$56>>2] = $54;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = 0;
   $59 = $self$i$sroa$3;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 4)|0;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = $e$i;
   $66 = $65;
   HEAP32[$66>>2] = $61;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = $64;
   $69 = $key;
   $70 = $e$i;
   HEAP32[$_13$i>>2] = $69;
   $71 = ((($_13$i)) + 4|0);
   HEAP32[$71>>2] = (116);
   $72 = ((($_13$i)) + 8|0);
   HEAP32[$72>>2] = $70;
   $73 = ((($_13$i)) + 12|0);
   HEAP32[$73>>2] = (117);
   HEAP32[$_6$i>>2] = 2848;
   $74 = ((($_6$i)) + 4|0);
   HEAP32[$74>>2] = 2;
   $_6$sroa$0$0$$sroa_idx$i$i = ((($_6$i)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
   $75 = ((($_6$i)) + 16|0);
   HEAP32[$75>>2] = $_13$i;
   $76 = ((($_6$i)) + 20|0);
   HEAP32[$76>>2] = 2;
   __THREW__ = 0;
   invoke_vii(118,($_6$i|0),(2864|0));
   $77 = __THREW__; __THREW__ = 0;
   $78 = ___cxa_find_matching_catch_2()|0;
   $79 = tempRet0;
   __ZN4core3ptr13drop_in_place17h4b4a2214e68b54beE($e$i);
   ___resumeException($78|0);
   // unreachable;
  }
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  $personalityslot$sroa$0$0$i = $49;$personalityslot$sroa$8$0$i = $50;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 $val$sroa$0$0$$sroa_idx9$i = ((($_4$i)) + 4|0);
 $8 = $val$sroa$0$0$$sroa_idx9$i;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $k$i;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = $10;
 $19 = $10;
 (_pthread_mutex_lock(((12812)|0))|0);
 $20 = ((($k$i)) + 4|0);
 $21 = (_getenv(($18|0))|0);
 $22 = ($21|0)==(0|0);
 L8: do {
  if ($22) {
   $82 = 0;$85 = 0;$ret$sroa$0$0$i = 0;
  } else {
   $23 = (_strlen($21)|0);
   $24 = ($23|0)==(-1);
   do {
    if ($24) {
     __THREW__ = 0;
     invoke_vii(108,-1,0);
     $25 = __THREW__; __THREW__ = 0;
     label = 19;
    } else {
     $26 = ($23|0)<(0);
     if ($26) {
      __THREW__ = 0;
      invoke_vi(91,(2824|0));
      $27 = __THREW__; __THREW__ = 0;
      label = 19;
      break;
     }
     $28 = ($23|0)==(0);
     if ($28) {
      $ptr$0$i$i$i$i$i$i = (1);
     } else {
      $29 = (___rust_alloc($23,1,$err$i$i$i$i$i$i$i)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_38$i$i$i$i$i$i);
       // unreachable;
      } else {
       $ptr$0$i$i$i$i$i$i = $29;
      }
     }
     $31 = $ptr$0$i$i$i$i$i$i;
     HEAP32[$vector$i$i$i>>2] = $31;
     $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
     HEAP32[$$sroa_idx$i$i$i$i>>2] = $23;
     $32 = ((($vector$i$i$i)) + 8|0);
     HEAP32[$32>>2] = 0;
     __THREW__ = 0;
     invoke_vii(115,($vector$i$i$i|0),($23|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch_2()|0;
      $36 = tempRet0;
      __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($vector$i$i$i);
      $eh$lpad$body$i$index2Z2D = $36;$eh$lpad$body$i$indexZ2D = $35;
      break;
     } else {
      $37 = HEAP32[$32>>2]|0;
      $38 = (($37) + ($23))|0;
      HEAP32[$32>>2] = $38;
      $_3$sroa$0$0$copyload2$i$i$i$i$i$i49$i = HEAP32[$vector$i$i$i>>2]|0;
      $39 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i49$i) + ($37)|0);
      _memcpy(($39|0),($21|0),($23|0))|0;
      $40 = $$sroa_idx$i$i$i$i;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $phitmp = $_3$sroa$0$0$copyload2$i$i$i$i$i$i49$i;
      $82 = $42;$85 = $45;$ret$sroa$0$0$i = $phitmp;
      break L8;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $51 = ___cxa_find_matching_catch_2()|0;
    $52 = tempRet0;
    $eh$lpad$body$i$index2Z2D = $52;$eh$lpad$body$i$indexZ2D = $51;
   }
   __ZN4core3ptr13drop_in_place17hd800b7b6df6ea60aE($k$i);
   $personalityslot$sroa$0$0$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$8$0$i = $eh$lpad$body$i$index2Z2D;
   ___resumeException($personalityslot$sroa$0$0$i|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_unlock(((12812)|0))|0);
 HEAP8[$19>>0] = 0;
 $46 = HEAP32[$20>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  HEAP32[$self$i$sroa$3>>2] = $ret$sroa$0$0$i;
  $self$i$sroa$3$4$sroa_idx3034 = ((($self$i$sroa$3)) + 4|0);
  $80 = $self$i$sroa$3$4$sroa_idx3034;
  $81 = $80;
  HEAP32[$81>>2] = $82;
  $83 = (($80) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $85;
  ;HEAP32[$0>>2]=HEAP32[$self$i$sroa$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$self$i$sroa$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$self$i$sroa$3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$k$i>>2]|0;
 ___rust_dealloc($48,$46,1);
 HEAP32[$self$i$sroa$3>>2] = $ret$sroa$0$0$i;
 $self$i$sroa$3$4$sroa_idx3034 = ((($self$i$sroa$3)) + 4|0);
 $80 = $self$i$sroa$3$4$sroa_idx3034;
 $81 = $80;
 HEAP32[$81>>2] = $82;
 $83 = (($80) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = $85;
 ;HEAP32[$0>>2]=HEAP32[$self$i$sroa$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$self$i$sroa$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$self$i$sroa$3+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17hda5d391745816277E($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_12$sroa$4$0$$sroa_idx$i = 0, $_22$0$in30 = 0, $cond2 = 0, $phitmp = 0, $t1$i$i$i$i$i$sroa$5$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h9572bbcf010a0942E(2528)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = 1;
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $cond2 = ($3|0)==(0);
 if ($cond2) {
  $t1$i$i$i$i$i$sroa$5$0$$sroa_idx = ((($1)) + 8|0);
  HEAP8[$1>>0]=1&255;HEAP8[$1+1>>0]=(1>>8)&255;HEAP8[$1+2>>0]=(1>>16)&255;HEAP8[$1+3>>0]=1>>24;
  $_12$sroa$4$0$$sroa_idx$i = ((($1)) + 4|0);
  HEAP8[$_12$sroa$4$0$$sroa_idx$i>>0]=0&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+1>>0]=(0>>8)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+2>>0]=(0>>16)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+3>>0]=0>>24;
  $4 = $t1$i$i$i$i$i$sroa$5$0$$sroa_idx;
  $5 = $4;
  HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP8[$7>>0]=0&255;HEAP8[$7+1>>0]=(0>>8)&255;HEAP8[$7+2>>0]=(0>>16)&255;HEAP8[$7+3>>0]=0>>24;
  $_22$0$in30 = $_12$sroa$4$0$$sroa_idx$i;
 } else {
  $8 = ((($1)) + 4|0);
  $$pre = HEAP32[$8>>2]|0;
  $phitmp = ($$pre|0)==(0);
  if ($phitmp) {
   $_22$0$in30 = $8;
  } else {
   __ZN4core6result13unwrap_failed17h0f6cc8b8f2677502E();
   // unreachable;
  }
 }
 $9 = ((($1)) + 8|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8)|(HEAPU8[$11+2>>0]<<16)|(HEAPU8[$11+3>>0]<<24);
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8)|(HEAPU8[$14+2>>0]<<16)|(HEAPU8[$14+3>>0]<<24);
 HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
 HEAP8[$_22$0$in30>>0]=0&255;HEAP8[$_22$0$in30+1>>0]=(0>>8)&255;HEAP8[$_22$0$in30+2>>0]=(0>>16)&255;HEAP8[$_22$0$in30+3>>0]=0>>24;
 HEAP32[$0>>2] = 0;
 $16 = ((($0)) + 4|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $12;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 return;
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h69c497245dc56dacE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$$i$i$i$i$i$i = 0, $$$i$i$i$i$i$i = 0, $$add$i$i$i$i$i$i = 0, $$add3215$i$i$i$i$i$i = 0, $$add3216$i$i$i$i$i$i = 0, $$add3217$i$i$i$i$i$i = 0, $$cast$i$i$i$i$i$i$i$i$i = 0, $$idx$i$i$i = 0, $$idx$i$i$i$i$i$i = 0, $$idx3210$i$i$i$i$i$i = 0, $$idx3211$i$i$i$i$i$i = 0, $$idx3212$i$i$i$i$i$i = 0, $$idx3213$i$i$i$i$i$i = 0, $$lcssa969$i$i$i$i$i = 0, $$off$i$i$i$i$i$i$i = 0, $$off$i$i$i$i$i$i$i$i$i$i$i = 0, $$off$i960$i$i$i$i$i$i = 0, $$off1$i$i$i$i$i$i$i$i$i$i$i = 0, $$off2$i$i$i$i$i$i$i$i$i$i$i = 0, $$phi$trans$insert$i$i$i$i$i$i = 0;
 var $$phi$trans$insert3164$i$i$i$i$i$i = 0, $$phi$trans$insert3166$i$i$i$i$i$i = 0, $$phi$trans$insert3168$i$i$i$i$i$i = 0, $$phi$trans$insert3170$i$i$i$i$i$i = 0, $$phi$trans$insert3172$i$i$i$i$i$i = 0, $$phi$trans$insert3174$i$i$i$i$i$i = 0, $$phi$trans$insert3176$i$i$i$i$i$i = 0, $$phi$trans$insert3178$i$i$i$i$i$i = 0, $$phi$trans$insert3180$i$i$i$i$i$i = 0, $$phi$trans$insert3182$i$i$i$i$i$i = 0, $$phi$trans$insert3184$i$i$i$i$i$i = 0, $$phi$trans$insert3186$i$i$i$i$i$i = 0, $$phi$trans$insert3188$i$i$i$i$i$i = 0, $$phi$trans$insert3190$i$i$i$i$i$i = 0, $$phi$trans$insert3192$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i1136$i$i$i$i$i$i = 0, $$pre$i$i$i1165$i$i$i$i$i$i = 0, $$pre$i$i$i1194$i$i$i$i$i$i = 0;
 var $$pre$i$i$i1223$i$i$i$i$i$i = 0, $$pre$i$i$i1252$i$i$i$i$i$i = 0, $$pre$i$i$i1281$i$i$i$i$i$i = 0, $$pre$i$i$i1310$i$i$i$i$i$i = 0, $$pre$i$i$i1339$i$i$i$i$i$i = 0, $$pre$i$i$i1368$i$i$i$i$i$i = 0, $$pre$i$i$i1397$i$i$i$i$i$i = 0, $$pre$i$i$i1426$i$i$i$i$i$i = 0, $$pre$i$i$i1455$i$i$i$i$i$i = 0, $$pre$i$i$i1484$i$i$i$i$i$i = 0, $$pre$i$i$i1513$i$i$i$i$i$i = 0, $$pre$i$i$i1542$i$i$i$i$i$i = 0, $$pre$i$i$i1571$i$i$i$i$i$i = 0, $$pre$i$i$i1600$i$i$i$i$i$i = 0, $$pre$i$i$i1622$i$i$i$i$i$i = 0, $$pre$i$i$i1665$i$i$i$i$i$i = 0, $$pre$i$i$i895$i$i$i$i$i$i = 0, $$pre$i$i$i978$i$i$i$i$i$i = 0, $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i$i$i$i825$i$i$i$i$i$iZ2D = 0;
 var $$pre$phi$i$ph$i$i1075$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1344$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1373$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1402$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1431$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1460$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1489$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1518$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1547$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1576$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1605$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1627$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i1670$i$i$i$i$i$iZ2D = 0, $$pre$phi$i$ph$i$i2013$i$i$i$i$i$iZ2D = 0, $$pre3165$i$i$i$i$i$i = 0, $$pre3167$i$i$i$i$i$i = 0, $$pre3169$i$i$i$i$i$i = 0, $$pre3171$i$i$i$i$i$i = 0, $$pre3173$i$i$i$i$i$i = 0, $$pre3175$i$i$i$i$i$i = 0;
 var $$pre3177$i$i$i$i$i$i = 0, $$pre3179$i$i$i$i$i$i = 0, $$pre3181$i$i$i$i$i$i = 0, $$pre3183$i$i$i$i$i$i = 0, $$pre3185$i$i$i$i$i$i = 0, $$pre3187$i$i$i$i$i$i = 0, $$pre3189$i$i$i$i$i$i = 0, $$pre3191$i$i$i$i$i$i = 0, $$pre3193$i$i$i$i$i$i = 0, $$pre5$i$i$i897$i$i$i$i$i$i = 0, $$pre971$i$i$i$i$i = 0, $$ptr$i$i$i$i$i$i = 0, $$ptr3218$i$i$i$i$i$i = 0, $$ptr3220$i$i$i$i$i$i = 0, $$ptr3223$i$i$i$i$i$i = 0, $$ptr3224$i$i$i$i$i$i = 0, $$ptr3232$i$i$i$i$i$i = 0, $$ptr3233$i$i$i$i$i$i = 0, $$ptr3234$i$i$i$i$i$i = 0, $$sink$i$i$i$i$i$i$i = 0;
 var $$sink$i$i$i$i$i$i$i$i$i$i$i = 0, $$sink1282577$i$i$i$i$i$i = 0, $$sink2054$i$i$i$i$i$i = 0, $$sink2578$i$i$i$i$i$i = 0, $$sink2578$lcssa2728$i$i$i$i$i$i = 0, $$sink3$i$i$i$i$i$i$i = 0, $$sink814$i$i$i$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $99 = 0, $_0$0$i$i$i$i = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i14$i$i1040$i$i$i$i$i$i = 0, $_0$0$i14$i$i945$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i1035$i$i$i$i$i$i = 0, $_0$0$i20$i$i940$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i = 0;
 var $_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i1045$i$i$i$i$i$i = 0, $_0$0$i9$i$i950$i$i$i$i$i$i = 0, $_106$i$sroa$0$0$copyload$i = 0, $_106$i$sroa$0$0$copyload$pre$i = 0, $_106$i$sroa$0$0$copyload934$i = 0, $_107$i$i = 0, $_113$sroa$0$0$copyload$i$i$i$i$i$i = 0, $_113$sroa$5$0$$sroa_idx170$i$i$i$i$i$i = 0, $_113$sroa$5$0$copyload$i$i$i$i$i$i = 0, $_114$i$i$i$i$i$i = 0, $_116$i$i$i$i$i$i = 0, $_12$sroa$0$0$copyload$i$i = 0, $_12$sroa$5$1$ph$i$i$i$i$i$i$i = 0, $_12$sroa$6$0$$sroa_idx247$i$i = 0, $_12$sroa$6$0$copyload$i$i = 0, $_12$sroa$9$0$$sroa_idx252$i$i = 0, $_12$sroa$9$0$copyload$i$i = 0, $_13 = 0;
 var $_13$i$i = 0, $_142$i$i$i$i$i$i = 0, $_15$i$i$i$i$i = 0, $_159$sroa$4$2$ph$i$i$i$i$i$i = 0, $_16$sroa$0$0$i$i$i = 0, $_16$sroa$0$1$i$i$i = 0, $_16$sroa$9$0$i$i$i = 0, $_16$sroa$9$1$i$i$i = 0, $_168$i$i$i$i$i$i = 0, $_17$i$i$i = 0, $_200$sroa$5$2$ph$i$i$i$i$i$i = 0, $_209$i$i$i$i$i$i = 0, $_22$i$i$i$i$i = 0, $_226$i$i$i$i$i$i = 0, $_247$i$i$i$i$i$i = 0, $_25$i$i$i$i$i = 0, $_269$i$i$i$i$i$i = 0, $_291$i$i$i$i$i$i = 0, $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i = 0, $_31$i$i$i$i$i = 0;
 var $_313$i$i$i$i$i$i = 0, $_32$i$i$i$i$i = 0, $_335$i$i$i$i$i$i = 0, $_357$i$i$i$i$i$i = 0, $_379$i$i$i$i$i$i = 0, $_4 = 0, $_401$i$i$i$i$i$i = 0, $_42$i$i = 0, $_423$i$i$i$i$i$i = 0, $_445$i$i$i$i$i$i = 0, $_45$i$i = 0, $_467$i$i$i$i$i$i = 0, $_47$i$i$i$i$i = 0, $_489$i$i$i$i$i$i = 0, $_49 = 0, $_51 = 0, $_511$i$i$i$i$i$i = 0, $_533$i$i$i$i$i$i = 0, $_555$i$i$i$i$i$i = 0, $_57$i$i$i$i$i = 0;
 var $_57$sroa$5$2$ph$i$i$i$i$i$i = 0, $_577$i$i$i$i$i$i = 0, $_599$i$i$i$i$i$i = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i136$i$i = 0, $_6$sroa$0$0$$sroa_idx$i32 = 0, $_60$i$i = 0, $_60$i$i$i$i$i = 0, $_621$i$i$i$i$i$i = 0, $_63$i$i = 0, $_63$i$i$i$i$i = 0, $_641$i$i$i$i$i$i = 0, $_656$sroa$0$0$i$i$i$i$i$i = 0, $_664$i$i$i$i$i$i = 0, $_67$i$i$i$i$i = 0, $_7$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i = 0, $_7$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i = 0, $_7$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i = 0;
 var $_7$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i = 0, $_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i106$i$i$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i107$i$i$i$i$i = 0, $_82$i$i$i$i$i = 0, $_95$i$i$i$i$i$i = 0, $_98$i$i$i$i$i = 0, $accum$0$lcssa$i$i$i$i$i$i$i$i = 0, $accum$09$i$i$i$i$i$i$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i199$i$i = 0, $cond$i$i200$i$i = 0, $cond$i11 = 0, $cond$i973$i$i$i$i$i$i = 0, $cond10$i$i$i$i$i = 0, $cond10$i$i$i195$i$i = 0;
 var $cond102$i$i$i$i$i$i = 0, $cond105$i$i$i$i$i$i = 0, $cond108$i$i$i$i$i$i = 0, $cond112$i$i$i$i$i$i = 0, $cond115$i$i$i$i$i$i = 0, $cond116$i$i$i$i$i$i = 0, $cond119$i$i$i$i$i$i = 0, $cond12$i$i$i$i$i = 0, $cond123$i$i$i$i$i$i = 0, $cond14$i$i = 0, $cond17$i$i$i$i$i = 0, $cond18$i$i = 0, $cond20$i$i$i$i$i = 0, $cond27$i$i = 0, $cond51$i$i$i$i$i$i = 0, $cond54$i$i$i$i$i$i = 0, $cond57$i$i$i$i$i$i = 0, $cond6$i$i$i$i$i = 0, $cond60$i$i$i$i$i$i = 0, $cond63$i$i$i$i$i$i = 0;
 var $cond66$i$i$i$i$i$i = 0, $cond69$i$i$i$i$i$i = 0, $cond72$i$i$i$i$i$i = 0, $cond75$i$i$i$i$i$i = 0, $cond78$i$i$i$i$i$i = 0, $cond8$i$i$i$i$i = 0, $cond81$i$i$i$i$i$i = 0, $cond84$i$i$i$i$i$i = 0, $cond87$i$i$i$i$i$i = 0, $cond90$i$i$i$i$i$i = 0, $cond93$i$i$i$i$i$i = 0, $cond96$i$i$i$i$i$i = 0, $cond99$i$i$i$i$i$i = 0, $context$i$i = 0, $context$i$i$i = 0, $err$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0;
 var $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err2$sroa$0$0$$sroa_idx$i$i = 0, $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err3$sroa$0$0$$sroa_idx$i$i$i$i$i = 0, $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0;
 var $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i = 0, $extract$t50 = 0, $first$0$off02665$i$i$i$i$i$i = 0, $frame$i$i$i$i$i = 0, $frames$i$i = 0, $g$i$i$i$i$i = 0, $g$i$sroa_raw_idx$i$i$i$i = 0, $i$0$lcssa$i$i$i$i$i$i = 0, $i$02668$i$i$i$i$i$i = 0, $idx$0$i$i$i$i$i$i = 0, $idx$i$i$i$i$i = 0, $info$i$i$i = 0, $inner$sroa$0$2$i$i$i$i$i$i = 0, $inner$sroa$0$5$ph$i$i$i$i$i$i = 0, $inner$sroa$0$52667$i$i$i$i$i$i = 0, $inner$sroa$14$1$i$i$i$i$i$i = 0, $inner$sroa$14$1$in$i$i$i$i$i$i = 0;
 var $inner$sroa$14$2$i$i$i$i$i$i = 0, $inner$sroa$14$5$ph$i$i$i$i$i$i = 0, $inner$sroa$14$52666$i$i$i$i$i$i = 0, $iter$sroa$0$0$iter$sroa$0$0$318357$i$i = 0, $iter$sroa$15$0$i$i = 0, $iter$sroa$4$08$i$i$i$i$i$i$i$i = 0, $not$$i$i$i899$i$i$i$i$i$i = 0, $or$cond = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i$i$i = 0, $or$cond$i$i$i$i1645$i$i$i$i$i$i = 0, $or$cond$i$i$i$i965$i$i$i$i$i$i = 0, $or$cond$i$i$i$i977$i$i$i$i$i$i = 0, $or$cond13$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp$i$i1033$i$i$i$i$i$i = 0, $phitmp$i$i938$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i$i$i = 0;
 var $phitmp26$i$i$i$i$i$i$i$i$i$i = 0, $phitmp26$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp26$i$i1038$i$i$i$i$i$i = 0, $phitmp26$i$i943$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i$i$i$i$i = 0, $phitmp27$i$i1043$i$i$i$i$i$i = 0, $phitmp27$i$i948$i$i$i$i$i$i = 0, $res$sroa$0$1$i = 0, $res$sroa$8$0$i$off0 = 0, $res$sroa$8$0$i$off32 = 0, $res$sroa$8$1$i$off0 = 0, $res$sroa$8$1$i$off32 = 0, $rest2$sroa$0$0$be$i$i$i$i$i$i = 0, $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = 0, $rest2$sroa$0$02587$i$i$i$i$i$i = 0, $rest2$sroa$80$0$be$i$i$i$i$i$i = 0, $rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = 0, $rest2$sroa$80$02624$i$i$i$i$i$i = 0;
 var $rhsc$i$i$i$i$i$i$i$i$i = 0, $rhsc$i$i$i827$i$i$i$i$i$i = 0, $rhsc2053$i$i$i$i$i$i = 0, $self$sroa$0$0$copyload$i$i$i$i = 0, $self$sroa$0$0$copyload$i972$i$i$i$i$i$i = 0, $self$sroa$4$0$$sroa_idx$i$i$i$i$i$i$i = 0, $self$sroa$4$0$copyload$i975$i$i$i$i$i$i = 0, $self$sroa$5$0$$sroa_idx4$i$i$i$i = 0, $self$sroa$5$0$copyload$i$i$i$i = 0, $self$sroa$5$0$copyload$sink$i$i$i$i = 0, $self$sroa$55$0$$sroa_idx6$i$i$i$i$i$i$i = 0, $self$sroa$55$0$copyload$i$i$i$i$i$i$i = 0, $self$sroa$6$0$$sroa_idx6$i$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i$i = 0, $split$i$i$i$i$i$i = 0, $switch$i = 0, $switch$i129$i$i$i$i$i = 0, $switch$i14 = 0, $switch$i25 = 0, $switch3640$i$i$i$i$i$i = 0;
 var $symname$sroa$0$0$i$i$i = 0, $symname$sroa$5$0$i$i$i = 0, $symname$sroa$5$1$i$i$i = 0, $tmp_ret$sroa$3$01376$i$i = 0, $tmp_ret6$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1808|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1808|0);
 $context$i$i = sp + 1792|0;
 $_82$i$i$i$i$i = sp + 1776|0;
 $_63$i$i$i$i$i = sp + 1760|0;
 $_47$i$i$i$i$i = sp + 1744|0;
 $_31$i$i$i$i$i = sp + 1728|0;
 $_15$i$i$i$i$i = sp + 1712|0;
 $g$i$i$i$i$i = sp + 1704|0;
 $context$i$i$i = sp + 1796|0;
 $_664$i$i$i$i$i$i = sp + 1688|0;
 $_641$i$i$i$i$i$i = sp + 1672|0;
 $_621$i$i$i$i$i$i = sp + 1656|0;
 $_599$i$i$i$i$i$i = sp + 1640|0;
 $_577$i$i$i$i$i$i = sp + 1624|0;
 $_555$i$i$i$i$i$i = sp + 1608|0;
 $_533$i$i$i$i$i$i = sp + 1592|0;
 $_511$i$i$i$i$i$i = sp + 1576|0;
 $_489$i$i$i$i$i$i = sp + 1560|0;
 $_467$i$i$i$i$i$i = sp + 1544|0;
 $_445$i$i$i$i$i$i = sp + 1528|0;
 $_423$i$i$i$i$i$i = sp + 1512|0;
 $_401$i$i$i$i$i$i = sp + 1496|0;
 $_379$i$i$i$i$i$i = sp + 1480|0;
 $_357$i$i$i$i$i$i = sp + 1464|0;
 $_335$i$i$i$i$i$i = sp + 1448|0;
 $_313$i$i$i$i$i$i = sp + 1432|0;
 $_291$i$i$i$i$i$i = sp + 1416|0;
 $_269$i$i$i$i$i$i = sp + 1400|0;
 $_247$i$i$i$i$i$i = sp + 1384|0;
 $_226$i$i$i$i$i$i = sp + 1368|0;
 $_209$i$i$i$i$i$i = sp + 1352|0;
 $_168$i$i$i$i$i$i = sp + 1344|0;
 $_142$i$i$i$i$i$i = sp + 1328|0;
 $_116$i$i$i$i$i$i = sp + 1320|0;
 $_114$i$i$i$i$i$i = sp + 1312|0;
 $split$i$i$i$i$i$i = sp + 1224|0;
 $_95$i$i$i$i$i$i = sp + 1208|0;
 $tmp_ret6$i$i$i$i$i = sp + 1200|0;
 $_98$i$i$i$i$i = sp + 1184|0;
 $_67$i$i$i$i$i = sp + 1176|0;
 $_60$i$i$i$i$i = sp + 1152|0;
 $_57$i$i$i$i$i = sp + 1136|0;
 $_32$i$i$i$i$i = sp + 1112|0;
 $_25$i$i$i$i$i = sp + 1088|0;
 $_22$i$i$i$i$i = sp + 1072|0;
 $frame$i$i$i$i$i = sp + 1064|0;
 $idx$i$i$i$i$i = sp + 1792|0;
 $_17$i$i$i = sp + 1048|0;
 $info$i$i$i = sp + 1032|0;
 $_107$i$i = sp + 1016|0;
 $_63$i$i = sp + 992|0;
 $_60$i$i = sp + 976|0;
 $_45$i$i = sp + 952|0;
 $_42$i$i = sp + 936|0;
 $_13$i$i = sp + 920|0;
 $frames$i$i = sp + 120|0;
 $_51 = sp + 96|0;
 $_49 = sp + 80|0;
 $_13 = sp + 40|0;
 $_6 = sp + 16|0;
 $_4 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$_13>>2] = $3;
 $12 = ((($_13)) + 4|0);
 HEAP32[$12>>2] = (93);
 $13 = ((($_13)) + 8|0);
 HEAP32[$13>>2] = $5;
 $14 = ((($_13)) + 12|0);
 HEAP32[$14>>2] = (93);
 $15 = ((($_13)) + 16|0);
 HEAP32[$15>>2] = $7;
 $16 = ((($_13)) + 20|0);
 HEAP32[$16>>2] = (93);
 $17 = ((($_13)) + 24|0);
 HEAP32[$17>>2] = $9;
 $18 = ((($_13)) + 28|0);
 HEAP32[$18>>2] = (112);
 $19 = ((($_13)) + 32|0);
 HEAP32[$19>>2] = $11;
 $20 = ((($_13)) + 36|0);
 HEAP32[$20>>2] = (112);
 HEAP32[$_6>>2] = 2536;
 $21 = ((($_6)) + 4|0);
 HEAP32[$21>>2] = 6;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $22 = ((($_6)) + 16|0);
 HEAP32[$22>>2] = $_13;
 $23 = ((($_6)) + 20|0);
 HEAP32[$23>>2] = 5;
 $24 = ((($2)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_viii[$25 & 255]($_4,$1,$_6);
 $26 = HEAP32[$_4>>2]|0;
 $cond$i11 = ($26|0)==(0);
 if (!($cond$i11)) {
  $27 = ((($_4)) + 4|0);
  $28 = HEAP8[$27>>0]|0;
  $switch$i14 = ($28&255)<(2);
  if (!($switch$i14)) {
   $29 = ((($_4)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($30)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   invoke_vi($35|0,($32|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $45 = ___cxa_find_matching_catch_2()|0;
    $46 = tempRet0;
    $47 = HEAP32[$31>>2]|0;
    $48 = HEAP32[$33>>2]|0;
    __ZN5alloc4heap8box_free17he7aff06e65e4596eE($47,$48);
    __ZN5alloc4heap8box_free17h53b02e8f65dea423E($30);
    ___resumeException($45|0);
    // unreachable;
   }
   $38 = HEAP32[$33>>2]|0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = HEAP32[$31>>2]|0;
    $43 = ((($38)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    ___rust_dealloc($42,$40,$44);
   }
   ___rust_dealloc($30,12,4);
  }
 }
 $49 = ((($0)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP8[$50>>0]|0;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $53 = HEAP8[5090]|0;if (($53<<24>>24) == 1) HEAP8[5090] = 0;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   STACKTOP = sp;return;
  }
  HEAP32[$_51>>2] = 2752;
  $941 = ((($_51)) + 4|0);
  HEAP32[$941>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i32 = ((($_51)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i32>>2] = 0;
  $942 = ((($_51)) + 16|0);
  HEAP32[$942>>2] = 12908;
  $943 = ((($_51)) + 20|0);
  HEAP32[$943>>2] = 0;
  FUNCTION_TABLE_viii[$25 & 255]($_49,$1,$_51);
  $944 = HEAP32[$_49>>2]|0;
  $cond$i = ($944|0)==(0);
  if (!($cond$i)) {
   $945 = ((($_49)) + 4|0);
   $946 = HEAP8[$945>>0]|0;
   $switch$i = ($946&255)<(2);
   if (!($switch$i)) {
    $947 = ((($_49)) + 8|0);
    $948 = HEAP32[$947>>2]|0;
    $949 = ((($948)) + 4|0);
    $950 = HEAP32[$949>>2]|0;
    $951 = ((($948)) + 8|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = HEAP32[$952>>2]|0;
    __THREW__ = 0;
    invoke_vi($953|0,($950|0));
    $954 = __THREW__; __THREW__ = 0;
    $955 = $954&1;
    if ($955) {
     $963 = ___cxa_find_matching_catch_2()|0;
     $964 = tempRet0;
     $965 = HEAP32[$949>>2]|0;
     $966 = HEAP32[$951>>2]|0;
     __ZN5alloc4heap8box_free17he7aff06e65e4596eE($965,$966);
     __ZN5alloc4heap8box_free17h53b02e8f65dea423E($948);
     ___resumeException($963|0);
     // unreachable;
    }
    $956 = HEAP32[$951>>2]|0;
    $957 = ((($956)) + 4|0);
    $958 = HEAP32[$957>>2]|0;
    $959 = ($958|0)==(0);
    if (!($959)) {
     $960 = HEAP32[$949>>2]|0;
     $961 = ((($956)) + 8|0);
     $962 = HEAP32[$961>>2]|0;
     ___rust_dealloc($960,$958,$962);
    }
    ___rust_dealloc($948,12,4);
   }
  }
  STACKTOP = sp;return;
 }
 (_pthread_mutex_lock(((12784)|0))|0);
 _memset(($frames$i$i|0),0,800)|0;
 __ZN3std3sys3imp9backtrace7tracing3imp16unwind_backtrace17h32662089086f4902E($_13$i$i,$frames$i$i);
 $_12$sroa$0$0$copyload$i$i = HEAP32[$_13$i$i>>2]|0;
 $_12$sroa$6$0$$sroa_idx247$i$i = ((($_13$i$i)) + 4|0);
 $_12$sroa$6$0$copyload$i$i = HEAP32[$_12$sroa$6$0$$sroa_idx247$i$i>>2]|0;
 $_12$sroa$9$0$$sroa_idx252$i$i = ((($_13$i$i)) + 8|0);
 $_12$sroa$9$0$copyload$i$i = HEAP32[$_12$sroa$9$0$$sroa_idx252$i$i>>2]|0;
 $cond$i$i = ($_12$sroa$0$0$copyload$i$i|0)==(0);
 L28: do {
  if ($cond$i$i) {
   $858 = ($_12$sroa$6$0$copyload$i$i>>>0)>(100);
   if ($858) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($_12$sroa$6$0$copyload$i$i,100);
    // unreachable;
   }
   HEAP32[$context$i$i$i>>2] = $context$i$i;
   $859 = ($51<<24>>24)==(2);
   do {
    if ($859) {
     label = 476;
    } else {
     $860 = (($frames$i$i) + ($_12$sroa$6$0$copyload$i$i<<3)|0);
     $861 = $860;
     $862 = $context$i$i$i;
     HEAP32[$g$i$i$i$i$i>>2] = $862;
     $g$i$sroa_raw_idx$i$i$i$i = ((($g$i$i$i$i$i)) + 4|0);
     HEAP32[$g$i$sroa_raw_idx$i$i$i$i>>2] = 0;
     $$idx$i$i$i = $_12$sroa$6$0$copyload$i$i << 3;
     $863 = (($$idx$i$i$i|0) / 8)&-1;
     $864 = ($863>>>0)>(3);
     L35: do {
      if ($864) {
       $867 = $frames$i$i;
       while(1) {
        __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($_15$i$i$i$i$i,$g$i$i$i$i$i,$867);
        $868 = HEAP32[$_15$i$i$i$i$i>>2]|0;
        $cond6$i$i$i$i$i = ($868|0)==(0);
        if (!($cond6$i$i$i$i$i)) {
         label = 463;
         break;
        }
        $869 = ((($867)) + 8|0);
        __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($_31$i$i$i$i$i,$g$i$i$i$i$i,$869);
        $870 = HEAP32[$_31$i$i$i$i$i>>2]|0;
        $cond8$i$i$i$i$i = ($870|0)==(0);
        if (!($cond8$i$i$i$i$i)) {
         label = 466;
         break;
        }
        $878 = ((($867)) + 16|0);
        __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($_47$i$i$i$i$i,$g$i$i$i$i$i,$878);
        $879 = HEAP32[$_47$i$i$i$i$i>>2]|0;
        $cond10$i$i$i195$i$i = ($879|0)==(0);
        if (!($cond10$i$i$i195$i$i)) {
         label = 468;
         break;
        }
        $887 = ((($867)) + 24|0);
        $888 = ((($867)) + 32|0);
        __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($_63$i$i$i$i$i,$g$i$i$i$i$i,$887);
        $889 = HEAP32[$_63$i$i$i$i$i>>2]|0;
        $cond12$i$i$i$i$i = ($889|0)==(0);
        if (!($cond12$i$i$i$i$i)) {
         label = 470;
         break;
        }
        $897 = $888;
        $898 = (($861) - ($897))|0;
        $899 = (($898|0) / 8)&-1;
        $900 = ($899>>>0)>(3);
        if ($900) {
         $867 = $888;
        } else {
         $865 = $888;
         label = 459;
         break L35;
        }
       }
       if ((label|0) == 463) {
        $871 = ((($_15$i$i$i$i$i)) + 4|0);
        $872 = $871;
        $873 = $872;
        $874 = HEAP32[$873>>2]|0;
        $875 = (($872) + 4)|0;
        $876 = $875;
        $877 = HEAP32[$876>>2]|0;
        $_16$sroa$0$0$i$i$i = $874;$_16$sroa$9$0$i$i$i = $877;
        label = 464;
        break;
       }
       else if ((label|0) == 466) {
        $880 = ((($_31$i$i$i$i$i)) + 4|0);
        $881 = $880;
        $882 = $881;
        $883 = HEAP32[$882>>2]|0;
        $884 = (($881) + 4)|0;
        $885 = $884;
        $886 = HEAP32[$885>>2]|0;
        $_16$sroa$0$0$i$i$i = $883;$_16$sroa$9$0$i$i$i = $886;
        label = 464;
        break;
       }
       else if ((label|0) == 468) {
        $890 = ((($_47$i$i$i$i$i)) + 4|0);
        $891 = $890;
        $892 = $891;
        $893 = HEAP32[$892>>2]|0;
        $894 = (($891) + 4)|0;
        $895 = $894;
        $896 = HEAP32[$895>>2]|0;
        $_16$sroa$0$0$i$i$i = $893;$_16$sroa$9$0$i$i$i = $896;
        label = 464;
        break;
       }
       else if ((label|0) == 470) {
        $901 = ((($_63$i$i$i$i$i)) + 4|0);
        $902 = $901;
        $903 = $902;
        $904 = HEAP32[$903>>2]|0;
        $905 = (($902) + 4)|0;
        $906 = $905;
        $907 = HEAP32[$906>>2]|0;
        $_16$sroa$0$0$i$i$i = $904;$_16$sroa$9$0$i$i$i = $907;
        label = 464;
        break;
       }
      } else {
       $865 = $frames$i$i;
       label = 459;
      }
     } while(0);
     L48: do {
      if ((label|0) == 459) {
       $866 = ($865|0)==($860|0);
       L50: do {
        if (!($866)) {
         $909 = $865;
         while(1) {
          $908 = ((($909)) + 8|0);
          __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($_82$i$i$i$i$i,$g$i$i$i$i$i,$909);
          $910 = HEAP32[$_82$i$i$i$i$i>>2]|0;
          $cond$i$i$i199$i$i = ($910|0)==(0);
          if (!($cond$i$i$i199$i$i)) {
           break;
          }
          $911 = ($908|0)==($860|0);
          if ($911) {
           break L50;
          } else {
           $909 = $908;
          }
         }
         $912 = ((($_82$i$i$i$i$i)) + 4|0);
         $913 = $912;
         $914 = $913;
         $915 = HEAP32[$914>>2]|0;
         $916 = (($913) + 4)|0;
         $917 = $916;
         $918 = HEAP32[$917>>2]|0;
         $_16$sroa$0$0$i$i$i = $915;$_16$sroa$9$0$i$i$i = $918;
         label = 464;
         break L48;
        }
       } while(0);
       $_16$sroa$0$1$i$i$i = 0;$_16$sroa$9$1$i$i$i = 0;
      }
     } while(0);
     if ((label|0) == 464) {
      $_16$sroa$0$1$i$i$i = $_16$sroa$0$0$i$i$i;$_16$sroa$9$1$i$i$i = $_16$sroa$9$0$i$i$i;
     }
     $cond$i$i200$i$i = ($_16$sroa$0$1$i$i$i|0)==(0);
     $_0$0$i$i$i$i = $cond$i$i200$i$i ? $_12$sroa$6$0$copyload$i$i : $_16$sroa$9$1$i$i$i;
     $919 = (($_12$sroa$6$0$copyload$i$i) - ($_0$0$i$i$i$i))|0;
     $920 = ($919>>>0)<($_12$sroa$6$0$copyload$i$i>>>0);
     if ($920) {
      $921 = ($919|0)==(0);
      if ($921) {
       $tmp_ret$sroa$3$01376$i$i = 0;
      } else {
       HEAP32[$_45$i$i>>2] = 2584;
       $57 = ((($_45$i$i)) + 4|0);
       HEAP32[$57>>2] = 1;
       $_6$sroa$0$0$$sroa_idx$i$i$i = ((($_45$i$i)) + 8|0);
       HEAP32[$_6$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
       $58 = ((($_45$i$i)) + 16|0);
       HEAP32[$58>>2] = 12908;
       $59 = ((($_45$i$i)) + 20|0);
       HEAP32[$59>>2] = 0;
       FUNCTION_TABLE_viii[$25 & 255]($_42$i$i,$1,$_45$i$i);
       $60 = HEAP32[$_42$i$i>>2]|0;
       $cond27$i$i = ($60|0)==(0);
       if ($cond27$i$i) {
        $tmp_ret$sroa$3$01376$i$i = $919;
        break;
       } else {
        $err1$sroa$0$0$$sroa_idx$i$i = ((($_42$i$i)) + 4|0);
        $61 = $err1$sroa$0$0$$sroa_idx$i$i;
        $62 = $61;
        $63 = HEAP32[$62>>2]|0;
        $64 = (($61) + 4)|0;
        $65 = $64;
        $66 = HEAP32[$65>>2]|0;
        $67 = $63&255;
        $res$sroa$8$0$i$off0 = $67;$res$sroa$8$0$i$off32 = $66;
        label = 13;
        break L28;
       }
      }
     } else {
      label = 476;
     }
    }
   } while(0);
   if ((label|0) == 476) {
    $tmp_ret$sroa$3$01376$i$i = 0;
   }
   HEAP32[$_63$i$i>>2] = 2592;
   $68 = ((($_63$i$i)) + 4|0);
   HEAP32[$68>>2] = 1;
   $_6$sroa$0$0$$sroa_idx$i136$i$i = ((($_63$i$i)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i136$i$i>>2] = 0;
   $69 = ((($_63$i$i)) + 16|0);
   HEAP32[$69>>2] = 12908;
   $70 = ((($_63$i$i)) + 20|0);
   HEAP32[$70>>2] = 0;
   FUNCTION_TABLE_viii[$25 & 255]($_60$i$i,$1,$_63$i$i);
   $71 = HEAP32[$_60$i$i>>2]|0;
   $cond14$i$i = ($71|0)==(0);
   if (!($cond14$i$i)) {
    $err2$sroa$0$0$$sroa_idx$i$i = ((($_60$i$i)) + 4|0);
    $96 = $err2$sroa$0$0$$sroa_idx$i$i;
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + 4)|0;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = $98&255;
    $res$sroa$8$0$i$off0 = $102;$res$sroa$8$0$i$off32 = $101;
    label = 13;
    break;
   }
   $72 = (($_12$sroa$6$0$copyload$i$i) - ($tmp_ret$sroa$3$01376$i$i))|0;
   $73 = ($72>>>0)>(100);
   if ($73) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($72,100);
    // unreachable;
   }
   $74 = (($frames$i$i) + ($72<<3)|0);
   $75 = ((($frame$i$i$i$i$i)) + 4|0);
   $76 = $idx$i$i$i$i$i;
   $77 = ((($_67$i$i$i$i$i)) + 4|0);
   $78 = ((($_60$i$i$i$i$i)) + 4|0);
   $_8$sroa$0$0$$sroa_idx$i106$i$i$i$i$i = ((($_60$i$i$i$i$i)) + 8|0);
   $_8$sroa$4$0$$sroa_idx2$i107$i$i$i$i$i = ((($_60$i$i$i$i$i)) + 12|0);
   $79 = ((($_60$i$i$i$i$i)) + 16|0);
   $80 = ((($_60$i$i$i$i$i)) + 20|0);
   $err1$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_57$i$i$i$i$i)) + 4|0);
   $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i = ((($_107$i$i)) + 4|0);
   $err3$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_98$i$i$i$i$i)) + 4|0);
   $_7$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 64|0);
   $_7$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 68|0);
   $_7$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 72|0);
   $_7$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 73|0);
   $_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i = ((($split$i$i$i$i$i$i)) + 80|0);
   $_113$sroa$5$0$$sroa_idx170$i$i$i$i$i$i = ((($_114$i$i$i$i$i$i)) + 4|0);
   $81 = ((($split$i$i$i$i$i$i)) + 48|0);
   $82 = ((($_116$i$i$i$i$i$i)) + 4|0);
   $self$sroa$55$0$$sroa_idx6$i$i$i$i$i$i$i = ((($_168$i$i$i$i$i$i)) + 4|0);
   $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_226$i$i$i$i$i$i)) + 4|0);
   $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_209$i$i$i$i$i$i)) + 4|0);
   $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_247$i$i$i$i$i$i)) + 4|0);
   $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_269$i$i$i$i$i$i)) + 4|0);
   $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_291$i$i$i$i$i$i)) + 4|0);
   $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_313$i$i$i$i$i$i)) + 4|0);
   $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_335$i$i$i$i$i$i)) + 4|0);
   $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_357$i$i$i$i$i$i)) + 4|0);
   $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_379$i$i$i$i$i$i)) + 4|0);
   $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_401$i$i$i$i$i$i)) + 4|0);
   $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_423$i$i$i$i$i$i)) + 4|0);
   $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_445$i$i$i$i$i$i)) + 4|0);
   $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_467$i$i$i$i$i$i)) + 4|0);
   $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_489$i$i$i$i$i$i)) + 4|0);
   $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_511$i$i$i$i$i$i)) + 4|0);
   $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_533$i$i$i$i$i$i)) + 4|0);
   $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_555$i$i$i$i$i$i)) + 4|0);
   $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_577$i$i$i$i$i$i)) + 4|0);
   $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_599$i$i$i$i$i$i)) + 4|0);
   $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_621$i$i$i$i$i$i)) + 4|0);
   $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_641$i$i$i$i$i$i)) + 4|0);
   $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_664$i$i$i$i$i$i)) + 4|0);
   $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_142$i$i$i$i$i$i)) + 4|0);
   $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_95$i$i$i$i$i$i)) + 4|0);
   $83 = $frame$i$i$i$i$i;
   $84 = ((($tmp_ret6$i$i$i$i$i)) + 4|0);
   $85 = ((($_32$i$i$i$i$i)) + 4|0);
   $86 = ((($_32$i$i$i$i$i)) + 8|0);
   $87 = ((($_32$i$i$i$i$i)) + 12|0);
   $88 = ((($_32$i$i$i$i$i)) + 16|0);
   $89 = ((($_32$i$i$i$i$i)) + 20|0);
   $90 = ((($_25$i$i$i$i$i)) + 4|0);
   $_8$sroa$0$0$$sroa_idx$i$i$i$i$i$i = ((($_25$i$i$i$i$i)) + 8|0);
   $_8$sroa$4$0$$sroa_idx2$i$i$i$i$i$i = ((($_25$i$i$i$i$i)) + 12|0);
   $91 = ((($_25$i$i$i$i$i)) + 16|0);
   $92 = ((($_25$i$i$i$i$i)) + 20|0);
   $err$sroa$0$0$$sroa_idx$i$i$i$i$i = ((($_22$i$i$i$i$i)) + 4|0);
   $93 = ((($info$i$i$i)) + 8|0);
   $self$sroa$5$0$$sroa_idx4$i$i$i$i = ((($_17$i$i$i)) + 4|0);
   $self$sroa$6$0$$sroa_idx6$i$i$i$i = ((($_17$i$i$i)) + 8|0);
   $94 = ($51<<24>>24)==(3);
   $95 = ((($2)) + 20|0);
   $iter$sroa$0$0$iter$sroa$0$0$318357$i$i = $frames$i$i;$iter$sroa$15$0$i$i = 0;
   L74: while(1) {
    $103 = ($iter$sroa$0$0$iter$sroa$0$0$318357$i$i|0)==($74|0);
    if ($103) {
     label = 24;
     break;
    }
    $104 = ((($iter$sroa$0$0$iter$sroa$0$0$318357$i$i)) + 8|0);
    $105 = (($iter$sroa$15$0$i$i) + 1)|0;
    $106 = HEAP32[$iter$sroa$0$0$iter$sroa$0$0$318357$i$i>>2]|0;
    ;HEAP32[$info$i$i$i>>2]=0|0;HEAP32[$info$i$i$i+4>>2]=0|0;HEAP32[$info$i$i$i+8>>2]=0|0;HEAP32[$info$i$i$i+12>>2]=0|0;
    $107 = (_dladdr(($106|0),($info$i$i$i|0))|0);
    $108 = ($107|0)==(0);
    if ($108) {
     $symname$sroa$0$0$i$i$i = 0;$symname$sroa$5$1$i$i$i = 0;
    } else {
     $109 = HEAP32[$93>>2]|0;
     $113 = ($109|0)==(0|0);
     if ($113) {
      $symname$sroa$0$0$i$i$i = 0;$symname$sroa$5$1$i$i$i = 0;
     } else {
      $110 = (_strlen($109)|0);
      $111 = ($110|0)==(-1);
      if ($111) {
       label = 26;
       break;
      }
      __ZN4core3str9from_utf817h7d85691fcaee98e9E($_17$i$i$i,$109,$110);
      $self$sroa$0$0$copyload$i$i$i$i = HEAP32[$_17$i$i$i>>2]|0;
      $self$sroa$5$0$copyload$i$i$i$i = HEAP32[$self$sroa$5$0$$sroa_idx4$i$i$i$i>>2]|0;
      $cond$i$i$i$i = ($self$sroa$0$0$copyload$i$i$i$i|0)==(0);
      if ($cond$i$i$i$i) {
       $self$sroa$6$0$copyload$i$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i$i$i$i>>2]|0;
       $self$sroa$5$0$copyload$sink$i$i$i$i = $self$sroa$5$0$copyload$i$i$i$i;$symname$sroa$5$0$i$i$i = $self$sroa$6$0$copyload$i$i$i$i;
      } else {
       $self$sroa$5$0$copyload$sink$i$i$i$i = 0;$symname$sroa$5$0$i$i$i = 0;
      }
      $112 = $self$sroa$5$0$copyload$sink$i$i$i$i;
      $symname$sroa$0$0$i$i$i = $112;$symname$sroa$5$1$i$i$i = $symname$sroa$5$0$i$i$i;
     }
    }
    $114 = ((($iter$sroa$0$0$iter$sroa$0$0$318357$i$i)) + 4|0);
    $115 = HEAP32[$iter$sroa$0$0$iter$sroa$0$0$318357$i$i>>2]|0;
    $116 = HEAP32[$114>>2]|0;
    HEAP32[$idx$i$i$i$i$i>>2] = $iter$sroa$15$0$i$i;
    HEAP32[$frame$i$i$i$i$i>>2] = $115;
    HEAP32[$75>>2] = $116;
    $117 = $symname$sroa$0$0$i$i$i;
    do {
     if ($94) {
      $118 = ($115|0)==(0);
      if ($118) {
       HEAP32[$_107$i$i>>2] = 0;
       $_106$i$sroa$0$0$copyload934$i = 0;
       label = 35;
      } else {
       label = 37;
      }
     } else {
      if ($859) {
       __ZN4core3fmt10ArgumentV110from_usize17h895a547c719e18d7E($tmp_ret6$i$i$i$i$i,2600);
       $119 = HEAP32[$tmp_ret6$i$i$i$i$i>>2]|0;
       $120 = HEAP32[$84>>2]|0;
       HEAP32[$_32$i$i$i$i$i>>2] = $76;
       HEAP32[$85>>2] = (119);
       HEAP32[$86>>2] = $83;
       HEAP32[$87>>2] = (120);
       HEAP32[$88>>2] = $119;
       HEAP32[$89>>2] = $120;
       HEAP32[$_25$i$i$i$i$i>>2] = 2604;
       HEAP32[$90>>2] = 3;
       HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i$i$i$i>>2] = 2628;
       HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i$i$i$i>>2] = 2;
       HEAP32[$91>>2] = $_32$i$i$i$i$i;
       HEAP32[$92>>2] = 3;
       FUNCTION_TABLE_viii[$25 & 255]($_22$i$i$i$i$i,$1,$_25$i$i$i$i$i);
       $121 = HEAP32[$_22$i$i$i$i$i>>2]|0;
       $cond20$i$i$i$i$i = ($121|0)==(0);
       if ($cond20$i$i$i$i$i) {
        label = 38;
        break;
       } else {
        $124 = $err$sroa$0$0$$sroa_idx$i$i$i$i$i;
        $125 = $124;
        $126 = HEAP32[$125>>2]|0;
        $127 = (($124) + 4)|0;
        $128 = $127;
        $129 = HEAP32[$128>>2]|0;
        HEAP32[$_107$i$i>>2] = 1;
        $130 = $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i;
        $131 = $130;
        HEAP32[$131>>2] = $126;
        $132 = (($130) + 4)|0;
        $133 = $132;
        HEAP32[$133>>2] = $129;
        $_106$i$sroa$0$0$copyload934$i = 1;
        label = 35;
        break;
       }
      } else {
       label = 37;
      }
     }
    } while(0);
    do {
     if ((label|0) == 37) {
      label = 0;
      HEAP32[$_67$i$i$i$i$i>>2] = $76;
      HEAP32[$77>>2] = (119);
      HEAP32[$_60$i$i$i$i$i>>2] = 2700;
      HEAP32[$78>>2] = 2;
      HEAP32[$_8$sroa$0$0$$sroa_idx$i106$i$i$i$i$i>>2] = 2716;
      HEAP32[$_8$sroa$4$0$$sroa_idx2$i107$i$i$i$i$i>>2] = 1;
      HEAP32[$79>>2] = $_67$i$i$i$i$i;
      HEAP32[$80>>2] = 1;
      FUNCTION_TABLE_viii[$25 & 255]($_57$i$i$i$i$i,$1,$_60$i$i$i$i$i);
      $122 = HEAP32[$_57$i$i$i$i$i>>2]|0;
      $cond10$i$i$i$i$i = ($122|0)==(0);
      if ($cond10$i$i$i$i$i) {
       label = 38;
       break;
      } else {
       $134 = $err1$sroa$0$0$$sroa_idx$i$i$i$i$i;
       $135 = $134;
       $136 = HEAP32[$135>>2]|0;
       $137 = (($134) + 4)|0;
       $138 = $137;
       $139 = HEAP32[$138>>2]|0;
       HEAP32[$_107$i$i>>2] = 1;
       $140 = $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i;
       $141 = $140;
       HEAP32[$141>>2] = $136;
       $142 = (($140) + 4)|0;
       $143 = $142;
       HEAP32[$143>>2] = $139;
       $_106$i$sroa$0$0$copyload934$i = 1;
       label = 35;
       break;
      }
     }
    } while(0);
    L98: do {
     if ((label|0) == 38) {
      label = 0;
      $123 = ($symname$sroa$0$0$i$i$i|0)==(0);
      do {
       if ($123) {
        $144 = HEAP32[$95>>2]|0;
        FUNCTION_TABLE_viiii[$144 & 255]($_98$i$i$i$i$i,$1,5091,9);
        $145 = HEAP32[$_98$i$i$i$i$i>>2]|0;
        $cond17$i$i$i$i$i = ($145|0)==(0);
        if ($cond17$i$i$i$i$i) {
         $836 = $144;
         break;
        } else {
         $843 = $err3$sroa$0$0$$sroa_idx$i$i$i$i$i;
         $844 = $843;
         $845 = HEAP32[$844>>2]|0;
         $846 = (($843) + 4)|0;
         $847 = $846;
         $848 = HEAP32[$847>>2]|0;
         HEAP32[$_107$i$i>>2] = 1;
         $849 = $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i;
         $850 = $849;
         HEAP32[$850>>2] = $845;
         $851 = (($849) + 4)|0;
         $852 = $851;
         HEAP32[$852>>2] = $848;
         $_106$i$sroa$0$0$copyload934$i = 1;
         label = 35;
         break L98;
        }
       } else {
        $146 = ($symname$sroa$5$1$i$i$i>>>0)>(4);
        do {
         if ($146) {
          $154 = ((($117)) + 3|0);
          $155 = HEAP8[$154>>0]|0;
          $156 = ($155<<24>>24)>(-65);
          if ($156) {
           $157 = ($117|0)==(5101|0);
           if (!($157)) {
            $158 = (_memcmp(5101,$117,3)|0);
            $159 = ($158|0)==(0);
            if (!($159)) {
             label = 60;
             break;
            }
           }
           $149 = (($symname$sroa$5$1$i$i$i) + -1)|0;
           $150 = ($149|0)==(0);
           if ($150) {
            $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = $117;
           } else {
            $151 = (($117) + ($149)|0);
            $152 = HEAP8[$151>>0]|0;
            $153 = ($152<<24>>24)>(-65);
            if ($153) {
             $$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D = $151;
            } else {
             label = 60;
             break;
            }
           }
           $147 = ($$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D|0)==(5100|0);
           if (!($147)) {
            $rhsc$i$i$i$i$i$i$i$i$i = HEAP8[$$pre$phi$i$ph$i$i$i$i$i$i$i$i$i$i$iZ2D>>0]|0;
            $148 = ($rhsc$i$i$i$i$i$i$i$i$i<<24>>24)==(69);
            if (!($148)) {
             label = 55;
             break;
            }
           }
           $switch3640$i$i$i$i$i$i = ($symname$sroa$5$1$i$i$i>>>0)<(4);
           if ($switch3640$i$i$i$i$i$i) {
            label = 54;
            break L74;
           }
           $160 = (($117) + ($149)|0);
           $161 = HEAP8[$160>>0]|0;
           $162 = ($161<<24>>24)>(-65);
           if ($162) {
            $$sink2054$i$i$i$i$i$i = 3;$inner$sroa$14$1$in$i$i$i$i$i$i = $149;
            label = 66;
           } else {
            label = 54;
            break L74;
           }
          } else {
           label = 60;
          }
         } else {
          label = 55;
         }
        } while(0);
        if ((label|0) == 55) {
         label = 0;
         $163 = ($symname$sroa$5$1$i$i$i>>>0)>(3);
         if ($163) {
          label = 60;
         } else {
          label = 92;
         }
        }
        do {
         if ((label|0) == 60) {
          label = 0;
          $171 = ((($117)) + 2|0);
          $172 = HEAP8[$171>>0]|0;
          $173 = ($172<<24>>24)>(-65);
          if ($173) {
           $174 = ($117|0)==(5104|0);
           if (!($174)) {
            $175 = (_memcmp(5104,$117,2)|0);
            $176 = ($175|0)==(0);
            if (!($176)) {
             label = 92;
             break;
            }
           }
           $166 = (($symname$sroa$5$1$i$i$i) + -1)|0;
           $167 = ($166|0)==(0);
           if ($167) {
            $$pre$phi$i$ph$i$i$i$i$i825$i$i$i$i$i$iZ2D = $117;
           } else {
            $168 = (($117) + ($166)|0);
            $169 = HEAP8[$168>>0]|0;
            $170 = ($169<<24>>24)>(-65);
            if ($170) {
             $$pre$phi$i$ph$i$i$i$i$i825$i$i$i$i$i$iZ2D = $168;
            } else {
             label = 92;
             break;
            }
           }
           $164 = ($$pre$phi$i$ph$i$i$i$i$i825$i$i$i$i$i$iZ2D|0)==(5100|0);
           if (!($164)) {
            $rhsc$i$i$i827$i$i$i$i$i$i = HEAP8[$$pre$phi$i$ph$i$i$i$i$i825$i$i$i$i$i$iZ2D>>0]|0;
            $165 = ($rhsc$i$i$i827$i$i$i$i$i$i<<24>>24)==(69);
            if (!($165)) {
             label = 92;
             break;
            }
           }
           $switch$i129$i$i$i$i$i = ($symname$sroa$5$1$i$i$i>>>0)<(3);
           if ($switch$i129$i$i$i$i$i) {
            label = 65;
            break L74;
           }
           $177 = (($117) + ($166)|0);
           $178 = HEAP8[$177>>0]|0;
           $179 = ($178<<24>>24)>(-65);
           if ($179) {
            $$sink2054$i$i$i$i$i$i = 2;$inner$sroa$14$1$in$i$i$i$i$i$i = $symname$sroa$5$1$i$i$i;
            label = 66;
           } else {
            label = 65;
            break L74;
           }
          } else {
           label = 92;
          }
         }
        } while(0);
        L134: do {
         if ((label|0) == 66) {
          label = 0;
          $180 = (($117) + ($$sink2054$i$i$i$i$i$i)|0);
          $inner$sroa$14$1$i$i$i$i$i$i = (($inner$sroa$14$1$in$i$i$i$i$i$i) + -3)|0;
          $181 = (($180) + ($inner$sroa$14$1$i$i$i$i$i$i)|0);
          $182 = $180;
          while(1) {
           $183 = ($182|0)==($181|0);
           if ($183) {
            break;
           } else {
            $187 = $182;$i$02668$i$i$i$i$i$i = 0;
           }
           while(1) {
            $186 = ((($187)) + 1|0);
            $185 = HEAP8[$187>>0]|0;
            $188 = ($185<<24>>24)>(-1);
            do {
             if ($188) {
              $184 = $185&255;
              $225 = $186;$_57$sroa$5$2$ph$i$i$i$i$i$i = $184;
             } else {
              $189 = $185 & 31;
              $190 = $189&255;
              $191 = ($186|0)==($181|0);
              if ($191) {
               $198 = $181;$_0$0$i20$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $192 = ((($187)) + 2|0);
               $193 = HEAP8[$186>>0]|0;
               $phitmp$i$i$i$i$i$i$i$i$i = $193 & 63;
               $198 = $192;$_0$0$i20$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i;
              }
              $194 = $190 << 6;
              $195 = $_0$0$i20$i$i$i$i$i$i$i$i$i&255;
              $196 = $195 | $194;
              $197 = ($185&255)>(223);
              if (!($197)) {
               $225 = $198;$_57$sroa$5$2$ph$i$i$i$i$i$i = $196;
               break;
              }
              $199 = ($198|0)==($181|0);
              if ($199) {
               $208 = $181;$_0$0$i14$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $200 = ((($198)) + 1|0);
               $201 = HEAP8[$198>>0]|0;
               $phitmp26$i$i$i$i$i$i$i$i$i = $201 & 63;
               $208 = $200;$_0$0$i14$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i;
              }
              $202 = $195 << 6;
              $203 = $_0$0$i14$i$i$i$i$i$i$i$i$i&255;
              $204 = $203 | $202;
              $205 = $190 << 12;
              $206 = $204 | $205;
              $207 = ($185&255)>(239);
              if (!($207)) {
               $225 = $208;$_57$sroa$5$2$ph$i$i$i$i$i$i = $206;
               break;
              }
              $209 = ($208|0)==($181|0);
              if ($209) {
               $967 = $181;$_0$0$i9$i$i$i$i$i$i$i$i$i = 0;
              } else {
               $210 = ((($208)) + 1|0);
               $211 = HEAP8[$208>>0]|0;
               $phitmp27$i$i$i$i$i$i$i$i$i = $211 & 63;
               $967 = $210;$_0$0$i9$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i;
              }
              $212 = $190 << 18;
              $213 = $212 & 1835008;
              $214 = $204 << 6;
              $215 = $_0$0$i9$i$i$i$i$i$i$i$i$i&255;
              $216 = $214 | $213;
              $217 = $216 | $215;
              $225 = $967;$_57$sroa$5$2$ph$i$i$i$i$i$i = $217;
             }
            } while(0);
            $$off$i$i$i$i$i$i$i = (($_57$sroa$5$2$ph$i$i$i$i$i$i) + -48)|0;
            $218 = ($$off$i$i$i$i$i$i$i>>>0)<(10);
            if (!($218)) {
             $219 = ($_57$sroa$5$2$ph$i$i$i$i$i$i>>>0)>(127);
             if (!($219)) {
              $$lcssa969$i$i$i$i$i = $225;$i$0$lcssa$i$i$i$i$i$i = $i$02668$i$i$i$i$i$i;
              break;
             }
             $220 = (__ZN11std_unicode6tables16general_category1N17h243d5a2ec55a0fcfE($_57$sroa$5$2$ph$i$i$i$i$i$i)|0);
             if (!($220)) {
              $$lcssa969$i$i$i$i$i = $225;$i$0$lcssa$i$i$i$i$i$i = $i$02668$i$i$i$i$i$i;
              break;
             }
            }
            $222 = ($i$02668$i$i$i$i$i$i*10)|0;
            $223 = (($222) + -48)|0;
            $224 = (($223) + ($_57$sroa$5$2$ph$i$i$i$i$i$i))|0;
            $226 = ($225|0)==($181|0);
            if ($226) {
             $$lcssa969$i$i$i$i$i = $181;$i$0$lcssa$i$i$i$i$i$i = $224;
             break;
            } else {
             $187 = $225;$i$02668$i$i$i$i$i$i = $224;
            }
           }
           $221 = ($i$0$lcssa$i$i$i$i$i$i|0)==(0);
           if ($221) {
            label = 84;
            break;
           }
           $228 = (($i$0$lcssa$i$i$i$i$i$i) + -1)|0;
           $229 = ($228|0)==(0);
           L161: do {
            if ($229) {
             $968 = $$lcssa969$i$i$i$i$i;$accum$0$lcssa$i$i$i$i$i$i$i$i = 0;
            } else {
             $231 = $$lcssa969$i$i$i$i$i;$accum$09$i$i$i$i$i$i$i$i = 0;$iter$sroa$4$08$i$i$i$i$i$i$i$i = $228;
             while(1) {
              $230 = (($iter$sroa$4$08$i$i$i$i$i$i$i$i) + -1)|0;
              $232 = ($231|0)==($181|0);
              if ($232) {
               $968 = $181;$accum$0$lcssa$i$i$i$i$i$i$i$i = $accum$09$i$i$i$i$i$i$i$i;
               break L161;
              }
              $233 = ((($231)) + 1|0);
              $234 = HEAP8[$231>>0]|0;
              $235 = ($234<<24>>24)>(-1);
              do {
               if ($235) {
                $969 = $233;
               } else {
                $236 = ($233|0)==($181|0);
                if ($236) {
                 $969 = $181;
                 break;
                }
                $237 = ((($231)) + 2|0);
                $238 = ($234&255)<(224);
                $239 = ($237|0)==($181|0);
                $or$cond13$i$i$i$i$i$i$i$i = $239 | $238;
                $240 = ((($231)) + 3|0);
                $241 = ($234&255)<(240);
                $242 = ($240|0)==($181|0);
                $or$cond$i$i$i$i$i$i$i$i = $242 | $241;
                $243 = ((($231)) + 4|0);
                $$$i$i$i$i$i$i = $or$cond$i$i$i$i$i$i$i$i ? $240 : $243;
                $$$$i$i$i$i$i$i = $or$cond13$i$i$i$i$i$i$i$i ? $237 : $$$i$i$i$i$i$i;
                $969 = $$$$i$i$i$i$i$i;
               }
              } while(0);
              $244 = (($accum$09$i$i$i$i$i$i$i$i) + 1)|0;
              $245 = ($230|0)==(0);
              if ($245) {
               $968 = $969;$accum$0$lcssa$i$i$i$i$i$i$i$i = $244;
               break;
              } else {
               $231 = $969;$accum$09$i$i$i$i$i$i$i$i = $244;$iter$sroa$4$08$i$i$i$i$i$i$i$i = $230;
              }
             }
            }
           } while(0);
           $246 = ($accum$0$lcssa$i$i$i$i$i$i$i$i|0)==($228|0);
           if ($246) {
            $182 = $968;
           } else {
            label = 92;
            break L134;
           }
          }
          if ((label|0) == 84) {
           label = 0;
           $227 = ($$lcssa969$i$i$i$i$i|0)==($181|0);
           if (!($227)) {
            label = 92;
            break;
           }
          }
          if ($94) {
           __ZN4core3str7pattern11StrSearcher3new17hc86c75e217a0025cE($split$i$i$i$i$i$i,$180,$inner$sroa$14$1$i$i$i$i$i$i,5106,3);
           HEAP32[$_7$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2] = 0;
           HEAP32[$_7$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2] = $inner$sroa$14$1$i$i$i$i$i$i;
           HEAP8[$_7$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 1;
           HEAP8[$_7$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 0;
           HEAP32[$_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = 1;
           __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h3cc9ccc8500eac01E($_114$i$i$i$i$i$i,$split$i$i$i$i$i$i);
           $255 = HEAP32[$_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2]|0;
           L175: do {
            switch ($255|0) {
            case 0:  {
             HEAP32[$_116$i$i$i$i$i$i>>2] = 0;
             break;
            }
            case 1:  {
             HEAP32[$_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = 0;
             $256 = HEAP8[$_7$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0]|0;
             $257 = ($256<<24>>24)==(0);
             do {
              if ($257) {
               $258 = HEAP8[$_7$sroa$6$0$$sroa_idx$i$i$i$i$i$i$i$i>>0]|0;
               $259 = ($258<<24>>24)==(0);
               if ($259) {
                $260 = HEAP32[$_7$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2]|0;
                $261 = HEAP32[$_7$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2]|0;
                $not$$i$i$i899$i$i$i$i$i$i = ($260|0)==($261|0);
                if ($not$$i$i$i899$i$i$i$i$i$i) {
                 break;
                } else {
                 $264 = $261;$266 = $260;
                }
               } else {
                $$pre$i$i$i895$i$i$i$i$i$i = HEAP32[$_7$sroa$4$0$$sroa_idx24$i$i$i$i$i$i$i$i>>2]|0;
                $$pre5$i$i$i897$i$i$i$i$i$i = HEAP32[$_7$sroa$5$0$$sroa_idx26$i$i$i$i$i$i$i$i>>2]|0;
                $264 = $$pre$i$i$i895$i$i$i$i$i$i;$266 = $$pre5$i$i$i897$i$i$i$i$i$i;
               }
               HEAP8[$_7$sroa$7$0$$sroa_idx$i$i$i$i$i$i$i$i>>0] = 1;
               $262 = HEAP32[$81>>2]|0;
               $263 = (($262) + ($264)|0);
               $265 = (($266) - ($264))|0;
               HEAP32[$_116$i$i$i$i$i$i>>2] = $263;
               HEAP32[$82>>2] = $265;
               break L175;
              }
             } while(0);
             HEAP32[$_116$i$i$i$i$i$i>>2] = 0;
             break;
            }
            default: {
             $267 = (($255) + -1)|0;
             HEAP32[$_7$sroa$9$0$$sroa_idx30$i$i$i$i$i$i$i$i>>2] = $267;
             __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h3cc9ccc8500eac01E($_116$i$i$i$i$i$i,$split$i$i$i$i$i$i);
            }
            }
           } while(0);
           $_113$sroa$0$0$copyload$i$i$i$i$i$i = HEAP32[$_114$i$i$i$i$i$i>>2]|0;
           $_113$sroa$5$0$copyload$i$i$i$i$i$i = HEAP32[$_113$sroa$5$0$$sroa_idx170$i$i$i$i$i$i>>2]|0;
           $268 = $_116$i$i$i$i$i$i;
           $269 = $268;
           $270 = HEAP32[$269>>2]|0;
           $271 = (($268) + 4)|0;
           $272 = $271;
           $273 = HEAP32[$272>>2]|0;
           $274 = ($_113$sroa$0$0$copyload$i$i$i$i$i$i|0)==(0|0);
           L187: do {
            if ($274) {
             $inner$sroa$0$2$i$i$i$i$i$i = $180;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
            } else {
             $276 = ($_113$sroa$5$0$copyload$i$i$i$i$i$i|0)==(16);
             if ($276) {
              $$idx$i$i$i$i$i$i = 0;
             } else {
              $inner$sroa$0$2$i$i$i$i$i$i = $180;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
              break;
             }
             while(1) {
              $277 = ($$idx$i$i$i$i$i$i|0)==(16);
              if ($277) {
               break;
              }
              $$ptr3218$i$i$i$i$i$i = (($_113$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx$i$i$i$i$i$i)|0);
              $$add$i$i$i$i$i$i = (($$idx$i$i$i$i$i$i) + 1)|0;
              $$ptr3223$i$i$i$i$i$i = (($_113$sroa$0$0$copyload$i$i$i$i$i$i) + ($$add$i$i$i$i$i$i)|0);
              $279 = HEAP8[$$ptr3218$i$i$i$i$i$i>>0]|0;
              $280 = ($279<<24>>24)>(-1);
              do {
               if ($280) {
                $278 = $279&255;
                $$idx3210$i$i$i$i$i$i = $$add$i$i$i$i$i$i;$_12$sroa$5$1$ph$i$i$i$i$i$i$i = $278;
               } else {
                $281 = $279 & 31;
                $282 = $281&255;
                $283 = ($$add$i$i$i$i$i$i|0)==(16);
                if ($283) {
                 $$idx3211$i$i$i$i$i$i = 16;$_0$0$i20$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3217$i$i$i$i$i$i = (($$idx$i$i$i$i$i$i) + 2)|0;
                 $284 = HEAP8[$$ptr3223$i$i$i$i$i$i>>0]|0;
                 $phitmp$i$i$i$i$i$i$i$i$i$i = $284 & 63;
                 $$idx3211$i$i$i$i$i$i = $$add3217$i$i$i$i$i$i;$_0$0$i20$i$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i$i;
                }
                $$ptr3220$i$i$i$i$i$i = (($_113$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx3211$i$i$i$i$i$i)|0);
                $285 = $282 << 6;
                $286 = $_0$0$i20$i$i$i$i$i$i$i$i$i$i&255;
                $287 = $286 | $285;
                $288 = ($279&255)>(223);
                if (!($288)) {
                 $$idx3210$i$i$i$i$i$i = $$idx3211$i$i$i$i$i$i;$_12$sroa$5$1$ph$i$i$i$i$i$i$i = $287;
                 break;
                }
                $289 = ($$idx3211$i$i$i$i$i$i|0)==(16);
                if ($289) {
                 $$idx3212$i$i$i$i$i$i = 16;$_0$0$i14$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3216$i$i$i$i$i$i = (($$idx3211$i$i$i$i$i$i) + 1)|0;
                 $290 = HEAP8[$$ptr3220$i$i$i$i$i$i>>0]|0;
                 $phitmp26$i$i$i$i$i$i$i$i$i$i = $290 & 63;
                 $$idx3212$i$i$i$i$i$i = $$add3216$i$i$i$i$i$i;$_0$0$i14$i$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i$i;
                }
                $$ptr3224$i$i$i$i$i$i = (($_113$sroa$0$0$copyload$i$i$i$i$i$i) + ($$idx3212$i$i$i$i$i$i)|0);
                $291 = $286 << 6;
                $292 = $_0$0$i14$i$i$i$i$i$i$i$i$i$i&255;
                $293 = $292 | $291;
                $294 = $282 << 12;
                $295 = $293 | $294;
                $296 = ($279&255)>(239);
                if (!($296)) {
                 $$idx3210$i$i$i$i$i$i = $$idx3212$i$i$i$i$i$i;$_12$sroa$5$1$ph$i$i$i$i$i$i$i = $295;
                 break;
                }
                $297 = ($$idx3212$i$i$i$i$i$i|0)==(16);
                if ($297) {
                 $$idx3213$i$i$i$i$i$i = 16;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0;
                } else {
                 $$add3215$i$i$i$i$i$i = (($$idx3212$i$i$i$i$i$i) + 1)|0;
                 $298 = HEAP8[$$ptr3224$i$i$i$i$i$i>>0]|0;
                 $phitmp27$i$i$i$i$i$i$i$i$i$i = $298 & 63;
                 $$idx3213$i$i$i$i$i$i = $$add3215$i$i$i$i$i$i;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i$i;
                }
                $299 = $282 << 18;
                $300 = $299 & 1835008;
                $301 = $293 << 6;
                $302 = $_0$0$i9$i$i$i$i$i$i$i$i$i$i&255;
                $303 = $301 | $300;
                $304 = $303 | $302;
                $$idx3210$i$i$i$i$i$i = $$idx3213$i$i$i$i$i$i;$_12$sroa$5$1$ph$i$i$i$i$i$i$i = $304;
               }
              } while(0);
              $$off$i$i$i$i$i$i$i$i$i$i$i = (($_12$sroa$5$1$ph$i$i$i$i$i$i$i) + -48)|0;
              $305 = ($$off$i$i$i$i$i$i$i$i$i$i$i>>>0)<(10);
              do {
               if ($305) {
                $$sink$i$i$i$i$i$i$i$i$i$i$i = -48;
               } else {
                $$off1$i$i$i$i$i$i$i$i$i$i$i = (($_12$sroa$5$1$ph$i$i$i$i$i$i$i) + -97)|0;
                $306 = ($$off1$i$i$i$i$i$i$i$i$i$i$i>>>0)<(26);
                if ($306) {
                 $$sink$i$i$i$i$i$i$i$i$i$i$i = -87;
                 break;
                }
                $$off2$i$i$i$i$i$i$i$i$i$i$i = (($_12$sroa$5$1$ph$i$i$i$i$i$i$i) + -65)|0;
                $307 = ($$off2$i$i$i$i$i$i$i$i$i$i$i>>>0)<(26);
                if ($307) {
                 $$sink$i$i$i$i$i$i$i$i$i$i$i = -55;
                } else {
                 $inner$sroa$0$2$i$i$i$i$i$i = $180;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
                 break L187;
                }
               }
              } while(0);
              $308 = (($$sink$i$i$i$i$i$i$i$i$i$i$i) + ($_12$sroa$5$1$ph$i$i$i$i$i$i$i))|0;
              $309 = ($308>>>0)<(16);
              if ($309) {
               $$idx$i$i$i$i$i$i = $$idx3210$i$i$i$i$i$i;
              } else {
               $inner$sroa$0$2$i$i$i$i$i$i = $180;$inner$sroa$14$2$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
               break L187;
              }
             }
             $310 = $270;
             $311 = ($270|0)!=(0);
             $$sink3$i$i$i$i$i$i$i = $311 ? $310 : 13480;
             $$sink$i$i$i$i$i$i$i = $311 ? $273 : 0;
             $inner$sroa$0$2$i$i$i$i$i$i = $$sink3$i$i$i$i$i$i$i;$inner$sroa$14$2$i$i$i$i$i$i = $$sink$i$i$i$i$i$i$i;
            }
           } while(0);
           $inner$sroa$0$5$ph$i$i$i$i$i$i = $inner$sroa$0$2$i$i$i$i$i$i;$inner$sroa$14$5$ph$i$i$i$i$i$i = $inner$sroa$14$2$i$i$i$i$i$i;
          } else {
           $inner$sroa$0$5$ph$i$i$i$i$i$i = $180;$inner$sroa$14$5$ph$i$i$i$i$i$i = $inner$sroa$14$1$i$i$i$i$i$i;
          }
          $275 = ($inner$sroa$14$5$ph$i$i$i$i$i$i|0)==(0);
          if ($275) {
           label = 448;
          } else {
           $first$0$off02665$i$i$i$i$i$i = 1;$inner$sroa$0$52667$i$i$i$i$i$i = $inner$sroa$0$5$ph$i$i$i$i$i$i;$inner$sroa$14$52666$i$i$i$i$i$i = $inner$sroa$14$5$ph$i$i$i$i$i$i;
           L214: while(1) {
            if (!($first$0$off02665$i$i$i$i$i$i)) {
             $312 = HEAP32[$95>>2]|0;
             FUNCTION_TABLE_viiii[$312 & 255]($_142$i$i$i$i$i$i,$1,5109,2);
             $313 = HEAP32[$_142$i$i$i$i$i$i>>2]|0;
             $cond119$i$i$i$i$i$i = ($313|0)==(0);
             if (!($cond119$i$i$i$i$i$i)) {
              label = 130;
              break;
             }
            }
            $314 = (($inner$sroa$0$52667$i$i$i$i$i$i) + ($inner$sroa$14$52666$i$i$i$i$i$i)|0);
            $$pre$i$i$i$i$i = HEAP8[$inner$sroa$0$52667$i$i$i$i$i$i>>0]|0;
            $$sink1282577$i$i$i$i$i$i = $inner$sroa$0$52667$i$i$i$i$i$i;$$sink2578$i$i$i$i$i$i = $inner$sroa$14$52666$i$i$i$i$i$i;$322 = $$pre$i$i$i$i$i;$336 = $314;
            while(1) {
             $323 = ((($$sink1282577$i$i$i$i$i$i)) + 1|0);
             $324 = ($322<<24>>24)>(-1);
             do {
              if ($324) {
               $321 = $322&255;
               $_159$sroa$4$2$ph$i$i$i$i$i$i = $321;
              } else {
               $325 = $322 & 31;
               $326 = $325&255;
               $327 = ($$sink2578$i$i$i$i$i$i|0)==(1);
               if ($327) {
                $334 = $336;$_0$0$i20$i$i940$i$i$i$i$i$i = 0;
               } else {
                $328 = ((($$sink1282577$i$i$i$i$i$i)) + 2|0);
                $329 = HEAP8[$323>>0]|0;
                $phitmp$i$i938$i$i$i$i$i$i = $329 & 63;
                $334 = $328;$_0$0$i20$i$i940$i$i$i$i$i$i = $phitmp$i$i938$i$i$i$i$i$i;
               }
               $330 = $326 << 6;
               $331 = $_0$0$i20$i$i940$i$i$i$i$i$i&255;
               $332 = $331 | $330;
               $333 = ($322&255)>(223);
               if (!($333)) {
                $_159$sroa$4$2$ph$i$i$i$i$i$i = $332;
                break;
               }
               $335 = ($334|0)==($336|0);
               if ($335) {
                $345 = $336;$_0$0$i14$i$i945$i$i$i$i$i$i = 0;
               } else {
                $337 = ((($334)) + 1|0);
                $338 = HEAP8[$334>>0]|0;
                $phitmp26$i$i943$i$i$i$i$i$i = $338 & 63;
                $345 = $337;$_0$0$i14$i$i945$i$i$i$i$i$i = $phitmp26$i$i943$i$i$i$i$i$i;
               }
               $339 = $331 << 6;
               $340 = $_0$0$i14$i$i945$i$i$i$i$i$i&255;
               $341 = $340 | $339;
               $342 = $326 << 12;
               $343 = $341 | $342;
               $344 = ($322&255)>(239);
               if (!($344)) {
                $_159$sroa$4$2$ph$i$i$i$i$i$i = $343;
                break;
               }
               $346 = ($345|0)==($336|0);
               if ($346) {
                $_0$0$i9$i$i950$i$i$i$i$i$i = 0;
               } else {
                $347 = HEAP8[$345>>0]|0;
                $phitmp27$i$i948$i$i$i$i$i$i = $347 & 63;
                $_0$0$i9$i$i950$i$i$i$i$i$i = $phitmp27$i$i948$i$i$i$i$i$i;
               }
               $348 = $326 << 18;
               $349 = $348 & 1835008;
               $350 = $341 << 6;
               $351 = $_0$0$i9$i$i950$i$i$i$i$i$i&255;
               $352 = $350 | $349;
               $353 = $352 | $351;
               $_159$sroa$4$2$ph$i$i$i$i$i$i = $353;
              }
             } while(0);
             $$off$i960$i$i$i$i$i$i = (($_159$sroa$4$2$ph$i$i$i$i$i$i) + -48)|0;
             $354 = ($$off$i960$i$i$i$i$i$i>>>0)<(10);
             if (!($354)) {
              $355 = ($_159$sroa$4$2$ph$i$i$i$i$i$i>>>0)>(127);
              if (!($355)) {
               break;
              }
              $356 = (__ZN11std_unicode6tables16general_category1N17h243d5a2ec55a0fcfE($_159$sroa$4$2$ph$i$i$i$i$i$i)|0);
              if (!($356)) {
               break;
              }
             }
             switch ($$sink2578$i$i$i$i$i$i|0) {
             case 1:  {
              label = 142;
              break L74;
              break;
             }
             case 0:  {
              $$sink2578$lcssa2728$i$i$i$i$i$i = 0;
              label = 164;
              break L74;
              break;
             }
             default: {
             }
             }
             $379 = HEAP8[$323>>0]|0;
             $380 = ($379<<24>>24)>(-65);
             if (!($380)) {
              $$sink2578$lcssa2728$i$i$i$i$i$i = $$sink2578$i$i$i$i$i$i;
              label = 164;
              break L74;
             }
             $381 = (($$sink2578$i$i$i$i$i$i) + -1)|0;
             $382 = (($323) + ($381)|0);
             $383 = ($381|0)==(0);
             if ($383) {
              label = 142;
              break L74;
             } else {
              $$sink1282577$i$i$i$i$i$i = $323;$$sink2578$i$i$i$i$i$i = $381;$322 = $379;$336 = $382;
             }
            }
            $357 = (($inner$sroa$14$52666$i$i$i$i$i$i) - ($$sink2578$i$i$i$i$i$i))|0;
            $358 = ($357|0)==(0);
            $359 = ($$sink2578$i$i$i$i$i$i|0)==(0);
            $or$cond$i$i$i$i965$i$i$i$i$i$i = $359 | $358;
            if (!($or$cond$i$i$i$i965$i$i$i$i$i$i)) {
             $360 = ($inner$sroa$14$52666$i$i$i$i$i$i>>>0)>($357>>>0);
             if (!($360)) {
              label = 149;
              break L74;
             }
             $361 = (($inner$sroa$0$52667$i$i$i$i$i$i) + ($357)|0);
             $362 = HEAP8[$361>>0]|0;
             $363 = ($362<<24>>24)>(-65);
             if (!($363)) {
              label = 149;
              break L74;
             }
            }
            __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h7744311cd00acfdaE($_168$i$i$i$i$i$i,$inner$sroa$0$52667$i$i$i$i$i$i,$357);
            $self$sroa$0$0$copyload$i972$i$i$i$i$i$i = HEAP8[$_168$i$i$i$i$i$i>>0]|0;
            $cond$i973$i$i$i$i$i$i = ($self$sroa$0$0$copyload$i972$i$i$i$i$i$i<<24>>24)==(0);
            if (!($cond$i973$i$i$i$i$i$i)) {
             label = 151;
             break L74;
            }
            $self$sroa$55$0$copyload$i$i$i$i$i$i$i = HEAP32[$self$sroa$55$0$$sroa_idx6$i$i$i$i$i$i$i>>2]|0;
            $364 = ($self$sroa$55$0$copyload$i$i$i$i$i$i$i|0)==(0);
            $365 = ($$sink2578$i$i$i$i$i$i|0)==($self$sroa$55$0$copyload$i$i$i$i$i$i$i|0);
            $or$cond$i$i$i$i977$i$i$i$i$i$i = $364 | $365;
            if ($or$cond$i$i$i$i977$i$i$i$i$i$i) {
             $$pre$i$i$i978$i$i$i$i$i$i = (($$sink1282577$i$i$i$i$i$i) + ($self$sroa$55$0$copyload$i$i$i$i$i$i$i)|0);
             $$pre$phi$i$ph$i$i2013$i$i$i$i$i$iZ2D = $$pre$i$i$i978$i$i$i$i$i$i;
            } else {
             $366 = ($$sink2578$i$i$i$i$i$i>>>0)>($self$sroa$55$0$copyload$i$i$i$i$i$i$i>>>0);
             if (!($366)) {
              label = 156;
              break L74;
             }
             $367 = (($$sink1282577$i$i$i$i$i$i) + ($self$sroa$55$0$copyload$i$i$i$i$i$i$i)|0);
             $368 = HEAP8[$367>>0]|0;
             $369 = ($368<<24>>24)>(-65);
             if ($369) {
              $$pre$phi$i$ph$i$i2013$i$i$i$i$i$iZ2D = $367;
             } else {
              label = 156;
              break L74;
             }
            }
            $370 = (($$sink2578$i$i$i$i$i$i) - ($self$sroa$55$0$copyload$i$i$i$i$i$i$i))|0;
            $371 = ($self$sroa$55$0$copyload$i$i$i$i$i$i$i|0)==(2);
            do {
             if ($371) {
              label = 160;
             } else {
              $372 = ($self$sroa$55$0$copyload$i$i$i$i$i$i$i>>>0)>(2);
              if ($372) {
               $373 = ((($$sink1282577$i$i$i$i$i$i)) + 2|0);
               $374 = HEAP8[$373>>0]|0;
               $375 = ($374<<24>>24)>(-65);
               if ($375) {
                label = 160;
                break;
               } else {
                $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $$sink1282577$i$i$i$i$i$i;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $self$sroa$55$0$copyload$i$i$i$i$i$i$i;
                label = 169;
                break;
               }
              } else {
               if ($364) {
                break;
               } else {
                $rest2$sroa$0$02587$i$i$i$i$i$i = $$sink1282577$i$i$i$i$i$i;$rest2$sroa$80$02624$i$i$i$i$i$i = 1;
                label = 171;
                break;
               }
              }
             }
            } while(0);
            do {
             if ((label|0) == 160) {
              label = 0;
              $376 = ($$sink1282577$i$i$i$i$i$i|0)==(5111|0);
              if (!($376)) {
               $377 = (_memcmp(5111,$$sink1282577$i$i$i$i$i$i,2)|0);
               $378 = ($377|0)==(0);
               if (!($378)) {
                $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $$sink1282577$i$i$i$i$i$i;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $self$sroa$55$0$copyload$i$i$i$i$i$i$i;
                label = 169;
                break;
               }
              }
              $384 = HEAP8[$323>>0]|0;
              $385 = ($384<<24>>24)>(-65);
              if (!($385)) {
               label = 167;
               break L74;
              }
              $386 = (($self$sroa$55$0$copyload$i$i$i$i$i$i$i) + -1)|0;
              $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i = $323;$rest2$sroa$80$0$ph$ph$i$i$i$i$i$i = $386;
              label = 169;
             }
            } while(0);
            if ((label|0) == 169) {
             label = 0;
             $rest2$sroa$0$02587$i$i$i$i$i$i = $rest2$sroa$0$0$ph$ph$i$i$i$i$i$i;$rest2$sroa$80$02624$i$i$i$i$i$i = $rest2$sroa$80$0$ph$ph$i$i$i$i$i$i;
             label = 171;
            }
            L267: do {
             if ((label|0) == 171) {
              L268: while(1) {
               label = 0;
               $387 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==(1);
               if ($387) {
                label = 173;
               } else {
                $388 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 1|0);
                $389 = HEAP8[$388>>0]|0;
                $390 = ($389<<24>>24)>(-65);
                if ($390) {
                 label = 173;
                } else {
                 label = 209;
                }
               }
               L272: do {
                if ((label|0) == 173) {
                 label = 0;
                 $391 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5113|0);
                 do {
                  if (!($391)) {
                   $rhsc2053$i$i$i$i$i$i = HEAP8[$rest2$sroa$0$02587$i$i$i$i$i$i>>0]|0;
                   $392 = ($rhsc2053$i$i$i$i$i$i<<24>>24)==(46);
                   if ($392) {
                    break;
                   }
                   if (!($387)) {
                    $$phi$trans$insert$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 1|0);
                    $$pre$i$i$i$i$i$i = HEAP8[$$phi$trans$insert$i$i$i$i$i$i>>0]|0;
                    $426 = ($$pre$i$i$i$i$i$i<<24>>24)>(-65);
                    if (!($426)) {
                     label = 209;
                     break L272;
                    }
                   }
                   $427 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5114|0);
                   $428 = ($rhsc2053$i$i$i$i$i$i<<24>>24)==(36);
                   $or$cond$i$i$i$i$i = $427 | $428;
                   if (!($or$cond$i$i$i$i$i)) {
                    label = 209;
                    break L272;
                   }
                   $451 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==(4);
                   do {
                    if ($451) {
                     label = 207;
                    } else {
                     $452 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(4);
                     if ($452) {
                      $453 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                      $454 = HEAP8[$453>>0]|0;
                      $455 = ($454<<24>>24)>(-65);
                      if ($455) {
                       label = 207;
                       break;
                      } else {
                       label = 285;
                       break;
                      }
                     } else {
                      $595 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==(3);
                      if ($595) {
                       $973 = 1;
                       label = 286;
                       break;
                      } else {
                       break L268;
                      }
                     }
                    }
                   } while(0);
                   L286: do {
                    if ((label|0) == 207) {
                     label = 0;
                     $456 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5115|0);
                     do {
                      if (!($456)) {
                       $457 = (_memcmp(5115,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                       $458 = ($457|0)==(0);
                       if ($458) {
                        break;
                       }
                       if (!($451)) {
                        $$phi$trans$insert3164$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                        $$pre3165$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3164$i$i$i$i$i$i>>0]|0;
                        $505 = ($$pre3165$i$i$i$i$i$i<<24>>24)>(-65);
                        if (!($505)) {
                         label = 285;
                         break L286;
                        }
                       }
                       $506 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5120|0);
                       do {
                        if (!($506)) {
                         $507 = (_memcmp(5120,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                         $508 = ($507|0)==(0);
                         if ($508) {
                          break;
                         }
                         if (!($451)) {
                          $$phi$trans$insert3166$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                          $$pre3167$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3166$i$i$i$i$i$i>>0]|0;
                          $520 = ($$pre3167$i$i$i$i$i$i<<24>>24)>(-65);
                          if (!($520)) {
                           label = 285;
                           break L286;
                          }
                         }
                         $521 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5125|0);
                         do {
                          if (!($521)) {
                           $522 = (_memcmp(5125,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                           $523 = ($522|0)==(0);
                           if ($523) {
                            break;
                           }
                           if (!($451)) {
                            $$phi$trans$insert3168$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                            $$pre3169$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3168$i$i$i$i$i$i>>0]|0;
                            $535 = ($$pre3169$i$i$i$i$i$i<<24>>24)>(-65);
                            if (!($535)) {
                             label = 285;
                             break L286;
                            }
                           }
                           $536 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5130|0);
                           do {
                            if (!($536)) {
                             $537 = (_memcmp(5130,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                             $538 = ($537|0)==(0);
                             if ($538) {
                              break;
                             }
                             if (!($451)) {
                              $$phi$trans$insert3170$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                              $$pre3171$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3170$i$i$i$i$i$i>>0]|0;
                              $550 = ($$pre3171$i$i$i$i$i$i<<24>>24)>(-65);
                              if (!($550)) {
                               label = 285;
                               break L286;
                              }
                             }
                             $551 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5135|0);
                             do {
                              if (!($551)) {
                               $552 = (_memcmp(5135,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                               $553 = ($552|0)==(0);
                               if ($553) {
                                break;
                               }
                               if (!($451)) {
                                $$phi$trans$insert3172$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                                $$pre3173$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3172$i$i$i$i$i$i>>0]|0;
                                $565 = ($$pre3173$i$i$i$i$i$i<<24>>24)>(-65);
                                if (!($565)) {
                                 label = 285;
                                 break L286;
                                }
                               }
                               $566 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5140|0);
                               do {
                                if (!($566)) {
                                 $567 = (_memcmp(5140,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                                 $568 = ($567|0)==(0);
                                 if ($568) {
                                  break;
                                 }
                                 if (!($451)) {
                                  $$phi$trans$insert3174$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                                  $$pre3175$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3174$i$i$i$i$i$i>>0]|0;
                                  $580 = ($$pre3175$i$i$i$i$i$i<<24>>24)>(-65);
                                  if (!($580)) {
                                   label = 285;
                                   break L286;
                                  }
                                 }
                                 $581 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5145|0);
                                 if (!($581)) {
                                  $582 = (_memcmp(5145,$rest2$sroa$0$02587$i$i$i$i$i$i,4)|0);
                                  $583 = ($582|0)==(0);
                                  if (!($583)) {
                                   label = 285;
                                   break L286;
                                  }
                                 }
                                 $593 = HEAP32[$95>>2]|0;
                                 FUNCTION_TABLE_viiii[$593 & 255]($_379$i$i$i$i$i$i,$1,5149,1);
                                 $594 = HEAP32[$_379$i$i$i$i$i$i>>2]|0;
                                 $cond90$i$i$i$i$i$i = ($594|0)==(0);
                                 if (!($cond90$i$i$i$i$i$i)) {
                                  label = 292;
                                  break L214;
                                 }
                                 $$pre$i$i$i1310$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                                 if (!($451)) {
                                  $602 = HEAP8[$$pre$i$i$i1310$i$i$i$i$i$i>>0]|0;
                                  $603 = ($602<<24>>24)>(-65);
                                  if (!($603)) {
                                   label = 290;
                                   break L74;
                                  }
                                 }
                                 $604 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1310$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $604;
                                 break L272;
                                }
                               } while(0);
                               $578 = HEAP32[$95>>2]|0;
                               FUNCTION_TABLE_viiii[$578 & 255]($_357$i$i$i$i$i$i,$1,5144,1);
                               $579 = HEAP32[$_357$i$i$i$i$i$i>>2]|0;
                               $cond93$i$i$i$i$i$i = ($579|0)==(0);
                               if (!($cond93$i$i$i$i$i$i)) {
                                label = 282;
                                break L214;
                               }
                               $$pre$i$i$i1281$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                               if (!($451)) {
                                $584 = HEAP8[$$pre$i$i$i1281$i$i$i$i$i$i>>0]|0;
                                $585 = ($584<<24>>24)>(-65);
                                if (!($585)) {
                                 label = 280;
                                 break L74;
                                }
                               }
                               $586 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                               $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1281$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $586;
                               break L272;
                              }
                             } while(0);
                             $563 = HEAP32[$95>>2]|0;
                             FUNCTION_TABLE_viiii[$563 & 255]($_335$i$i$i$i$i$i,$1,5139,1);
                             $564 = HEAP32[$_335$i$i$i$i$i$i>>2]|0;
                             $cond96$i$i$i$i$i$i = ($564|0)==(0);
                             if (!($cond96$i$i$i$i$i$i)) {
                              label = 272;
                              break L214;
                             }
                             $$pre$i$i$i1252$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                             if (!($451)) {
                              $569 = HEAP8[$$pre$i$i$i1252$i$i$i$i$i$i>>0]|0;
                              $570 = ($569<<24>>24)>(-65);
                              if (!($570)) {
                               label = 270;
                               break L74;
                              }
                             }
                             $571 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                             $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1252$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $571;
                             break L272;
                            }
                           } while(0);
                           $548 = HEAP32[$95>>2]|0;
                           FUNCTION_TABLE_viiii[$548 & 255]($_313$i$i$i$i$i$i,$1,5134,1);
                           $549 = HEAP32[$_313$i$i$i$i$i$i>>2]|0;
                           $cond99$i$i$i$i$i$i = ($549|0)==(0);
                           if (!($cond99$i$i$i$i$i$i)) {
                            label = 262;
                            break L214;
                           }
                           $$pre$i$i$i1223$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                           if (!($451)) {
                            $554 = HEAP8[$$pre$i$i$i1223$i$i$i$i$i$i>>0]|0;
                            $555 = ($554<<24>>24)>(-65);
                            if (!($555)) {
                             label = 260;
                             break L74;
                            }
                           }
                           $556 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                           $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1223$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $556;
                           break L272;
                          }
                         } while(0);
                         $533 = HEAP32[$95>>2]|0;
                         FUNCTION_TABLE_viiii[$533 & 255]($_291$i$i$i$i$i$i,$1,5129,1);
                         $534 = HEAP32[$_291$i$i$i$i$i$i>>2]|0;
                         $cond102$i$i$i$i$i$i = ($534|0)==(0);
                         if (!($cond102$i$i$i$i$i$i)) {
                          label = 252;
                          break L214;
                         }
                         $$pre$i$i$i1194$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                         if (!($451)) {
                          $539 = HEAP8[$$pre$i$i$i1194$i$i$i$i$i$i>>0]|0;
                          $540 = ($539<<24>>24)>(-65);
                          if (!($540)) {
                           label = 250;
                           break L74;
                          }
                         }
                         $541 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                         $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1194$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $541;
                         break L272;
                        }
                       } while(0);
                       $518 = HEAP32[$95>>2]|0;
                       FUNCTION_TABLE_viiii[$518 & 255]($_269$i$i$i$i$i$i,$1,5124,1);
                       $519 = HEAP32[$_269$i$i$i$i$i$i>>2]|0;
                       $cond105$i$i$i$i$i$i = ($519|0)==(0);
                       if (!($cond105$i$i$i$i$i$i)) {
                        label = 242;
                        break L214;
                       }
                       $$pre$i$i$i1165$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                       if (!($451)) {
                        $524 = HEAP8[$$pre$i$i$i1165$i$i$i$i$i$i>>0]|0;
                        $525 = ($524<<24>>24)>(-65);
                        if (!($525)) {
                         label = 240;
                         break L74;
                        }
                       }
                       $526 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                       $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1165$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $526;
                       break L272;
                      }
                     } while(0);
                     $503 = HEAP32[$95>>2]|0;
                     FUNCTION_TABLE_viiii[$503 & 255]($_247$i$i$i$i$i$i,$1,5119,1);
                     $504 = HEAP32[$_247$i$i$i$i$i$i>>2]|0;
                     $cond108$i$i$i$i$i$i = ($504|0)==(0);
                     if (!($cond108$i$i$i$i$i$i)) {
                      label = 232;
                      break L214;
                     }
                     $$pre$i$i$i1136$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 4|0);
                     if (!($451)) {
                      $509 = HEAP8[$$pre$i$i$i1136$i$i$i$i$i$i>>0]|0;
                      $510 = ($509<<24>>24)>(-65);
                      if (!($510)) {
                       label = 230;
                       break L74;
                      }
                     }
                     $511 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -4)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$i$i$i1136$i$i$i$i$i$i;$rest2$sroa$80$0$be$i$i$i$i$i$i = $511;
                     break L272;
                    }
                   } while(0);
                   if ((label|0) == 285) {
                    label = 0;
                    $596 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 3|0);
                    $597 = HEAP8[$596>>0]|0;
                    $598 = ($597<<24>>24)>(-65);
                    if ($598) {
                     $973 = 0;
                     label = 286;
                    }
                   }
                   do {
                    if ((label|0) == 286) {
                     label = 0;
                     $599 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5150|0);
                     if (!($599)) {
                      $600 = (_memcmp(5150,$rest2$sroa$0$02587$i$i$i$i$i$i,3)|0);
                      $601 = ($600|0)==(0);
                      if (!($601)) {
                       break;
                      }
                     }
                     $611 = HEAP32[$95>>2]|0;
                     FUNCTION_TABLE_viiii[$611 & 255]($_401$i$i$i$i$i$i,$1,5153,1);
                     $612 = HEAP32[$_401$i$i$i$i$i$i>>2]|0;
                     $cond87$i$i$i$i$i$i = ($612|0)==(0);
                     if (!($cond87$i$i$i$i$i$i)) {
                      label = 305;
                      break L214;
                     }
                     if ($973) {
                      $$pre$i$i$i1339$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 3|0);
                      $$pre$phi$i$ph$i$i1344$i$i$i$i$i$iZ2D = $$pre$i$i$i1339$i$i$i$i$i$i;
                     } else {
                      $621 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(3);
                      if (!($621)) {
                       label = 303;
                       break L74;
                      }
                      $622 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 3|0);
                      $623 = HEAP8[$622>>0]|0;
                      $624 = ($623<<24>>24)>(-65);
                      if ($624) {
                       $$pre$phi$i$ph$i$i1344$i$i$i$i$i$iZ2D = $622;
                      } else {
                       label = 303;
                       break L74;
                      }
                     }
                     $625 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -3)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1344$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $625;
                     break L272;
                    }
                   } while(0);
                   $613 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==(5);
                   if ($613) {
                    $974 = 1;
                   } else {
                    $614 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                    if (!($614)) {
                     break L268;
                    }
                    $615 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                    $616 = HEAP8[$615>>0]|0;
                    $617 = ($616<<24>>24)>(-65);
                    if ($617) {
                     $974 = 0;
                    } else {
                     break L268;
                    }
                   }
                   $618 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5154|0);
                   do {
                    if (!($618)) {
                     $619 = (_memcmp(5154,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                     $620 = ($619|0)==(0);
                     if ($620) {
                      break;
                     }
                     if ($974) {
                      $975 = 1;
                     } else {
                      $634 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                      if (!($634)) {
                       break L268;
                      }
                      $$phi$trans$insert3176$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                      $$pre3177$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3176$i$i$i$i$i$i>>0]|0;
                      $635 = ($$pre3177$i$i$i$i$i$i<<24>>24)>(-65);
                      if ($635) {
                       $975 = 0;
                      } else {
                       break L268;
                      }
                     }
                     $636 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5160|0);
                     do {
                      if (!($636)) {
                       $637 = (_memcmp(5160,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                       $638 = ($637|0)==(0);
                       if ($638) {
                        break;
                       }
                       if ($975) {
                        $976 = 1;
                       } else {
                        $652 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                        if (!($652)) {
                         break L268;
                        }
                        $$phi$trans$insert3178$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                        $$pre3179$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3178$i$i$i$i$i$i>>0]|0;
                        $653 = ($$pre3179$i$i$i$i$i$i<<24>>24)>(-65);
                        if ($653) {
                         $976 = 0;
                        } else {
                         break L268;
                        }
                       }
                       $654 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5166|0);
                       do {
                        if (!($654)) {
                         $655 = (_memcmp(5166,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                         $656 = ($655|0)==(0);
                         if ($656) {
                          break;
                         }
                         if ($976) {
                          $977 = 1;
                         } else {
                          $670 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                          if (!($670)) {
                           break L268;
                          }
                          $$phi$trans$insert3180$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                          $$pre3181$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3180$i$i$i$i$i$i>>0]|0;
                          $671 = ($$pre3181$i$i$i$i$i$i<<24>>24)>(-65);
                          if ($671) {
                           $977 = 0;
                          } else {
                           break L268;
                          }
                         }
                         $672 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5172|0);
                         do {
                          if (!($672)) {
                           $673 = (_memcmp(5172,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                           $674 = ($673|0)==(0);
                           if ($674) {
                            break;
                           }
                           if ($977) {
                            $978 = 1;
                           } else {
                            $688 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                            if (!($688)) {
                             break L268;
                            }
                            $$phi$trans$insert3182$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                            $$pre3183$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3182$i$i$i$i$i$i>>0]|0;
                            $689 = ($$pre3183$i$i$i$i$i$i<<24>>24)>(-65);
                            if ($689) {
                             $978 = 0;
                            } else {
                             break L268;
                            }
                           }
                           $690 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5178|0);
                           do {
                            if (!($690)) {
                             $691 = (_memcmp(5178,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                             $692 = ($691|0)==(0);
                             if ($692) {
                              break;
                             }
                             if ($978) {
                              $979 = 1;
                             } else {
                              $706 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                              if (!($706)) {
                               break L268;
                              }
                              $$phi$trans$insert3184$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                              $$pre3185$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3184$i$i$i$i$i$i>>0]|0;
                              $707 = ($$pre3185$i$i$i$i$i$i<<24>>24)>(-65);
                              if ($707) {
                               $979 = 0;
                              } else {
                               break L268;
                              }
                             }
                             $708 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5184|0);
                             do {
                              if (!($708)) {
                               $709 = (_memcmp(5184,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                               $710 = ($709|0)==(0);
                               if ($710) {
                                break;
                               }
                               if ($979) {
                                $980 = 1;
                               } else {
                                $724 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                if (!($724)) {
                                 break L268;
                                }
                                $$phi$trans$insert3186$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                $$pre3187$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3186$i$i$i$i$i$i>>0]|0;
                                $725 = ($$pre3187$i$i$i$i$i$i<<24>>24)>(-65);
                                if ($725) {
                                 $980 = 0;
                                } else {
                                 break L268;
                                }
                               }
                               $726 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5190|0);
                               do {
                                if (!($726)) {
                                 $727 = (_memcmp(5190,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                                 $728 = ($727|0)==(0);
                                 if ($728) {
                                  break;
                                 }
                                 if ($980) {
                                  $981 = 1;
                                 } else {
                                  $742 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                  if (!($742)) {
                                   break L268;
                                  }
                                  $$phi$trans$insert3188$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                  $$pre3189$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3188$i$i$i$i$i$i>>0]|0;
                                  $743 = ($$pre3189$i$i$i$i$i$i<<24>>24)>(-65);
                                  if ($743) {
                                   $981 = 0;
                                  } else {
                                   break L268;
                                  }
                                 }
                                 $744 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5196|0);
                                 do {
                                  if (!($744)) {
                                   $745 = (_memcmp(5196,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                                   $746 = ($745|0)==(0);
                                   if ($746) {
                                    break;
                                   }
                                   if ($981) {
                                    $982 = 1;
                                   } else {
                                    $760 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                    if (!($760)) {
                                     break L268;
                                    }
                                    $$phi$trans$insert3190$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                    $$pre3191$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3190$i$i$i$i$i$i>>0]|0;
                                    $761 = ($$pre3191$i$i$i$i$i$i<<24>>24)>(-65);
                                    if ($761) {
                                     $982 = 0;
                                    } else {
                                     break L268;
                                    }
                                   }
                                   $762 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5202|0);
                                   do {
                                    if (!($762)) {
                                     $763 = (_memcmp(5202,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                                     $764 = ($763|0)==(0);
                                     if ($764) {
                                      break;
                                     }
                                     if ($982) {
                                      $983 = 1;
                                     } else {
                                      $778 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                      if (!($778)) {
                                       break L268;
                                      }
                                      $$phi$trans$insert3192$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                      $$pre3193$i$i$i$i$i$i = HEAP8[$$phi$trans$insert3192$i$i$i$i$i$i>>0]|0;
                                      $779 = ($$pre3193$i$i$i$i$i$i<<24>>24)>(-65);
                                      if ($779) {
                                       $983 = 0;
                                      } else {
                                       break L268;
                                      }
                                     }
                                     $780 = ($rest2$sroa$0$02587$i$i$i$i$i$i|0)==(5208|0);
                                     if (!($780)) {
                                      $781 = (_memcmp(5208,$rest2$sroa$0$02587$i$i$i$i$i$i,5)|0);
                                      $782 = ($781|0)==(0);
                                      if (!($782)) {
                                       break L268;
                                      }
                                     }
                                     $794 = HEAP32[$95>>2]|0;
                                     FUNCTION_TABLE_viiii[$794 & 255]($_621$i$i$i$i$i$i,$1,5213,1);
                                     $795 = HEAP32[$_621$i$i$i$i$i$i>>2]|0;
                                     $cond57$i$i$i$i$i$i = ($795|0)==(0);
                                     if (!($cond57$i$i$i$i$i$i)) {
                                      label = 431;
                                      break L214;
                                     }
                                     if ($983) {
                                      $$pre$i$i$i1622$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                      $$pre$phi$i$ph$i$i1627$i$i$i$i$i$iZ2D = $$pre$i$i$i1622$i$i$i$i$i$i;
                                     } else {
                                      $798 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                      if (!($798)) {
                                       label = 429;
                                       break L74;
                                      }
                                      $799 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                      $800 = HEAP8[$799>>0]|0;
                                      $801 = ($800<<24>>24)>(-65);
                                      if ($801) {
                                       $$pre$phi$i$ph$i$i1627$i$i$i$i$i$iZ2D = $799;
                                      } else {
                                       label = 429;
                                       break L74;
                                      }
                                     }
                                     $802 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1627$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $802;
                                     break L272;
                                    }
                                   } while(0);
                                   $776 = HEAP32[$95>>2]|0;
                                   FUNCTION_TABLE_viiii[$776 & 255]($_599$i$i$i$i$i$i,$1,5207,1);
                                   $777 = HEAP32[$_599$i$i$i$i$i$i>>2]|0;
                                   $cond60$i$i$i$i$i$i = ($777|0)==(0);
                                   if (!($cond60$i$i$i$i$i$i)) {
                                    label = 422;
                                    break L214;
                                   }
                                   if ($982) {
                                    $$pre$i$i$i1600$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                    $$pre$phi$i$ph$i$i1605$i$i$i$i$i$iZ2D = $$pre$i$i$i1600$i$i$i$i$i$i;
                                   } else {
                                    $783 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                    if (!($783)) {
                                     label = 420;
                                     break L74;
                                    }
                                    $784 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                    $785 = HEAP8[$784>>0]|0;
                                    $786 = ($785<<24>>24)>(-65);
                                    if ($786) {
                                     $$pre$phi$i$ph$i$i1605$i$i$i$i$i$iZ2D = $784;
                                    } else {
                                     label = 420;
                                     break L74;
                                    }
                                   }
                                   $787 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                                   $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1605$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $787;
                                   break L272;
                                  }
                                 } while(0);
                                 $758 = HEAP32[$95>>2]|0;
                                 FUNCTION_TABLE_viiii[$758 & 255]($_577$i$i$i$i$i$i,$1,5201,1);
                                 $759 = HEAP32[$_577$i$i$i$i$i$i>>2]|0;
                                 $cond63$i$i$i$i$i$i = ($759|0)==(0);
                                 if (!($cond63$i$i$i$i$i$i)) {
                                  label = 409;
                                  break L214;
                                 }
                                 if ($981) {
                                  $$pre$i$i$i1571$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                  $$pre$phi$i$ph$i$i1576$i$i$i$i$i$iZ2D = $$pre$i$i$i1571$i$i$i$i$i$i;
                                 } else {
                                  $765 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                  if (!($765)) {
                                   label = 407;
                                   break L74;
                                  }
                                  $766 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                  $767 = HEAP8[$766>>0]|0;
                                  $768 = ($767<<24>>24)>(-65);
                                  if ($768) {
                                   $$pre$phi$i$ph$i$i1576$i$i$i$i$i$iZ2D = $766;
                                  } else {
                                   label = 407;
                                   break L74;
                                  }
                                 }
                                 $769 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1576$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $769;
                                 break L272;
                                }
                               } while(0);
                               $740 = HEAP32[$95>>2]|0;
                               FUNCTION_TABLE_viiii[$740 & 255]($_555$i$i$i$i$i$i,$1,5195,1);
                               $741 = HEAP32[$_555$i$i$i$i$i$i>>2]|0;
                               $cond66$i$i$i$i$i$i = ($741|0)==(0);
                               if (!($cond66$i$i$i$i$i$i)) {
                                label = 396;
                                break L214;
                               }
                               if ($980) {
                                $$pre$i$i$i1542$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                $$pre$phi$i$ph$i$i1547$i$i$i$i$i$iZ2D = $$pre$i$i$i1542$i$i$i$i$i$i;
                               } else {
                                $747 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                                if (!($747)) {
                                 label = 394;
                                 break L74;
                                }
                                $748 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                                $749 = HEAP8[$748>>0]|0;
                                $750 = ($749<<24>>24)>(-65);
                                if ($750) {
                                 $$pre$phi$i$ph$i$i1547$i$i$i$i$i$iZ2D = $748;
                                } else {
                                 label = 394;
                                 break L74;
                                }
                               }
                               $751 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                               $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1547$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $751;
                               break L272;
                              }
                             } while(0);
                             $722 = HEAP32[$95>>2]|0;
                             FUNCTION_TABLE_viiii[$722 & 255]($_533$i$i$i$i$i$i,$1,5189,1);
                             $723 = HEAP32[$_533$i$i$i$i$i$i>>2]|0;
                             $cond69$i$i$i$i$i$i = ($723|0)==(0);
                             if (!($cond69$i$i$i$i$i$i)) {
                              label = 383;
                              break L214;
                             }
                             if ($979) {
                              $$pre$i$i$i1513$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                              $$pre$phi$i$ph$i$i1518$i$i$i$i$i$iZ2D = $$pre$i$i$i1513$i$i$i$i$i$i;
                             } else {
                              $729 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                              if (!($729)) {
                               label = 381;
                               break L74;
                              }
                              $730 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                              $731 = HEAP8[$730>>0]|0;
                              $732 = ($731<<24>>24)>(-65);
                              if ($732) {
                               $$pre$phi$i$ph$i$i1518$i$i$i$i$i$iZ2D = $730;
                              } else {
                               label = 381;
                               break L74;
                              }
                             }
                             $733 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                             $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1518$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $733;
                             break L272;
                            }
                           } while(0);
                           $704 = HEAP32[$95>>2]|0;
                           FUNCTION_TABLE_viiii[$704 & 255]($_511$i$i$i$i$i$i,$1,5183,1);
                           $705 = HEAP32[$_511$i$i$i$i$i$i>>2]|0;
                           $cond72$i$i$i$i$i$i = ($705|0)==(0);
                           if (!($cond72$i$i$i$i$i$i)) {
                            label = 370;
                            break L214;
                           }
                           if ($978) {
                            $$pre$i$i$i1484$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                            $$pre$phi$i$ph$i$i1489$i$i$i$i$i$iZ2D = $$pre$i$i$i1484$i$i$i$i$i$i;
                           } else {
                            $711 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                            if (!($711)) {
                             label = 368;
                             break L74;
                            }
                            $712 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                            $713 = HEAP8[$712>>0]|0;
                            $714 = ($713<<24>>24)>(-65);
                            if ($714) {
                             $$pre$phi$i$ph$i$i1489$i$i$i$i$i$iZ2D = $712;
                            } else {
                             label = 368;
                             break L74;
                            }
                           }
                           $715 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                           $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1489$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $715;
                           break L272;
                          }
                         } while(0);
                         $686 = HEAP32[$95>>2]|0;
                         FUNCTION_TABLE_viiii[$686 & 255]($_489$i$i$i$i$i$i,$1,5177,1);
                         $687 = HEAP32[$_489$i$i$i$i$i$i>>2]|0;
                         $cond75$i$i$i$i$i$i = ($687|0)==(0);
                         if (!($cond75$i$i$i$i$i$i)) {
                          label = 357;
                          break L214;
                         }
                         if ($977) {
                          $$pre$i$i$i1455$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                          $$pre$phi$i$ph$i$i1460$i$i$i$i$i$iZ2D = $$pre$i$i$i1455$i$i$i$i$i$i;
                         } else {
                          $693 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                          if (!($693)) {
                           label = 355;
                           break L74;
                          }
                          $694 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                          $695 = HEAP8[$694>>0]|0;
                          $696 = ($695<<24>>24)>(-65);
                          if ($696) {
                           $$pre$phi$i$ph$i$i1460$i$i$i$i$i$iZ2D = $694;
                          } else {
                           label = 355;
                           break L74;
                          }
                         }
                         $697 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                         $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1460$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $697;
                         break L272;
                        }
                       } while(0);
                       $668 = HEAP32[$95>>2]|0;
                       FUNCTION_TABLE_viiii[$668 & 255]($_467$i$i$i$i$i$i,$1,5171,1);
                       $669 = HEAP32[$_467$i$i$i$i$i$i>>2]|0;
                       $cond78$i$i$i$i$i$i = ($669|0)==(0);
                       if (!($cond78$i$i$i$i$i$i)) {
                        label = 344;
                        break L214;
                       }
                       if ($976) {
                        $$pre$i$i$i1426$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                        $$pre$phi$i$ph$i$i1431$i$i$i$i$i$iZ2D = $$pre$i$i$i1426$i$i$i$i$i$i;
                       } else {
                        $675 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                        if (!($675)) {
                         label = 342;
                         break L74;
                        }
                        $676 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                        $677 = HEAP8[$676>>0]|0;
                        $678 = ($677<<24>>24)>(-65);
                        if ($678) {
                         $$pre$phi$i$ph$i$i1431$i$i$i$i$i$iZ2D = $676;
                        } else {
                         label = 342;
                         break L74;
                        }
                       }
                       $679 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                       $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1431$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $679;
                       break L272;
                      }
                     } while(0);
                     $650 = HEAP32[$95>>2]|0;
                     FUNCTION_TABLE_viiii[$650 & 255]($_445$i$i$i$i$i$i,$1,5165,1);
                     $651 = HEAP32[$_445$i$i$i$i$i$i>>2]|0;
                     $cond81$i$i$i$i$i$i = ($651|0)==(0);
                     if (!($cond81$i$i$i$i$i$i)) {
                      label = 331;
                      break L214;
                     }
                     if ($975) {
                      $$pre$i$i$i1397$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                      $$pre$phi$i$ph$i$i1402$i$i$i$i$i$iZ2D = $$pre$i$i$i1397$i$i$i$i$i$i;
                     } else {
                      $657 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                      if (!($657)) {
                       label = 329;
                       break L74;
                      }
                      $658 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                      $659 = HEAP8[$658>>0]|0;
                      $660 = ($659<<24>>24)>(-65);
                      if ($660) {
                       $$pre$phi$i$ph$i$i1402$i$i$i$i$i$iZ2D = $658;
                      } else {
                       label = 329;
                       break L74;
                      }
                     }
                     $661 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                     $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1402$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $661;
                     break L272;
                    }
                   } while(0);
                   $632 = HEAP32[$95>>2]|0;
                   FUNCTION_TABLE_viiii[$632 & 255]($_423$i$i$i$i$i$i,$1,5159,1);
                   $633 = HEAP32[$_423$i$i$i$i$i$i>>2]|0;
                   $cond84$i$i$i$i$i$i = ($633|0)==(0);
                   if (!($cond84$i$i$i$i$i$i)) {
                    label = 318;
                    break L214;
                   }
                   if ($974) {
                    $$pre$i$i$i1368$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                    $$pre$phi$i$ph$i$i1373$i$i$i$i$i$iZ2D = $$pre$i$i$i1368$i$i$i$i$i$i;
                   } else {
                    $639 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>(5);
                    if (!($639)) {
                     label = 316;
                     break L74;
                    }
                    $640 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 5|0);
                    $641 = HEAP8[$640>>0]|0;
                    $642 = ($641<<24>>24)>(-65);
                    if ($642) {
                     $$pre$phi$i$ph$i$i1373$i$i$i$i$i$iZ2D = $640;
                    } else {
                     label = 316;
                     break L74;
                    }
                   }
                   $643 = (($rest2$sroa$80$02624$i$i$i$i$i$i) + -5)|0;
                   $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1373$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $643;
                   break L272;
                  }
                 } while(0);
                 $$ptr3232$i$i$i$i$i$i = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 1|0);
                 do {
                  if ($387) {
                   $$ptr3234$i$i$i$i$i$i = $$ptr3232$i$i$i$i$i$i;
                   label = 193;
                  } else {
                   $393 = HEAP8[$$ptr3232$i$i$i$i$i$i>>0]|0;
                   $394 = ($393<<24>>24)>(-65);
                   if (!($394)) {
                    label = 177;
                    break L74;
                   }
                   $$ptr$i$i$i$i$i$i = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($rest2$sroa$80$02624$i$i$i$i$i$i)|0);
                   $396 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 2|0);
                   $397 = ($393<<24>>24)>(-1);
                   do {
                    if ($397) {
                     $395 = $393&255;
                     $_200$sroa$5$2$ph$i$i$i$i$i$i = $395;
                    } else {
                     $398 = $393 & 31;
                     $399 = $398&255;
                     $400 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==(2);
                     if ($400) {
                      $407 = $$ptr$i$i$i$i$i$i;$_0$0$i20$i$i1035$i$i$i$i$i$i = 0;
                     } else {
                      $401 = ((($rest2$sroa$0$02587$i$i$i$i$i$i)) + 3|0);
                      $402 = HEAP8[$396>>0]|0;
                      $phitmp$i$i1033$i$i$i$i$i$i = $402 & 63;
                      $407 = $401;$_0$0$i20$i$i1035$i$i$i$i$i$i = $phitmp$i$i1033$i$i$i$i$i$i;
                     }
                     $403 = $399 << 6;
                     $404 = $_0$0$i20$i$i1035$i$i$i$i$i$i&255;
                     $405 = $404 | $403;
                     $406 = ($393&255)>(223);
                     if (!($406)) {
                      $_200$sroa$5$2$ph$i$i$i$i$i$i = $405;
                      break;
                     }
                     $408 = ($407|0)==($$ptr$i$i$i$i$i$i|0);
                     if ($408) {
                      $417 = $$ptr$i$i$i$i$i$i;$_0$0$i14$i$i1040$i$i$i$i$i$i = 0;
                     } else {
                      $409 = ((($407)) + 1|0);
                      $410 = HEAP8[$407>>0]|0;
                      $phitmp26$i$i1038$i$i$i$i$i$i = $410 & 63;
                      $417 = $409;$_0$0$i14$i$i1040$i$i$i$i$i$i = $phitmp26$i$i1038$i$i$i$i$i$i;
                     }
                     $411 = $404 << 6;
                     $412 = $_0$0$i14$i$i1040$i$i$i$i$i$i&255;
                     $413 = $412 | $411;
                     $414 = $399 << 12;
                     $415 = $413 | $414;
                     $416 = ($393&255)>(239);
                     if (!($416)) {
                      $_200$sroa$5$2$ph$i$i$i$i$i$i = $415;
                      break;
                     }
                     $418 = ($417|0)==($$ptr$i$i$i$i$i$i|0);
                     if ($418) {
                      $_0$0$i9$i$i1045$i$i$i$i$i$i = 0;
                     } else {
                      $419 = HEAP8[$417>>0]|0;
                      $phitmp27$i$i1043$i$i$i$i$i$i = $419 & 63;
                      $_0$0$i9$i$i1045$i$i$i$i$i$i = $phitmp27$i$i1043$i$i$i$i$i$i;
                     }
                     $420 = $399 << 18;
                     $421 = $420 & 1835008;
                     $422 = $413 << 6;
                     $423 = $_0$0$i9$i$i1045$i$i$i$i$i$i&255;
                     $424 = $422 | $421;
                     $425 = $424 | $423;
                     $_200$sroa$5$2$ph$i$i$i$i$i$i = $425;
                    }
                   } while(0);
                   $cond115$i$i$i$i$i$i = ($_200$sroa$5$2$ph$i$i$i$i$i$i|0)==(46);
                   if (!($cond115$i$i$i$i$i$i)) {
                    $$ptr3234$i$i$i$i$i$i = $$ptr$i$i$i$i$i$i;
                    label = 193;
                    break;
                   }
                   $429 = HEAP32[$95>>2]|0;
                   FUNCTION_TABLE_viiii[$429 & 255]($_209$i$i$i$i$i$i,$1,5109,2);
                   $430 = HEAP32[$_209$i$i$i$i$i$i>>2]|0;
                   $cond116$i$i$i$i$i$i = ($430|0)==(0);
                   if (!($cond116$i$i$i$i$i$i)) {
                    label = 201;
                    break L214;
                   }
                   $$ptr3233$i$i$i$i$i$i = $$ptr$i$i$i$i$i$i;$$sink814$i$i$i$i$i$i = 2;
                  }
                 } while(0);
                 if ((label|0) == 193) {
                  label = 0;
                  $431 = HEAP32[$95>>2]|0;
                  FUNCTION_TABLE_viiii[$431 & 255]($_226$i$i$i$i$i$i,$1,5113,1);
                  $432 = HEAP32[$_226$i$i$i$i$i$i>>2]|0;
                  $cond112$i$i$i$i$i$i = ($432|0)==(0);
                  if (!($cond112$i$i$i$i$i$i)) {
                   label = 203;
                   break L214;
                  }
                  $$ptr3233$i$i$i$i$i$i = $$ptr3234$i$i$i$i$i$i;$$sink814$i$i$i$i$i$i = 1;
                 }
                 $433 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==($$sink814$i$i$i$i$i$i|0);
                 if ($433) {
                  $$pre$phi$i$ph$i$i1075$i$i$i$i$i$iZ2D = $$ptr3233$i$i$i$i$i$i;
                 } else {
                  $434 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>($$sink814$i$i$i$i$i$i>>>0);
                  if (!($434)) {
                   label = 198;
                   break L74;
                  }
                  $435 = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($$sink814$i$i$i$i$i$i)|0);
                  $436 = HEAP8[$435>>0]|0;
                  $437 = ($436<<24>>24)>(-65);
                  if ($437) {
                   $$pre$phi$i$ph$i$i1075$i$i$i$i$i$iZ2D = $435;
                  } else {
                   label = 198;
                   break L74;
                  }
                 }
                 $438 = (($rest2$sroa$80$02624$i$i$i$i$i$i) - ($$sink814$i$i$i$i$i$i))|0;
                 $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1075$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $438;
                }
               } while(0);
               if ((label|0) == 209) {
                label = 0;
                $459 = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($rest2$sroa$80$02624$i$i$i$i$i$i)|0);
                $460 = $rest2$sroa$0$02587$i$i$i$i$i$i;
                $461 = $460;$_656$sroa$0$0$i$i$i$i$i$i = 0;
                L545: while(1) {
                 $$cast$i$i$i$i$i$i$i$i$i = $461;
                 $462 = ($$cast$i$i$i$i$i$i$i$i$i|0)==($459|0);
                 if ($462) {
                  $idx$0$i$i$i$i$i$i = $rest2$sroa$80$02624$i$i$i$i$i$i;
                  break;
                 }
                 $465 = ((($$cast$i$i$i$i$i$i$i$i$i)) + 1|0);
                 $464 = HEAP8[$$cast$i$i$i$i$i$i$i$i$i>>0]|0;
                 $466 = ($464<<24>>24)>(-1);
                 $467 = $465;
                 do {
                  if ($466) {
                   $463 = $464&255;
                   $502 = $467;$trunc$i$i$i$i$i$i$i$i = $463;
                  } else {
                   $468 = $464 & 31;
                   $469 = $468&255;
                   $470 = ($465|0)==($459|0);
                   if ($470) {
                    $478 = $459;$970 = $467;$_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $471 = ((($$cast$i$i$i$i$i$i$i$i$i)) + 2|0);
                    $472 = HEAP8[$465>>0]|0;
                    $phitmp$i$i$i$i$i$i$i$i$i$i$i = $472 & 63;
                    $473 = $471;
                    $478 = $471;$970 = $473;$_0$0$i20$i$i$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $474 = $469 << 6;
                   $475 = $_0$0$i20$i$i$i$i$i$i$i$i$i$i$i&255;
                   $476 = $475 | $474;
                   $477 = ($464&255)>(223);
                   if (!($477)) {
                    $502 = $970;$trunc$i$i$i$i$i$i$i$i = $476;
                    break;
                   }
                   $479 = ($478|0)==($459|0);
                   if ($479) {
                    $489 = $459;$971 = $970;$_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $480 = ((($478)) + 1|0);
                    $481 = HEAP8[$478>>0]|0;
                    $phitmp26$i$i$i$i$i$i$i$i$i$i$i = $481 & 63;
                    $482 = $480;
                    $489 = $480;$971 = $482;$_0$0$i14$i$i$i$i$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $483 = $475 << 6;
                   $484 = $_0$0$i14$i$i$i$i$i$i$i$i$i$i$i&255;
                   $485 = $484 | $483;
                   $486 = $469 << 12;
                   $487 = $485 | $486;
                   $488 = ($464&255)>(239);
                   if (!($488)) {
                    $502 = $971;$trunc$i$i$i$i$i$i$i$i = $487;
                    break;
                   }
                   $490 = ($489|0)==($459|0);
                   if ($490) {
                    $972 = $971;$_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = 0;
                   } else {
                    $491 = ((($489)) + 1|0);
                    $492 = HEAP8[$489>>0]|0;
                    $phitmp27$i$i$i$i$i$i$i$i$i$i$i = $492 & 63;
                    $493 = $491;
                    $972 = $493;$_0$0$i9$i$i$i$i$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i$i$i$i$i;
                   }
                   $494 = $469 << 18;
                   $495 = $494 & 1835008;
                   $496 = $485 << 6;
                   $497 = $_0$0$i9$i$i$i$i$i$i$i$i$i$i$i&255;
                   $498 = $496 | $495;
                   $499 = $498 | $497;
                   $502 = $972;$trunc$i$i$i$i$i$i$i$i = $499;
                  }
                 } while(0);
                 $500 = (($_656$sroa$0$0$i$i$i$i$i$i) - ($461))|0;
                 $501 = (($500) + ($502))|0;
                 $trunc$i$i$i$i$i$i$i$i$clear = $trunc$i$i$i$i$i$i$i$i & 2097151;
                 switch ($trunc$i$i$i$i$i$i$i$i$clear|0) {
                 case 46: case 36:  {
                  $idx$0$i$i$i$i$i$i = $_656$sroa$0$0$i$i$i$i$i$i;
                  break L545;
                  break;
                 }
                 default: {
                  $461 = $502;$_656$sroa$0$0$i$i$i$i$i$i = $501;
                 }
                 }
                }
                $816 = ($idx$0$i$i$i$i$i$i|0)==(0);
                $817 = ($rest2$sroa$80$02624$i$i$i$i$i$i|0)==($idx$0$i$i$i$i$i$i|0);
                $or$cond$i$i$i$i1645$i$i$i$i$i$i = $816 | $817;
                if (!($or$cond$i$i$i$i1645$i$i$i$i$i$i)) {
                 $818 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>($idx$0$i$i$i$i$i$i>>>0);
                 if (!($818)) {
                  label = 438;
                  break L74;
                 }
                 $819 = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $820 = HEAP8[$819>>0]|0;
                 $821 = ($820<<24>>24)>(-65);
                 if (!($821)) {
                  label = 438;
                  break L74;
                 }
                }
                $822 = HEAP32[$95>>2]|0;
                FUNCTION_TABLE_viiii[$822 & 255]($_664$i$i$i$i$i$i,$1,$rest2$sroa$0$02587$i$i$i$i$i$i,$idx$0$i$i$i$i$i$i);
                $823 = HEAP32[$_664$i$i$i$i$i$i>>2]|0;
                $cond51$i$i$i$i$i$i = ($823|0)==(0);
                if (!($cond51$i$i$i$i$i$i)) {
                 label = 447;
                 break L214;
                }
                if ($or$cond$i$i$i$i1645$i$i$i$i$i$i) {
                 $$pre$i$i$i1665$i$i$i$i$i$i = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $$pre$phi$i$ph$i$i1670$i$i$i$i$i$iZ2D = $$pre$i$i$i1665$i$i$i$i$i$i;
                } else {
                 $824 = ($rest2$sroa$80$02624$i$i$i$i$i$i>>>0)>($idx$0$i$i$i$i$i$i>>>0);
                 if (!($824)) {
                  label = 444;
                  break L74;
                 }
                 $825 = (($rest2$sroa$0$02587$i$i$i$i$i$i) + ($idx$0$i$i$i$i$i$i)|0);
                 $826 = HEAP8[$825>>0]|0;
                 $827 = ($826<<24>>24)>(-65);
                 if ($827) {
                  $$pre$phi$i$ph$i$i1670$i$i$i$i$i$iZ2D = $825;
                 } else {
                  label = 444;
                  break L74;
                 }
                }
                $828 = (($rest2$sroa$80$02624$i$i$i$i$i$i) - ($idx$0$i$i$i$i$i$i))|0;
                $rest2$sroa$0$0$be$i$i$i$i$i$i = $$pre$phi$i$ph$i$i1670$i$i$i$i$i$iZ2D;$rest2$sroa$80$0$be$i$i$i$i$i$i = $828;
               }
               $829 = ($rest2$sroa$80$0$be$i$i$i$i$i$i|0)==(0);
               if ($829) {
                break L267;
               } else {
                $rest2$sroa$0$02587$i$i$i$i$i$i = $rest2$sroa$0$0$be$i$i$i$i$i$i;$rest2$sroa$80$02624$i$i$i$i$i$i = $rest2$sroa$80$0$be$i$i$i$i$i$i;
                label = 171;
               }
              }
              $796 = HEAP32[$95>>2]|0;
              FUNCTION_TABLE_viiii[$796 & 255]($_641$i$i$i$i$i$i,$1,$rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i);
              $797 = HEAP32[$_641$i$i$i$i$i$i>>2]|0;
              $cond54$i$i$i$i$i$i = ($797|0)==(0);
              if (!($cond54$i$i$i$i$i$i)) {
               label = 434;
               break L214;
              }
             }
            } while(0);
            $809 = ($370|0)==(0);
            if ($809) {
             label = 448;
             break L134;
            } else {
             $first$0$off02665$i$i$i$i$i$i = 0;$inner$sroa$0$52667$i$i$i$i$i$i = $$pre$phi$i$ph$i$i2013$i$i$i$i$i$iZ2D;$inner$sroa$14$52666$i$i$i$i$i$i = $370;
            }
           }
           switch (label|0) {
            case 130: {
             label = 0;
             $315 = $err1$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $316 = $315;
             $317 = HEAP32[$316>>2]|0;
             $318 = (($315) + 4)|0;
             $319 = $318;
             $320 = HEAP32[$319>>2]|0;
             $839 = $317;$842 = $320;
             label = 450;
             break L134;
             break;
            }
            case 201: {
             label = 0;
             $439 = $err3$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $440 = $439;
             $441 = HEAP32[$440>>2]|0;
             $442 = (($439) + 4)|0;
             $443 = $442;
             $444 = HEAP32[$443>>2]|0;
             $839 = $441;$842 = $444;
             label = 450;
             break L134;
             break;
            }
            case 203: {
             label = 0;
             $445 = $err4$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $446 = $445;
             $447 = HEAP32[$446>>2]|0;
             $448 = (($445) + 4)|0;
             $449 = $448;
             $450 = HEAP32[$449>>2]|0;
             $839 = $447;$842 = $450;
             label = 450;
             break L134;
             break;
            }
            case 232: {
             label = 0;
             $512 = $err5$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $513 = $512;
             $514 = HEAP32[$513>>2]|0;
             $515 = (($512) + 4)|0;
             $516 = $515;
             $517 = HEAP32[$516>>2]|0;
             $839 = $514;$842 = $517;
             label = 450;
             break L134;
             break;
            }
            case 242: {
             label = 0;
             $527 = $err6$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $528 = $527;
             $529 = HEAP32[$528>>2]|0;
             $530 = (($527) + 4)|0;
             $531 = $530;
             $532 = HEAP32[$531>>2]|0;
             $839 = $529;$842 = $532;
             label = 450;
             break L134;
             break;
            }
            case 252: {
             label = 0;
             $542 = $err7$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $543 = $542;
             $544 = HEAP32[$543>>2]|0;
             $545 = (($542) + 4)|0;
             $546 = $545;
             $547 = HEAP32[$546>>2]|0;
             $839 = $544;$842 = $547;
             label = 450;
             break L134;
             break;
            }
            case 262: {
             label = 0;
             $557 = $err8$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $558 = $557;
             $559 = HEAP32[$558>>2]|0;
             $560 = (($557) + 4)|0;
             $561 = $560;
             $562 = HEAP32[$561>>2]|0;
             $839 = $559;$842 = $562;
             label = 450;
             break L134;
             break;
            }
            case 272: {
             label = 0;
             $572 = $err9$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $573 = $572;
             $574 = HEAP32[$573>>2]|0;
             $575 = (($572) + 4)|0;
             $576 = $575;
             $577 = HEAP32[$576>>2]|0;
             $839 = $574;$842 = $577;
             label = 450;
             break L134;
             break;
            }
            case 282: {
             label = 0;
             $587 = $err10$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $588 = $587;
             $589 = HEAP32[$588>>2]|0;
             $590 = (($587) + 4)|0;
             $591 = $590;
             $592 = HEAP32[$591>>2]|0;
             $839 = $589;$842 = $592;
             label = 450;
             break L134;
             break;
            }
            case 292: {
             label = 0;
             $605 = $err11$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $606 = $605;
             $607 = HEAP32[$606>>2]|0;
             $608 = (($605) + 4)|0;
             $609 = $608;
             $610 = HEAP32[$609>>2]|0;
             $839 = $607;$842 = $610;
             label = 450;
             break L134;
             break;
            }
            case 305: {
             label = 0;
             $626 = $err12$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $627 = $626;
             $628 = HEAP32[$627>>2]|0;
             $629 = (($626) + 4)|0;
             $630 = $629;
             $631 = HEAP32[$630>>2]|0;
             $839 = $628;$842 = $631;
             label = 450;
             break L134;
             break;
            }
            case 318: {
             label = 0;
             $644 = $err13$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $645 = $644;
             $646 = HEAP32[$645>>2]|0;
             $647 = (($644) + 4)|0;
             $648 = $647;
             $649 = HEAP32[$648>>2]|0;
             $839 = $646;$842 = $649;
             label = 450;
             break L134;
             break;
            }
            case 331: {
             label = 0;
             $662 = $err14$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $663 = $662;
             $664 = HEAP32[$663>>2]|0;
             $665 = (($662) + 4)|0;
             $666 = $665;
             $667 = HEAP32[$666>>2]|0;
             $839 = $664;$842 = $667;
             label = 450;
             break L134;
             break;
            }
            case 344: {
             label = 0;
             $680 = $err15$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $681 = $680;
             $682 = HEAP32[$681>>2]|0;
             $683 = (($680) + 4)|0;
             $684 = $683;
             $685 = HEAP32[$684>>2]|0;
             $839 = $682;$842 = $685;
             label = 450;
             break L134;
             break;
            }
            case 357: {
             label = 0;
             $698 = $err16$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $699 = $698;
             $700 = HEAP32[$699>>2]|0;
             $701 = (($698) + 4)|0;
             $702 = $701;
             $703 = HEAP32[$702>>2]|0;
             $839 = $700;$842 = $703;
             label = 450;
             break L134;
             break;
            }
            case 370: {
             label = 0;
             $716 = $err17$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $717 = $716;
             $718 = HEAP32[$717>>2]|0;
             $719 = (($716) + 4)|0;
             $720 = $719;
             $721 = HEAP32[$720>>2]|0;
             $839 = $718;$842 = $721;
             label = 450;
             break L134;
             break;
            }
            case 383: {
             label = 0;
             $734 = $err18$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $735 = $734;
             $736 = HEAP32[$735>>2]|0;
             $737 = (($734) + 4)|0;
             $738 = $737;
             $739 = HEAP32[$738>>2]|0;
             $839 = $736;$842 = $739;
             label = 450;
             break L134;
             break;
            }
            case 396: {
             label = 0;
             $752 = $err19$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $753 = $752;
             $754 = HEAP32[$753>>2]|0;
             $755 = (($752) + 4)|0;
             $756 = $755;
             $757 = HEAP32[$756>>2]|0;
             $839 = $754;$842 = $757;
             label = 450;
             break L134;
             break;
            }
            case 409: {
             label = 0;
             $770 = $err20$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $771 = $770;
             $772 = HEAP32[$771>>2]|0;
             $773 = (($770) + 4)|0;
             $774 = $773;
             $775 = HEAP32[$774>>2]|0;
             $839 = $772;$842 = $775;
             label = 450;
             break L134;
             break;
            }
            case 422: {
             label = 0;
             $788 = $err21$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $789 = $788;
             $790 = HEAP32[$789>>2]|0;
             $791 = (($788) + 4)|0;
             $792 = $791;
             $793 = HEAP32[$792>>2]|0;
             $839 = $790;$842 = $793;
             label = 450;
             break L134;
             break;
            }
            case 431: {
             label = 0;
             $803 = $err22$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $804 = $803;
             $805 = HEAP32[$804>>2]|0;
             $806 = (($803) + 4)|0;
             $807 = $806;
             $808 = HEAP32[$807>>2]|0;
             $839 = $805;$842 = $808;
             label = 450;
             break L134;
             break;
            }
            case 434: {
             label = 0;
             $810 = $err23$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $811 = $810;
             $812 = HEAP32[$811>>2]|0;
             $813 = (($810) + 4)|0;
             $814 = $813;
             $815 = HEAP32[$814>>2]|0;
             $839 = $812;$842 = $815;
             label = 450;
             break L134;
             break;
            }
            case 447: {
             label = 0;
             $830 = $err24$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
             $831 = $830;
             $832 = HEAP32[$831>>2]|0;
             $833 = (($830) + 4)|0;
             $834 = $833;
             $835 = HEAP32[$834>>2]|0;
             $839 = $832;$842 = $835;
             label = 450;
             break L134;
             break;
            }
           }
          }
         }
        } while(0);
        do {
         if ((label|0) == 92) {
          label = 0;
          $247 = HEAP32[$95>>2]|0;
          FUNCTION_TABLE_viiii[$247 & 255]($_95$i$i$i$i$i$i,$1,$117,$symname$sroa$5$1$i$i$i);
          $248 = HEAP32[$_95$i$i$i$i$i$i>>2]|0;
          $cond123$i$i$i$i$i$i = ($248|0)==(0);
          if ($cond123$i$i$i$i$i$i) {
           label = 448;
           break;
          } else {
           $249 = $err$sroa$0$0$$sroa_idx$i$i$i$i$i$i;
           $250 = $249;
           $251 = HEAP32[$250>>2]|0;
           $252 = (($249) + 4)|0;
           $253 = $252;
           $254 = HEAP32[$253>>2]|0;
           $839 = $251;$842 = $254;
           label = 450;
           break;
          }
         }
        } while(0);
        if ((label|0) == 448) {
         label = 0;
         $$pre971$i$i$i$i$i = HEAP32[$95>>2]|0;
         $836 = $$pre971$i$i$i$i$i;
         break;
        }
        else if ((label|0) == 450) {
         label = 0;
         HEAP32[$_107$i$i>>2] = 1;
         $837 = $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i;
         $838 = $837;
         HEAP32[$838>>2] = $839;
         $840 = (($837) + 4)|0;
         $841 = $840;
         HEAP32[$841>>2] = $842;
         $_106$i$sroa$0$0$copyload934$i = 1;
         label = 35;
         break L98;
        }
       }
      } while(0);
      FUNCTION_TABLE_viiii[$836 & 255]($_107$i$i,$1,4927,1);
      $_106$i$sroa$0$0$copyload$pre$i = HEAP32[$_107$i$i>>2]|0;
      $_106$i$sroa$0$0$copyload$i = $_106$i$sroa$0$0$copyload$pre$i;
     }
    } while(0);
    if ((label|0) == 35) {
     label = 0;
     $_106$i$sroa$0$0$copyload$i = $_106$i$sroa$0$0$copyload934$i;
    }
    $853 = $_3$sroa$0$0$$sroa_idx$i128$i$i$i$i$i;
    $854 = $853;
    $56 = HEAP32[$854>>2]|0;
    $855 = (($853) + 4)|0;
    $856 = $855;
    $857 = HEAP32[$856>>2]|0;
    $cond18$i$i = ($_106$i$sroa$0$0$copyload$i|0)==(0);
    if ($cond18$i$i) {
     $iter$sroa$0$0$iter$sroa$0$0$318357$i$i = $104;$iter$sroa$15$0$i$i = $105;
    } else {
     label = 12;
     break;
    }
   }
   switch (label|0) {
    case 12: {
     $55 = $56&255;
     $res$sroa$8$0$i$off0 = $55;$res$sroa$8$0$i$off32 = $857;
     label = 13;
     break L28;
     break;
    }
    case 24: {
     $res$sroa$0$1$i = 1;$res$sroa$8$1$i$off0 = 0;$res$sroa$8$1$i$off32 = 0;
     break L28;
     break;
    }
    case 26: {
     __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E(-1,0);
     // unreachable;
     break;
    }
    case 54: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($117,$symname$sroa$5$1$i$i$i,3,$149);
     // unreachable;
     break;
    }
    case 65: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($117,$symname$sroa$5$1$i$i$i,2,$166);
     // unreachable;
     break;
    }
    case 142: {
     __ZN4core9panicking5panic17h8ce57b1f932a0889E(2280);
     // unreachable;
     break;
    }
    case 149: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($inner$sroa$0$52667$i$i$i$i$i$i,$inner$sroa$14$52666$i$i$i$i$i$i,0,$357);
     // unreachable;
     break;
    }
    case 151: {
     $self$sroa$4$0$$sroa_idx$i$i$i$i$i$i$i = ((($_168$i$i$i$i$i$i)) + 1|0);
     $self$sroa$4$0$copyload$i975$i$i$i$i$i$i = HEAP8[$self$sroa$4$0$$sroa_idx$i$i$i$i$i$i$i>>0]|0;
     __ZN4core6result13unwrap_failed17hb0360f04dda71ec6E($self$sroa$4$0$copyload$i975$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 156: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($$sink1282577$i$i$i$i$i$i,$$sink2578$i$i$i$i$i$i,$self$sroa$55$0$copyload$i$i$i$i$i$i$i,$$sink2578$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 164: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($$sink1282577$i$i$i$i$i$i,$$sink2578$lcssa2728$i$i$i$i$i$i,1,$$sink2578$lcssa2728$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 167: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($$sink1282577$i$i$i$i$i$i,$self$sroa$55$0$copyload$i$i$i$i$i$i$i,1,$self$sroa$55$0$copyload$i$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 177: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,1,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 198: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,$$sink814$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 230: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 240: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 250: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 260: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 270: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 280: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 290: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,4,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 303: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,3,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 316: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 329: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 342: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 355: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 368: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 381: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 394: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 407: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 420: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 429: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,5,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 438: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,0,$idx$0$i$i$i$i$i$i);
     // unreachable;
     break;
    }
    case 444: {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($rest2$sroa$0$02587$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i,$idx$0$i$i$i$i$i$i,$rest2$sroa$80$02624$i$i$i$i$i$i);
     // unreachable;
     break;
    }
   }
  } else {
   $extract$t50 = $_12$sroa$6$0$copyload$i$i&255;
   $res$sroa$8$0$i$off0 = $extract$t50;$res$sroa$8$0$i$off32 = $_12$sroa$9$0$copyload$i$i;
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  $res$sroa$0$1$i = 0;$res$sroa$8$1$i$off0 = $res$sroa$8$0$i$off0;$res$sroa$8$1$i$off32 = $res$sroa$8$0$i$off32;
 }
 (_pthread_mutex_unlock(((12784)|0))|0);
 $922 = $res$sroa$8$1$i$off32;
 $switch$i25 = ($res$sroa$8$1$i$off0&255)<(2);
 $or$cond = $switch$i25 | $res$sroa$0$1$i;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $923 = ((($922)) + 4|0);
 $924 = HEAP32[$923>>2]|0;
 $925 = ((($922)) + 8|0);
 $926 = HEAP32[$925>>2]|0;
 $927 = HEAP32[$926>>2]|0;
 __THREW__ = 0;
 invoke_vi($927|0,($924|0));
 $928 = __THREW__; __THREW__ = 0;
 $929 = $928&1;
 if ($929) {
  $937 = ___cxa_find_matching_catch_2()|0;
  $938 = tempRet0;
  $939 = HEAP32[$923>>2]|0;
  $940 = HEAP32[$925>>2]|0;
  __ZN5alloc4heap8box_free17he7aff06e65e4596eE($939,$940);
  __ZN5alloc4heap8box_free17h53b02e8f65dea423E($922);
  ___resumeException($937|0);
  // unreachable;
 }
 $930 = HEAP32[$925>>2]|0;
 $931 = ((($930)) + 4|0);
 $932 = HEAP32[$931>>2]|0;
 $933 = ($932|0)==(0);
 if (!($933)) {
  $934 = HEAP32[$923>>2]|0;
  $935 = ((($930)) + 8|0);
  $936 = HEAP32[$935>>2]|0;
  ___rust_dealloc($934,$932,$936);
 }
 ___rust_dealloc($922,12,4);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h573444e47184597fE($0) {
 $0 = $0|0;
 var $$pn = 0, $$sroa_cast2$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i17 = 0, $_0$sroa$0$0 = 0, $_12$sroa$4$0$$sroa_idx$i = 0, $_19$i$i$sroa$0$sroa$0$0$_19$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_22$0$in = 0, $_4$i = 0, $_6$i$i$i = 0, $_8$i = 0, $cond$i$i$i$i = 0, $cond$i$i12 = 0, $cond$i$i15 = 0, $cond3 = 0, $err$i$i = 0, $magicptr = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$8$0$i = 0;
 var $phitmp$i$i = 0, $t1$i$i$i$i$i$sroa$5$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i = sp + 32|0;
 $_6$i$i$i = sp + 16|0;
 $_8$i = sp + 8|0;
 $_4$i = sp;
 $1 = HEAP32[632]|0;
 $cond$i$i12 = ($1|0)==(0);
 if ($cond$i$i12) {
  $2 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2528)|0);
  $_0$0$i$i = $2;
 } else {
  $_0$0$i$i = $1;
 }
 $3 = (_pthread_getspecific(($_0$0$i$i|0))|0);
 $magicptr = $3;
 switch ($magicptr|0) {
 case 0:  {
  label = 4;
  break;
 }
 case 1:  {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  $$pn = $3;
 }
 }
 if ((label|0) == 4) {
  $4 = (___rust_alloc(20,4,$err$i$i)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i);
   // unreachable;
  }
  HEAP32[$4>>2] = 2528;
  $_19$i$i$sroa$0$sroa$0$0$_19$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($4)) + 4|0);
  HEAP32[$_19$i$i$sroa$0$sroa$0$0$_19$i$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $6 = HEAP32[632]|0;
  $cond$i$i15 = ($6|0)==(0);
  if ($cond$i$i15) {
   $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2528)|0);
   $_0$0$i$i17 = $7;
  } else {
   $_0$0$i$i17 = $6;
  }
  (_pthread_setspecific(($_0$0$i$i17|0),($4|0))|0);
  $$pn = $4;
 }
 $8 = ((($$pn)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $cond3 = ($9|0)==(0);
 if ($cond3) {
  $t1$i$i$i$i$i$sroa$5$0$$sroa_idx = ((($$pn)) + 12|0);
  HEAP8[$8>>0]=1&255;HEAP8[$8+1>>0]=(1>>8)&255;HEAP8[$8+2>>0]=(1>>16)&255;HEAP8[$8+3>>0]=1>>24;
  $_12$sroa$4$0$$sroa_idx$i = ((($$pn)) + 8|0);
  HEAP8[$_12$sroa$4$0$$sroa_idx$i>>0]=0&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+1>>0]=(0>>8)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+2>>0]=(0>>16)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i+3>>0]=0>>24;
  $10 = $t1$i$i$i$i$i$sroa$5$0$$sroa_idx;
  $11 = $10;
  HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP8[$13>>0]=0&255;HEAP8[$13+1>>0]=(0>>8)&255;HEAP8[$13+2>>0]=(0>>16)&255;HEAP8[$13+3>>0]=0>>24;
  $_22$0$in = $_12$sroa$4$0$$sroa_idx$i;
 } else {
  $14 = ((($$pn)) + 8|0);
  $_22$0$in = $14;
 }
 $15 = $0;
 $16 = $15;
 $17 = $16;
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 $$sroa_cast2$i$i = $0;
 HEAP8[$$sroa_cast2$i$i>>0]=0&255;HEAP8[$$sroa_cast2$i$i+1>>0]=(0>>8)&255;HEAP8[$$sroa_cast2$i$i+2>>0]=(0>>16)&255;HEAP8[$$sroa_cast2$i$i+3>>0]=0>>24;
 $22 = $_4$i;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$_22$0$in>>2]|0;
 $cond$i$i$i$i = ($26|0)==(0);
 if (!($cond$i$i$i$i)) {
  __THREW__ = 0;
  invoke_v(89);
  $27 = __THREW__; __THREW__ = 0;
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  __ZN4core3ptr13drop_in_place17h9d1780c1d7d5f498E($_4$i);
  $personalityslot$sroa$0$0$i = $28;$personalityslot$sroa$8$0$i = $29;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 HEAP8[$_22$0$in>>0]=-1&255;HEAP8[$_22$0$in+1>>0]=(-1>>8)&255;HEAP8[$_22$0$in+2>>0]=(-1>>16)&255;HEAP8[$_22$0$in+3>>0]=-1>>24;
 $30 = ((($$pn)) + 12|0);
 $phitmp$i$i = $30;
 $31 = $_22$0$in;
 $32 = $_8$i;
 $33 = $32;
 HEAP32[$33>>2] = $phitmp$i$i;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = HEAP32[$30>>2]|0;
 $37 = ($36|0)==(0|0);
 do {
  if (!($37)) {
   $38 = ((($$pn)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   __THREW__ = 0;
   invoke_vi($40|0,($36|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    $52 = HEAP32[$30>>2]|0;
    $53 = HEAP32[$38>>2]|0;
    __ZN5alloc4heap8box_free17ha0354743f27ea686E($52,$53);
    $54 = $30;
    $55 = $54;
    HEAP32[$55>>2] = $18;
    $56 = (($54) + 4)|0;
    $57 = $56;
    HEAP32[$57>>2] = $21;
    __ZN4core3ptr13drop_in_place17h54ca33c8fd907905E($_8$i);
    $personalityslot$sroa$0$0$i = $50;$personalityslot$sroa$8$0$i = $51;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   } else {
    $43 = HEAP32[$38>>2]|0;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     break;
    }
    $47 = HEAP32[$30>>2]|0;
    $48 = ((($43)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    ___rust_dealloc($47,$45,$49);
    break;
   }
  }
 } while(0);
 $58 = $30;
 $59 = $58;
 HEAP32[$59>>2] = $18;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $21;
 HEAP8[$_22$0$in>>0]=0&255;HEAP8[$_22$0$in+1>>0]=(0>>8)&255;HEAP8[$_22$0$in+2>>0]=(0>>16)&255;HEAP8[$_22$0$in+3>>0]=0>>24;
 $_0$sroa$0$0 = 0;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN5alloc4heap8box_free17ha0354743f27ea686E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN4core3ptr13drop_in_place17h94058cbd70f31d0cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17ha0354743f27ea686E($16,$17);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 ___rust_dealloc($11,$9,$13);
 return;
}
function __ZN4core3ptr13drop_in_place17h9d1780c1d7d5f498E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  $18 = HEAP32[$3>>2]|0;
  __ZN5alloc4heap8box_free17ha0354743f27ea686E($17,$18);
  ___resumeException($15|0);
  // unreachable;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($8)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 ___rust_dealloc($12,$10,$14);
 return;
}
function __ZN4core3ptr13drop_in_place17h54ca33c8fd907905E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 return;
}
function __ZN3std6thread5local2os13destroy_value17h7700075314f728e2E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $_x$i = 0, $cond$i$i = 0, $cond$i$i6 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_x$i = sp + 4|0;
 $ptr = sp;
 HEAP32[$ptr>>2] = $0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 $3 = $0;
 if ($cond$i$i) {
  __THREW__ = 0;
  $4 = (invoke_ii(121,($1|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $9 = ___cxa_find_matching_catch_2()|0;
   $10 = tempRet0;
   __ZN4core3ptr13drop_in_place17h4bc21594f972b1e8E($ptr);
   ___resumeException($9|0);
   // unreachable;
  } else {
   $_0$0$i$i = $4;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 HEAP32[$_x$i>>2] = $3;
 __ZN4core3ptr13drop_in_place17h4bc21594f972b1e8E($_x$i);
 $7 = HEAP32[$1>>2]|0;
 $cond$i$i6 = ($7|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $7;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $8 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($1)|0);
 $_0$0$i$i8 = $8;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h4bc21594f972b1e8E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $cond$i$i$i = ($3|0)==(0);
 if (!($cond$i$i$i)) {
  $4 = ((($1)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = ((($1)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   invoke_vi($9|0,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    $22 = HEAP32[$4>>2]|0;
    $23 = HEAP32[$7>>2]|0;
    __ZN5alloc4heap8box_free17ha0354743f27ea686E($22,$23);
    $24 = HEAP32[$0>>2]|0;
    __ZN5alloc4heap8box_free17h5f880c0784c75cabE($24);
    ___resumeException($20|0);
    // unreachable;
   }
   $12 = HEAP32[$7>>2]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = HEAP32[$4>>2]|0;
    $17 = ((($12)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    ___rust_dealloc($16,$14,$18);
   }
  }
 }
 $19 = HEAP32[$0>>2]|0;
 ___rust_dealloc($19,20,4);
 return;
}
function __ZN5alloc4heap8box_free17h5f880c0784c75cabE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,20,4);
 return;
}
function __ZN4core3ptr13drop_in_place17ha82eb4648773bceaE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17ha97448eff1ed027dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i$i = 0, $_11$sroa$4$0$$sroa_idx5$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>(-1);
 $_0$0$sroa$speculated$i$i$i$i$i = $4 ? $3 : 2147483647;
 $5 = (_write(2,$2,$_0$0$sroa$speculated$i$i$i$i$i)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $$sink$i$i$i = 1;$11 = 0;$14 = $8;
 } else {
  $$sink$i$i$i = 0;$11 = $5;$14 = 0;
 }
 HEAP32[$0>>2] = $$sink$i$i$i;
 $_11$sroa$4$0$$sroa_idx5$i$i = ((($0)) + 4|0);
 $9 = $_11$sroa$4$0$$sroa_idx5$i$i;
 $10 = $9;
 HEAP32[$10>>2] = $11;
 $12 = (($9) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $14;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h4b7fa3e34be6aedfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17hac63f4964f9674ebE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 __ZN3std2io5Write9write_all17hb218114a995ec51fE($0,$4,$2,$3);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17hc669c68984660094E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp;
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$_6>>2]=HEAP32[$2>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$2+20>>2]|0;
 __ZN3std2io5Write9write_fmt17h7174bf30b986bf79E($0,$3,$_6);
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_fmt17h7174bf30b986bf79E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_13 = 0, $_4$i$i$i = 0, $_6$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i = 0, $_7$sroa$0$0$$sroa_idx = 0, $cond = 0, $cond$i = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $output = 0, $switch$i = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $err$i$i$i$i = sp + 120|0;
 $_6$i$i$i$i$i = sp + 104|0;
 $x$i$sroa$4$i = sp + 132|0;
 $err$i$i$i$i$i$i$i = sp + 88|0;
 $_6$i$i$i$i$i$i$i$i = sp + 72|0;
 $x$sroa$0$i$i$i$i$i = sp + 56|0;
 $_4$i$i$i = sp + 40|0;
 $_13 = sp + 16|0;
 $output = sp;
 HEAP32[$output>>2] = $1;
 $_7$sroa$0$0$$sroa_idx = ((($output)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 ;HEAP32[$_13>>2]=HEAP32[$2>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_13+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_13+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_13+20>>2]=HEAP32[$2+20>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(102,($output|0),(80|0),($_13|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  __ZN4core3ptr13drop_in_place17h9fabf1aba0de77f2E($output);
  ___resumeException($41|0);
  // unreachable;
 }
 $cond = ($3<<24>>24)==(0);
 do {
  if ($cond) {
   HEAP32[$0>>2] = 0;
  } else {
   $6 = ((($output)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_viii(122,($_4$i$i$i|0),(5036|0),15);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $41 = ___cxa_find_matching_catch_2()|0;
    $42 = tempRet0;
    __ZN4core3ptr13drop_in_place17h9fabf1aba0de77f2E($output);
    ___resumeException($41|0);
    // unreachable;
   }
   ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
   $11 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   ;HEAP32[$11>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
   $13 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
    // unreachable;
   } else {
    HEAP8[$13>>0] = 16;
    $x$i$sroa$4$0$$sroa_raw_idx$i = ((($13)) + 1|0);
    ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
    $x$i$sroa$5$0$$sroa_idx$i = ((($13)) + 4|0);
    HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $11;
    $x$i$sroa$6$0$$sroa_idx$i = ((($13)) + 8|0);
    HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 104;
    $15 = $13;
    HEAP32[$0>>2] = 1;
    $$sroa_idx = ((($0)) + 4|0);
    HEAP32[$$sroa_idx>>2] = 2;
    $$sroa_idx19 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx19>>2] = $15;
    break;
   }
  }
 } while(0);
 $16 = HEAP32[$_7$sroa$0$0$$sroa_idx>>2]|0;
 $cond$i = ($16|0)==(0);
 if ($cond$i) {
  STACKTOP = sp;return;
 }
 $17 = ((($output)) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $switch$i = ($18&255)<(2);
 if ($switch$i) {
  STACKTOP = sp;return;
 }
 $19 = ((($output)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($20)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 __THREW__ = 0;
 invoke_vi($25|0,($22|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $37 = HEAP32[$21>>2]|0;
  $38 = HEAP32[$23>>2]|0;
  __ZN5alloc4heap8box_free17he7aff06e65e4596eE($37,$38);
  $39 = HEAP32[$19>>2]|0;
  __ZN5alloc4heap8box_free17h53b02e8f65dea423E($39);
  ___resumeException($35|0);
  // unreachable;
 }
 $28 = HEAP32[$23>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = HEAP32[$21>>2]|0;
  $33 = ((($28)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  ___rust_dealloc($32,$30,$34);
 }
 $40 = HEAP32[$19>>2]|0;
 ___rust_dealloc($40,12,4);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17he7aff06e65e4596eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN5alloc4heap8box_free17h53b02e8f65dea423E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,12,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h9fabf1aba0de77f2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(0);
 if ($cond$i) {
  return;
 }
 $3 = ((($0)) + 8|0);
 __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($3);
 return;
}
function __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $switch = ($1&255)<(2);
 if ($switch) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi($8|0,($5|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$6>>2]|0;
  __ZN5alloc4heap8box_free17he7aff06e65e4596eE($20,$21);
  $22 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17h53b02e8f65dea423E($22);
  ___resumeException($18|0);
  // unreachable;
 }
 $11 = HEAP32[$6>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = HEAP32[$4>>2]|0;
  $16 = ((($11)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  ___rust_dealloc($15,$13,$17);
 }
 $23 = HEAP32[$2>>2]|0;
 ___rust_dealloc($23,12,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h81fb84e5cc3365c9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i,$2,1);
 return;
}
function __ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h556f0bde872de163E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$0>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$retVal>>2] = $_3$sroa$0$0$copyload2$i$i$i;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $2;
 return;
}
function __ZN3std5error5Error5cause17h2ec2b447aaafa448E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h9ac221bdb4c0cd18E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-532870324);
 return 975637683;
}
function __ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h168052ee462b2244E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h509ce010b1cead94E($_3$sroa$0$0$copyload2$i$i$i$i,$3,$1)|0);
 return ($4|0);
}
function __ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h6b45654fea6516c8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_15 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_15 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder,$1,5051,11);
 HEAP32[$_15>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder,$_15,136)|0);
 $2 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr13drop_in_place17h37fd86615cf818bdE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d41f8eb1a66babfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$2>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h4d77fdb82a6fd7deE($_3$sroa$0$0$copyload2$i$i$i$i,$4,$1)|0);
 return ($5|0);
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h591d034c9ce37d35E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$sink47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $cond$i33 = 0, $e$sroa$0$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17hb218114a995ec51fE($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $cond = ($4|0)==(0);
 if ($cond) {
  $$sink47 = 0;
  STACKTOP = sp;return ($$sink47|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i33 = ($12|0)==(0);
 $$pre = ((($0)) + 8|0);
 if (!($cond$i33)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   HEAP32[$11>>2] = 1;
   $17 = $$pre;
   $18 = $17;
   HEAP32[$18>>2] = $7;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = $10;
   ___resumeException($15|0);
   // unreachable;
  }
 }
 HEAP32[$11>>2] = 1;
 $21 = $$pre;
 $22 = $21;
 HEAP32[$22>>2] = $7;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $10;
 $$sink47 = 1;
 STACKTOP = sp;return ($$sink47|0);
}
function __ZN4core3fmt5Write10write_char17he8538c45a70182d8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $$sink47$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_12 = 0, $_5$i = 0, $cond$i = 0, $cond$i33$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5$i = sp;
 $_12 = sp + 12|0;
 HEAP32[$_12>>2] = 0;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = $1&255;
  HEAP8[$_12>>0] = $3;
  $len$2$i = 1;
 } else {
  $4 = ($1>>>0)<(2048);
  do {
   if ($4) {
    $5 = $1 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    $$sink$i = $8;$$sink$sink$i = 1;$$sink15$i = $_12;$len$1$i = 2;
   } else {
    $9 = ($1>>>0)<(65536);
    if ($9) {
     $10 = $1 >>> 12;
     $11 = $10 & 15;
     $12 = $11&255;
     $13 = $12 | -32;
     HEAP8[$_12>>0] = $13;
     $14 = $1 >>> 6;
     $15 = $14 & 63;
     $16 = $15&255;
     $17 = ((($_12)) + 1|0);
     $18 = $16 | -128;
     $$sink$i = $18;$$sink$sink$i = 2;$$sink15$i = $17;$len$1$i = 3;
     break;
    } else {
     $19 = $1 >>> 18;
     $20 = $19 & 7;
     $21 = $20&255;
     $22 = $21 | -16;
     HEAP8[$_12>>0] = $22;
     $23 = $1 >>> 12;
     $24 = $23 & 63;
     $25 = $24&255;
     $26 = ((($_12)) + 1|0);
     $27 = $25 | -128;
     HEAP8[$26>>0] = $27;
     $28 = $1 >>> 6;
     $29 = $28 & 63;
     $30 = $29&255;
     $31 = ((($_12)) + 2|0);
     $32 = $30 | -128;
     $$sink$i = $32;$$sink$sink$i = 3;$$sink15$i = $31;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i>>0] = $$sink$i;
  $33 = $1 & 63;
  $34 = $33&255;
  $35 = (($_12) + ($$sink$sink$i)|0);
  $36 = $34 | -128;
  HEAP8[$35>>0] = $36;
  $len$2$i = $len$1$i;
 }
 $37 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17hb218114a995ec51fE($_5$i,$37,$_12,$len$2$i);
 $38 = HEAP32[$_5$i>>2]|0;
 $cond$i = ($38|0)==(0);
 if ($cond$i) {
  $$sink47$i = 0;
  STACKTOP = sp;return ($$sink47$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_5$i)) + 4|0);
 $39 = $e$sroa$0$0$$sroa_idx$i;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $cond$i33$i = ($46|0)==(0);
 $$pre$i = ((($0)) + 8|0);
 if (!($cond$i33$i)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre$i|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   HEAP32[$45>>2] = 1;
   $51 = $$pre$i;
   $52 = $51;
   HEAP32[$52>>2] = $41;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = $44;
   ___resumeException($49|0);
   // unreachable;
  }
 }
 HEAP32[$45>>2] = 1;
 $55 = $$pre$i;
 $56 = $55;
 HEAP32[$56>>2] = $41;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $44;
 $$sink47$i = 1;
 STACKTOP = sp;return ($$sink47$i|0);
}
function __ZN4core3fmt5Write9write_fmt17hc2941f2f58a9ed79E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8,152,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr13drop_in_place17hc3e39e740a81148bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hcdc0891b8aa6e6e7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i = 0, $$sink47$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i = 0, $cond$i = 0, $cond$i33$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5$i = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __ZN3std2io5Write9write_all17hb218114a995ec51fE($_5$i,$4,$1,$2);
 $5 = HEAP32[$_5$i>>2]|0;
 $cond$i = ($5|0)==(0);
 if ($cond$i) {
  $$sink47$i = 0;
  STACKTOP = sp;return ($$sink47$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_5$i)) + 4|0);
 $6 = $e$sroa$0$0$$sroa_idx$i;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $cond$i33$i = ($13|0)==(0);
 $$pre$i = ((($3)) + 8|0);
 if (!($cond$i33$i)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre$i|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   HEAP32[$12>>2] = 1;
   $18 = $$pre$i;
   $19 = $18;
   HEAP32[$19>>2] = $8;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = $11;
   ___resumeException($16|0);
   // unreachable;
  }
 }
 HEAP32[$12>>2] = 1;
 $22 = $$pre$i;
 $23 = $22;
 HEAP32[$23>>2] = $8;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $11;
 $$sink47$i = 1;
 STACKTOP = sp;return ($$sink47$i|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hb62deaaadf24ebc1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt5Write10write_char17he8538c45a70182d8E($2,$1)|0);
 return ($3|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h1e3a93cca8eadd3eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,152,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std2io5Write9write_all17hb218114a995ec51fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$sroa_idx = 0, $$sroa_idx58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$sroa$speculated$i$i$i$i$i = 0, $_10 = 0, $_11$sroa$4$0$$sroa_idx5$i$i = 0, $_29$sroa$0$0$$sroa_idx = 0, $_4$i$i$i = 0, $_6$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i = 0, $buf$sroa$0$093$ph = 0, $buf$sroa$8$092$ph = 0, $cond = 0, $cond2 = 0, $cond68 = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $or$cond = 0, $switch$i = 0, $trunc$i$clear = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0;
 var $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 96|0;
 $_6$i$i$i$i$i = sp + 80|0;
 $x$i$sroa$4$i = sp + 108|0;
 $err$i$i$i$i$i$i$i = sp + 64|0;
 $_6$i$i$i$i$i$i$i$i = sp + 48|0;
 $x$sroa$0$i$i$i$i$i = sp + 32|0;
 $_4$i$i$i = sp + 16|0;
 $_10 = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $_11$sroa$4$0$$sroa_idx5$i$i = ((($_10)) + 4|0);
   $buf$sroa$0$093$ph = $2;$buf$sroa$8$092$ph = $3;
   L3: while(1) {
    $5 = ($buf$sroa$8$092$ph|0)>(-1);
    $_0$0$sroa$speculated$i$i$i$i$i = $5 ? $buf$sroa$8$092$ph : 2147483647;
    while(1) {
     $6 = (_write(2,$buf$sroa$0$093$ph,$_0$0$sroa$speculated$i$i$i$i$i)|0);
     $7 = ($6|0)==(-1);
     if ($7) {
      $8 = (___errno_location()|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = 1;$13 = 0;$16 = $9;
     } else {
      $10 = 0;$13 = $6;$16 = 0;
     }
     HEAP32[$_10>>2] = $10;
     $11 = $_11$sroa$4$0$$sroa_idx5$i$i;
     $12 = $11;
     HEAP32[$12>>2] = $13;
     $14 = (($11) + 4)|0;
     $15 = $14;
     HEAP32[$15>>2] = $16;
     $cond = ($10|0)==(0);
     $17 = $13&255;
     $18 = $16;
     if ($cond) {
      break;
     }
     $25 = (_bitshift64Lshr(($13|0),($16|0),8)|0);
     $26 = tempRet0;
     $27 = $25&255;
     $28 = $13&255;
     $trunc$i$clear = $28 & 3;
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $cond68 = ($16|0)==(4);
      if (!($cond68)) {
       label = 21;
       break L3;
      }
      break;
     }
     case 1:  {
      $31 = $27;
      label = 20;
      break;
     }
     default: {
      $$pre = HEAP8[$18>>0]|0;
      $31 = $$pre;
      label = 20;
     }
     }
     if ((label|0) == 20) {
      label = 0;
      $32 = ($31<<24>>24)==(15);
      if (!($32)) {
       label = 21;
       break L3;
      }
     }
     $switch$i = ($17&255)<(2);
     $or$cond = $cond | $switch$i;
     if (!($or$cond)) {
      $38 = ((($18)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($18)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_vi($42|0,($39|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       label = 28;
       break L3;
      }
      $45 = HEAP32[$40>>2]|0;
      $46 = ((($45)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $49 = HEAP32[$38>>2]|0;
       $50 = ((($45)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       ___rust_dealloc($49,$47,$51);
      }
      ___rust_dealloc($18,12,4);
     }
    }
    $cond2 = ($13|0)==(0);
    if ($cond2) {
     label = 9;
     break;
    }
    $29 = ($buf$sroa$8$092$ph>>>0)<($13>>>0);
    if ($29) {
     label = 19;
     break;
    }
    $56 = (($buf$sroa$0$093$ph) + ($13)|0);
    $57 = (($buf$sroa$8$092$ph) - ($13))|0;
    $58 = ($57|0)==(0);
    if ($58) {
     break L1;
    } else {
     $buf$sroa$0$093$ph = $56;$buf$sroa$8$092$ph = $57;
    }
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_viii(122,($_4$i$i$i|0),(5062|0),28);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $59 = ___cxa_find_matching_catch_2()|0;
      $60 = tempRet0;
      __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($_10);
      ___resumeException($59|0);
      // unreachable;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
     $21 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$21>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$21+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
     $23 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
     $24 = ($23|0)==(0|0);
     if ($24) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$23>>0] = 14;
      $x$i$sroa$4$0$$sroa_raw_idx$i = ((($23)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i = ((($23)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $21;
      $x$i$sroa$6$0$$sroa_idx$i = ((($23)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 104;
      $37 = $23;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx58 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx58>>2] = $37;
      break;
     }
    }
    else if ((label|0) == 19) {
     __THREW__ = 0;
     invoke_vii(124,($13|0),($buf$sroa$8$092$ph|0));
     $30 = __THREW__; __THREW__ = 0;
     $59 = ___cxa_find_matching_catch_2()|0;
     $60 = tempRet0;
     __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($_10);
     ___resumeException($59|0);
     // unreachable;
    }
    else if ((label|0) == 21) {
     HEAP32[$0>>2] = 1;
     $_29$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
     $33 = $_29$sroa$0$0$$sroa_idx;
     $34 = $33;
     HEAP32[$34>>2] = $13;
     $35 = (($33) + 4)|0;
     $36 = $35;
     HEAP32[$36>>2] = $16;
    }
    else if ((label|0) == 28) {
     $52 = ___cxa_find_matching_catch_2()|0;
     $53 = tempRet0;
     $54 = HEAP32[$38>>2]|0;
     $55 = HEAP32[$40>>2]|0;
     __ZN5alloc4heap8box_free17he7aff06e65e4596eE($54,$55);
     __ZN5alloc4heap8box_free17h53b02e8f65dea423E($18);
     ___resumeException($52|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(0);
 if ($cond) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($2);
 return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp16unwind_backtrace17h32662089086f4902E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink11 = 0, $$sroa_idx = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6$i$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i = 0, $cx = 0, $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, $x$i$sroa$4$0$$sroa_raw_idx$i$i = 0, $x$i$sroa$4$i$i = 0;
 var $x$i$sroa$5$0$$sroa_idx$i$i = 0, $x$i$sroa$6$0$$sroa_idx$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $err$i$i$i$i$i = sp + 64|0;
 $_6$i$i$i$i$i$i = sp + 48|0;
 $x$i$sroa$4$i$i = sp + 76|0;
 $err$i$i$i$i$i$i = sp + 32|0;
 $_6$i$i$i$i$i$i$i = sp + 16|0;
 $cx = sp;
 HEAP32[$cx>>2] = 0;
 $2 = ((($cx)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($cx)) + 8|0);
 HEAP32[$3>>2] = 100;
 $4 = (__Unwind_Backtrace((125|0),($cx|0))|0);
 switch ($4|0) {
 case 9: case 5: case 3:  {
  $5 = HEAP32[$cx>>2]|0;
  HEAP32[$0>>2] = 0;
  $$sink = $5;$$sink11 = 0;
  $11 = (((($0)) + 4|0) + ($$sink11<<2)|0);
  HEAP32[$11>>2] = $$sink;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $6 = (___rust_alloc(4,4,$err$i$i$i$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = $4;
 $8 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i);
  // unreachable;
 }
 HEAP8[$8>>0] = 16;
 $x$i$sroa$4$0$$sroa_raw_idx$i$i = ((($8)) + 1|0);
 ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$x$i$sroa$4$i$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$x$i$sroa$4$i$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$x$i$sroa$4$i$i+2>>0]|0;
 $x$i$sroa$5$0$$sroa_idx$i$i = ((($8)) + 4|0);
 HEAP32[$x$i$sroa$5$0$$sroa_idx$i$i>>2] = $6;
 $x$i$sroa$6$0$$sroa_idx$i$i = ((($8)) + 8|0);
 HEAP32[$x$i$sroa$6$0$$sroa_idx$i$i>>2] = 176;
 $10 = $8;
 HEAP32[$0>>2] = 1;
 $$sroa_idx = ((($0)) + 4|0);
 HEAP32[$$sroa_idx>>2] = 2;
 $$sink = $10;$$sink11 = 1;
 $11 = (((($0)) + 4|0) + ($$sink11<<2)|0);
 HEAP32[$11>>2] = $$sink;
 STACKTOP = sp;return;
}
function __ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1c6a3327670e9ba9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_27$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_27$i = sp;
 $2 = ((($1)) + 8|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (__ZN4core3fmt9Formatter9alternate17h411f6d5fa0415fb5E($1)|0);
 $11 = HEAP32[$1>>2]|0;
 if ($10) {
  $12 = $11 | 8;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$2>>2]|0;
  $cond$i = ($13|0)==(0);
  if ($cond$i) {
   HEAP32[$2>>2] = 1;
   $14 = ((($1)) + 12|0);
   HEAP32[$14>>2] = 10;
   $16 = $12;
  } else {
   $16 = $12;
  }
 } else {
  $16 = $11;
 }
 $15 = $16 | 4;
 HEAP32[$1>>2] = $15;
 $17 = HEAP32[$0>>2]|0;
 HEAP32[$_27$i>>2] = $17;
 $18 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h2341b4f67626ece6E($_27$i,$1)|0);
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $5;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 HEAP32[$1>>2] = $9;
 STACKTOP = sp;return ($18|0);
}
function __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h3cc9ccc8500eac01E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$$$i$i$i = 0, $$$$i$i$i = 0, $$$i$i$i = 0, $$pn = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $$sink = 0, $$sink$i$i$i$i = 0, $$sink4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $_0$0$i12$i$i$i$i = 0, $_11$sroa$4$0$i$i = 0, $_19 = 0, $_8 = 0, $ch$0$i$i$i$i = 0, $ch$1$i$i$i$i = 0, $cond = 0, $cond$i = 0, $cond2$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_19 = sp + 8|0;
 $_8 = sp;
 $2 = ((($1)) + 73|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 72|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 L5: do {
  if ($7) {
   HEAP8[$5>>0] = 1;
   __ZN56__LT_core__str__SplitInternal_LT__u27_a_C__u20_P_GT__GT_9next_back17h3cc9ccc8500eac01E($_8,$1);
   $8 = HEAP32[$_8>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    label = 7;
   } else {
    $14 = ((($_8)) + 4|0);
    $11 = HEAP32[$14>>2]|0;
    $15 = ($11|0)==(0);
    if ($15) {
     label = 7;
    } else {
     HEAP32[$0>>2] = $8;
     $10 = ((($0)) + 4|0);
     HEAP32[$10>>2] = $11;
    }
   }
   do {
    if ((label|0) == 7) {
     $12 = HEAP8[$2>>0]|0;
     $13 = ($12<<24>>24)==(0);
     if ($13) {
      break L5;
     } else {
      HEAP32[$0>>2] = 0;
      break;
     }
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 $16 = ((($1)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $cond$i = ($18|0)==(0);
 do {
  if ($cond$i) {
   $19 = ((($1)) + 4|0);
   $20 = ((($19)) + 9|0);
   $21 = ((($19)) + 4|0);
   $22 = ((($1)) + 52|0);
   $$pre = HEAP8[$20>>0]|0;
   $$pre30 = HEAP32[$21>>2]|0;
   $$pre31 = HEAP32[$22>>2]|0;
   $33 = $$pre;$37 = $$pre30;
   while(1) {
    $34 = ($33<<24>>24)!=(0);
    $35 = $34 ^ 1;
    $36 = $35&1;
    HEAP8[$20>>0] = $36;
    $38 = ($37|0)==(0);
    $39 = ($$pre31|0)==($37|0);
    $or$cond$i$i$i$i$i$i = $38 | $39;
    if (!($or$cond$i$i$i$i$i$i)) {
     $40 = ($$pre31>>>0)>($37>>>0);
     if (!($40)) {
      label = 18;
      break;
     }
     $41 = (($17) + ($37)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)>(-65);
     if (!($43)) {
      label = 18;
      break;
     }
    }
    do {
     if ($38) {
      $$sink$i$i$i$i = 0;$_11$sroa$4$0$i$i = 0;
     } else {
      $46 = (($17) + ($37)|0);
      $47 = ((($46)) + -1|0);
      $45 = HEAP8[$47>>0]|0;
      $48 = ($45<<24>>24)>(-1);
      if ($48) {
       $44 = $45&255;
       $$sink$i$i$i$i = 1;$_11$sroa$4$0$i$i = $44;
       break;
      }
      $49 = ($47|0)==($17|0);
      if ($49) {
       $ch$1$i$i$i$i = 0;
      } else {
       $50 = ((($46)) + -2|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = $51 & 31;
       $53 = $52&255;
       $54 = $51 & -64;
       $55 = ($54<<24>>24)==(-128);
       if ($55) {
        $56 = ($50|0)==($17|0);
        if ($56) {
         $ch$0$i$i$i$i = 0;
        } else {
         $57 = ((($46)) + -3|0);
         $58 = HEAP8[$57>>0]|0;
         $59 = $58 & 15;
         $60 = $59&255;
         $61 = $58 & -64;
         $62 = ($61<<24>>24)==(-128);
         if ($62) {
          $63 = ($57|0)==($17|0);
          if ($63) {
           $_0$0$i12$i$i$i$i = 0;
          } else {
           $64 = ((($46)) + -4|0);
           $65 = HEAP8[$64>>0]|0;
           $phitmp$i$i$i$i = $65 & 7;
           $_0$0$i12$i$i$i$i = $phitmp$i$i$i$i;
          }
          $66 = $_0$0$i12$i$i$i$i&255;
          $67 = $66 << 6;
          $68 = $58 & 63;
          $69 = $68&255;
          $70 = $67 | $69;
          $ch$0$i$i$i$i = $70;
         } else {
          $ch$0$i$i$i$i = $60;
         }
        }
        $71 = $ch$0$i$i$i$i << 6;
        $72 = $51 & 63;
        $73 = $72&255;
        $74 = $71 | $73;
        $ch$1$i$i$i$i = $74;
       } else {
        $ch$1$i$i$i$i = $53;
       }
      }
      $75 = $ch$1$i$i$i$i << 6;
      $76 = $45 & 63;
      $77 = $76&255;
      $78 = $75 | $77;
      $$sink$i$i$i$i = 1;$_11$sroa$4$0$i$i = $78;
     }
    } while(0);
    if ($34) {
     label = 35;
     break;
    }
    $cond2$i$i = ($$sink$i$i$i$i|0)==(0);
    if ($cond2$i$i) {
     label = 33;
     break;
    }
    $79 = ($_11$sroa$4$0$i$i>>>0)<(128);
    $80 = ($_11$sroa$4$0$i$i>>>0)<(2048);
    $81 = ($_11$sroa$4$0$i$i>>>0)<(65536);
    $$$i$i$i = $81 ? 3 : 4;
    $$$$i$i$i = $80 ? 2 : $$$i$i$i;
    $$$$$i$i$i = $79 ? 1 : $$$$i$i$i;
    $82 = (($37) - ($$$$$i$i$i))|0;
    HEAP32[$21>>2] = $82;
    $33 = $36;$37 = $82;
   }
   if ((label|0) == 18) {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($17,$$pre31,0,$37);
    // unreachable;
   }
   else if ((label|0) == 33) {
    HEAP32[$_19>>2] = 0;
    break;
   }
   else if ((label|0) == 35) {
    HEAP32[$_19>>2] = 1;
    $83 = ((($_19)) + 4|0);
    HEAP32[$83>>2] = $37;
    $84 = ((($_19)) + 8|0);
    HEAP32[$84>>2] = $37;
    break;
   }
  } else {
   $23 = ((($1)) + 8|0);
   $24 = ((($23)) + 28|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(-1);
   $27 = ((($1)) + 52|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($1)) + 56|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($1)) + 60|0);
   $32 = HEAP32[$31>>2]|0;
   if ($26) {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17hf0b050317123011aE($_19,$23,$17,$28,$30,$32,1);
    break;
   } else {
    __ZN4core3str7pattern14TwoWaySearcher9next_back17hf0b050317123011aE($_19,$23,$17,$28,$30,$32,0);
    break;
   }
  }
 } while(0);
 $85 = HEAP32[$_19>>2]|0;
 $cond = ($85|0)==(0);
 if ($cond) {
  HEAP8[$2>>0] = 1;
  $86 = ((($1)) + 64|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($1)) + 68|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) - ($87))|0;
  $$pn = $87;$$sink = $90;
 } else {
  $91 = ((($_19)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($_19)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($1)) + 68|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) - ($94))|0;
  HEAP32[$95>>2] = $92;
  $$pn = $94;$$sink = $97;
 }
 $$sink4 = (($17) + ($$pn)|0);
 HEAP32[$0>>2] = $$sink4;
 $98 = ((($0)) + 4|0);
 HEAP32[$98>>2] = $$sink;
 STACKTOP = sp;return;
}
function __ZN4core6result13unwrap_failed17hb0360f04dda71ec6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_12 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 5363;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP8[$error>>0] = $0;
 $2 = $msg;
 $3 = $error;
 HEAP32[$_12>>2] = $2;
 $4 = ((($_12)) + 4|0);
 HEAP32[$4>>2] = (93);
 $5 = ((($_12)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_12)) + 12|0);
 HEAP32[$6>>2] = (126);
 HEAP32[$_5>>2] = 2304;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_12;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,2320);
 // unreachable;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_8position28__u7b__u7b_closure_u7d__u7d_17he629dfc9e1c0c477E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17$i$i = 0, $_6$i$i$i$i$i$i = 0;
 var $_8$i$i$i$i$i$i = 0, $cond$i$i$i = 0, $info$i$i = 0, $not$not$cond$i$i$i$i$i$i$i = 0, $self$sroa$0$0$copyload$i$i$i = 0, $self$sroa$5$0$$sroa_idx4$i$i$i = 0, $self$sroa$5$0$copyload$i$i$i = 0, $self$sroa$6$0$$sroa_idx6$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_8$i$i$i$i$i$i = sp + 48|0;
 $_6$i$i$i$i$i$i = sp + 32|0;
 $_17$i$i = sp + 16|0;
 $info$i$i = sp;
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$info$i$i>>2]=0|0;HEAP32[$info$i$i+4>>2]=0|0;HEAP32[$info$i$i+8>>2]=0|0;HEAP32[$info$i$i+12>>2]=0|0;
 $4 = (_dladdr(($3|0),($info$i$i|0))|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   label = 7;
  } else {
   $9 = ((($info$i$i)) + 8|0);
   $6 = HEAP32[$9>>2]|0;
   $10 = ($6|0)==(0|0);
   if ($10) {
    label = 7;
   } else {
    $7 = (_strlen($6)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E(-1,0);
     // unreachable;
    }
    __ZN4core3str9from_utf817h7d85691fcaee98e9E($_17$i$i,$6,$7);
    $self$sroa$0$0$copyload$i$i$i = HEAP32[$_17$i$i>>2]|0;
    $self$sroa$5$0$$sroa_idx4$i$i$i = ((($_17$i$i)) + 4|0);
    $self$sroa$5$0$copyload$i$i$i = HEAP32[$self$sroa$5$0$$sroa_idx4$i$i$i>>2]|0;
    $cond$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(0);
    if (!($cond$i$i$i)) {
     label = 7;
     break;
    }
    $self$sroa$6$0$$sroa_idx6$i$i$i = ((($_17$i$i)) + 8|0);
    $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i$i$i>>2]|0;
    __ZN4core3str7pattern11StrSearcher3new17hc86c75e217a0025cE($_8$i$i$i$i$i$i,$self$sroa$5$0$copyload$i$i$i,$self$sroa$6$0$copyload$i$i$i,5265,28);
    __ZN122__LT_core__str__pattern__StrSearcher_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__str__pattern__Searcher_LT__u27_a_GT__GT_10next_match17h9b728b0e4720be7aE($_6$i$i$i$i$i$i,$_8$i$i$i$i$i$i);
    $13 = HEAP32[$_6$i$i$i$i$i$i>>2]|0;
    $not$not$cond$i$i$i$i$i$i$i = ($13|0)==(0);
    $14 = ((($1)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    if ($not$not$cond$i$i$i$i$i$i$i) {
     $19 = $15;$20 = $14;
    } else {
     HEAP32[$0>>2] = 1;
     $16 = ((($0)) + 4|0);
     HEAP32[$16>>2] = 1;
     $17 = ((($0)) + 8|0);
     HEAP32[$17>>2] = $15;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $19 = $12;$20 = $11;
 }
 $18 = (($19) + 1)|0;
 HEAP32[$20>>2] = $18;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN122__LT_core__str__pattern__StrSearcher_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__str__pattern__Searcher_LT__u27_a_GT__GT_10next_match17h9b728b0e4720be7aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$$$i$i = 0, $$$$i$i = 0, $$$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phi68Z2D = 0, $$sink$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $_0$0$i14$i$i$i = 0, $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_11$sroa$4$0$i = 0, $cond = 0, $cond2$i = 0, $or$cond$i$i$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $cond = ($2|0)==(0);
 if (!($cond)) {
  $7 = ((($1)) + 8|0);
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(-1);
  $11 = ((($1)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($1)) + 56|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($1)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  if ($10) {
   __ZN4core3str7pattern14TwoWaySearcher4next17hf78f190f42b428c9E($0,$7,$12,$14,$16,$18,1);
   return;
  } else {
   __ZN4core3str7pattern14TwoWaySearcher4next17hf78f190f42b428c9E($0,$7,$12,$14,$16,$18,0);
   return;
  }
 }
 $3 = ((($1)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = ((($1)) + 48|0);
 $6 = ((($1)) + 52|0);
 while(1) {
  $19 = HEAP8[$4>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  $21 = $20 ^ 1;
  $22 = $21&1;
  HEAP8[$4>>0] = $22;
  $23 = HEAP32[$3>>2]|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = HEAP32[$6>>2]|0;
  $26 = ($23|0)==(0);
  $27 = ($25|0)==($23|0);
  $or$cond$i$i$i$i$i = $26 | $27;
  if ($or$cond$i$i$i$i$i) {
   $$pre$i$i$i$i = (($24) + ($23)|0);
   $$pre$phi68Z2D = $$pre$i$i$i$i;
  } else {
   $28 = ($25>>>0)>($23>>>0);
   if (!($28)) {
    label = 8;
    break;
   }
   $29 = (($24) + ($23)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)>(-65);
   if ($31) {
    $$pre$phi68Z2D = $29;
   } else {
    label = 8;
    break;
   }
  }
  $32 = (($24) + ($23)|0);
  $33 = (($25) - ($23))|0;
  $34 = (($32) + ($33)|0);
  $35 = ($$pre$phi68Z2D|0)==($34|0);
  do {
   if ($35) {
    $$sink$i$i$i = 0;$_11$sroa$4$0$i = 0;
   } else {
    $38 = (($24) + ($23)|0);
    $39 = ((($38)) + 1|0);
    $37 = HEAP8[$$pre$phi68Z2D>>0]|0;
    $40 = ($37<<24>>24)>(-1);
    if ($40) {
     $36 = $37&255;
     $$sink$i$i$i = 1;$_11$sroa$4$0$i = $36;
     break;
    }
    $41 = $37 & 31;
    $42 = $41&255;
    $43 = ($33|0)==(1);
    if ($43) {
     $51 = $34;$_0$0$i20$i$i$i = 0;
    } else {
     $44 = (($24) + ($23)|0);
     $45 = ((($44)) + 2|0);
     $46 = HEAP8[$39>>0]|0;
     $phitmp$i$i$i = $46 & 63;
     $51 = $45;$_0$0$i20$i$i$i = $phitmp$i$i$i;
    }
    $47 = $42 << 6;
    $48 = $_0$0$i20$i$i$i&255;
    $49 = $48 | $47;
    $50 = ($37&255)>(223);
    if ($50) {
     $52 = ($51|0)==($34|0);
     if ($52) {
      $61 = $34;$_0$0$i14$i$i$i = 0;
     } else {
      $53 = ((($51)) + 1|0);
      $54 = HEAP8[$51>>0]|0;
      $phitmp26$i$i$i = $54 & 63;
      $61 = $53;$_0$0$i14$i$i$i = $phitmp26$i$i$i;
     }
     $55 = $48 << 6;
     $56 = $_0$0$i14$i$i$i&255;
     $57 = $56 | $55;
     $58 = $42 << 12;
     $59 = $57 | $58;
     $60 = ($37&255)>(239);
     if ($60) {
      $62 = ($61|0)==($34|0);
      if ($62) {
       $_0$0$i9$i$i$i = 0;
      } else {
       $63 = HEAP8[$61>>0]|0;
       $phitmp27$i$i$i = $63 & 63;
       $_0$0$i9$i$i$i = $phitmp27$i$i$i;
      }
      $64 = $42 << 18;
      $65 = $64 & 1835008;
      $66 = $57 << 6;
      $67 = $_0$0$i9$i$i$i&255;
      $68 = $66 | $65;
      $69 = $68 | $67;
      $$sink$i$i$i = 1;$_11$sroa$4$0$i = $69;
     } else {
      $$sink$i$i$i = 1;$_11$sroa$4$0$i = $59;
     }
    } else {
     $$sink$i$i$i = 1;$_11$sroa$4$0$i = $49;
    }
   }
  } while(0);
  if ($20) {
   label = 25;
   break;
  }
  $cond2$i = ($$sink$i$i$i|0)==(0);
  if ($cond2$i) {
   label = 23;
   break;
  }
  $70 = ($_11$sroa$4$0$i>>>0)<(128);
  $71 = ($_11$sroa$4$0$i>>>0)<(2048);
  $72 = ($_11$sroa$4$0$i>>>0)<(65536);
  $$$i$i = $72 ? 3 : 4;
  $$$$i$i = $71 ? 2 : $$$i$i;
  $$$$$i$i = $70 ? 1 : $$$$i$i;
  $73 = (($$$$$i$i) + ($23))|0;
  HEAP32[$3>>2] = $73;
 }
 if ((label|0) == 8) {
  __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($24,$25,$23,$25);
  // unreachable;
 }
 else if ((label|0) == 23) {
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 25) {
  HEAP32[$0>>2] = 1;
  $74 = ((($0)) + 4|0);
  HEAP32[$74>>2] = $23;
  $75 = ((($0)) + 8|0);
  HEAP32[$75>>2] = $23;
  return;
 }
}
function __ZN4core3str7pattern14TwoWaySearcher4next17hf78f190f42b428c9E($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i = 0, $iter$sroa$0$0 = 0, $iter3$sroa$0$0$extract$trunc = 0, $iter3$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($1)) + 20|0);
 $8 = (($5) + -1)|0;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($8) + ($9))|0;
 $11 = ($10>>>0)<($3>>>0);
 L1: do {
  if ($11) {
   $12 = $1;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($1)) + 28|0);
   $19 = ((($1)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($1)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) - ($22))|0;
   $71 = $10;$72 = $9;
   L3: while(1) {
    $73 = $71;$74 = $72;
    L5: while(1) {
     $25 = $73;$37 = $74;
     while(1) {
      $24 = (($2) + ($25)|0);
      $26 = HEAP8[$24>>0]|0;
      $27 = $26 & 63;
      $28 = $27&255;
      $29 = (_bitshift64Shl(1,0,($28|0))|0);
      $30 = tempRet0;
      $31 = $29 & $14;
      $32 = $30 & $17;
      $33 = ($31|0)==(0);
      $34 = ($32|0)==(0);
      $35 = $33 & $34;
      if (!($35)) {
       break;
      }
      $36 = (($37) + ($5))|0;
      HEAP32[$7>>2] = $36;
      if (!($6)) {
       HEAP32[$18>>2] = 0;
      }
      $38 = (($8) + ($36))|0;
      $39 = ($38>>>0)<($3>>>0);
      if ($39) {
       $25 = $38;$37 = $36;
      } else {
       break L1;
      }
     }
     if ($6) {
      $iter$sroa$0$0 = $20;
     } else {
      $40 = HEAP32[$18>>2]|0;
      $41 = ($40>>>0)>=($20>>>0);
      $_0$0$sroa$speculated$i$i = $41 ? $40 : $20;
      $iter$sroa$0$0 = $_0$0$sroa$speculated$i$i;
     }
     while(1) {
      $42 = ($iter$sroa$0$0>>>0)<($5>>>0);
      if (!($42)) {
       break L5;
      }
      $$arith = (($iter$sroa$0$0) + 1)|0;
      $$overflow = ($iter$sroa$0$0>>>0)>(4294967294);
      if ($$overflow) {
       break L5;
      }
      $44 = (($37) + ($iter$sroa$0$0))|0;
      $45 = ($44>>>0)<($3>>>0);
      if (!($45)) {
       label = 17;
       break L3;
      }
      $46 = (($4) + ($iter$sroa$0$0)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (($2) + ($44)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($47<<24>>24)==($49<<24>>24);
      if ($50) {
       $iter$sroa$0$0 = $$arith;
      } else {
       break;
      }
     }
     $51 = (($$arith) + ($37))|0;
     $52 = (($51) - ($20))|0;
     HEAP32[$7>>2] = $52;
     if (!($6)) {
      HEAP32[$18>>2] = 0;
     }
     $53 = (($8) + ($52))|0;
     $54 = ($53>>>0)<($3>>>0);
     if ($54) {
      $73 = $53;$74 = $52;
     } else {
      break L1;
     }
    }
    $43 = HEAP32[$18>>2]|0;
    $iter3$sroa$0$0$extract$trunc = $6 ? 0 : $43;
    $iter3$sroa$5$0 = $20;
    while(1) {
     $55 = ($iter3$sroa$0$0$extract$trunc>>>0)<($iter3$sroa$5$0>>>0);
     $56 = (($iter3$sroa$5$0) + -1)|0;
     if (!($55)) {
      label = 23;
      break L3;
     }
     $58 = ($56>>>0)<($5>>>0);
     if (!($58)) {
      label = 33;
      break L3;
     }
     $59 = (($37) + ($56))|0;
     $60 = ($59>>>0)<($3>>>0);
     if (!($60)) {
      label = 26;
      break L3;
     }
     $61 = (($4) + ($56)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = (($2) + ($59)|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($62<<24>>24)==($64<<24>>24);
     if ($65) {
      $iter3$sroa$5$0 = $56;
     } else {
      break;
     }
    }
    $66 = (($22) + ($37))|0;
    HEAP32[$7>>2] = $66;
    if (!($6)) {
     HEAP32[$18>>2] = $23;
    }
    $67 = (($8) + ($66))|0;
    $68 = ($67>>>0)<($3>>>0);
    if ($68) {
     $71 = $67;$72 = $66;
    } else {
     break L1;
    }
   }
   if ((label|0) == 17) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2760,$44,$3);
    // unreachable;
   }
   else if ((label|0) == 23) {
    $57 = (($37) + ($5))|0;
    HEAP32[$7>>2] = $57;
    if (!($6)) {
     HEAP32[$18>>2] = 0;
    }
    HEAP32[$0>>2] = 1;
    $69 = ((($0)) + 4|0);
    HEAP32[$69>>2] = $37;
    $70 = ((($0)) + 8|0);
    HEAP32[$70>>2] = $57;
    return;
   }
   else if ((label|0) == 26) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2760,$59,$3);
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2776,$56,$5);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$7>>2] = $3;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN4core3str7pattern14TwoWaySearcher9next_back17hf0b050317123011aE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $39$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i = 0, $iter$sroa$5$0 = 0, $iter$sroa$5$0$ph = 0, $iter1$sroa$0$0 = 0, $needle_end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($1)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 $10 = ($9>>>0)<($3>>>0);
 L1: do {
  if ($10) {
   $11 = $1;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($1)) + 32|0);
   $18 = ((($1)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($1)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $69 = $8;$70 = $9;
   L3: while(1) {
    $71 = $69;$72 = $70;
    L5: while(1) {
     $23 = $72;$39 = $71;
     while(1) {
      $22 = (($2) + ($23)|0);
      $24 = HEAP8[$22>>0]|0;
      $25 = $24 & 63;
      $26 = $25&255;
      $27 = (_bitshift64Shl(1,0,($26|0))|0);
      $28 = tempRet0;
      $29 = $27 & $13;
      $30 = $28 & $16;
      $31 = ($29|0)==(0);
      $32 = ($30|0)==(0);
      $33 = $31 & $32;
      if (!($33)) {
       break;
      }
      HEAP32[$7>>2] = $23;
      if (!($6)) {
       HEAP32[$17>>2] = $5;
      }
      $34 = (($23) - ($5))|0;
      $35 = ($34>>>0)<($3>>>0);
      if ($35) {
       $39$phi = $23;$23 = $34;$39 = $39$phi;
      } else {
       break L1;
      }
     }
     if ($6) {
      $iter$sroa$5$0$ph = $19;
     } else {
      $36 = HEAP32[$17>>2]|0;
      $37 = ($19>>>0)<=($36>>>0);
      $_0$0$sroa$speculated$i$i = $37 ? $19 : $36;
      $iter$sroa$5$0$ph = $_0$0$sroa$speculated$i$i;
     }
     $38 = (($39) - ($5))|0;
     $iter$sroa$5$0 = $iter$sroa$5$0$ph;
     while(1) {
      $40 = ($iter$sroa$5$0|0)==(0);
      $41 = (($iter$sroa$5$0) + -1)|0;
      if ($40) {
       break L5;
      }
      $43 = ($41>>>0)<($5>>>0);
      if (!($43)) {
       label = 35;
       break L3;
      }
      $44 = (($38) + ($41))|0;
      $45 = ($44>>>0)<($3>>>0);
      if (!($45)) {
       label = 18;
       break L3;
      }
      $46 = (($4) + ($41)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (($2) + ($44)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($47<<24>>24)==($49<<24>>24);
      if ($50) {
       $iter$sroa$5$0 = $41;
      } else {
       break;
      }
     }
     $51 = (($39) + ($41))|0;
     $52 = (($51) - ($19))|0;
     HEAP32[$7>>2] = $52;
     if (!($6)) {
      HEAP32[$17>>2] = $5;
     }
     $53 = (($52) - ($5))|0;
     $54 = ($53>>>0)<($3>>>0);
     if ($54) {
      $71 = $52;$72 = $53;
     } else {
      break L1;
     }
    }
    $42 = HEAP32[$17>>2]|0;
    $needle_end$0 = $6 ? $5 : $42;
    $iter1$sroa$0$0 = $19;
    while(1) {
     $55 = ($iter1$sroa$0$0>>>0)<($needle_end$0>>>0);
     if (!($55)) {
      label = 25;
      break L3;
     }
     $$arith = (($iter1$sroa$0$0) + 1)|0;
     $$overflow = ($iter1$sroa$0$0>>>0)>(4294967294);
     if ($$overflow) {
      label = 25;
      break L3;
     }
     $56 = ($iter1$sroa$0$0>>>0)<($5>>>0);
     if (!($56)) {
      label = 36;
      break L3;
     }
     $57 = (($38) + ($iter1$sroa$0$0))|0;
     $58 = ($57>>>0)<($3>>>0);
     if (!($58)) {
      label = 28;
      break L3;
     }
     $59 = (($4) + ($iter1$sroa$0$0)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = (($2) + ($57)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = ($60<<24>>24)==($62<<24>>24);
     if ($63) {
      $iter1$sroa$0$0 = $$arith;
     } else {
      break;
     }
    }
    $64 = (($39) - ($21))|0;
    HEAP32[$7>>2] = $64;
    if (!($6)) {
     HEAP32[$17>>2] = $21;
    }
    $65 = (($64) - ($5))|0;
    $66 = ($65>>>0)<($3>>>0);
    if ($66) {
     $69 = $64;$70 = $65;
    } else {
     break L1;
    }
   }
   if ((label|0) == 18) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2760,$44,$3);
    // unreachable;
   }
   else if ((label|0) == 25) {
    HEAP32[$7>>2] = $38;
    if (!($6)) {
     HEAP32[$17>>2] = $5;
    }
    HEAP32[$0>>2] = 1;
    $67 = ((($0)) + 4|0);
    HEAP32[$67>>2] = $38;
    $68 = ((($0)) + 8|0);
    HEAP32[$68>>2] = $39;
    return;
   }
   else if ((label|0) == 28) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2760,$57,$3);
    // unreachable;
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2792,$41,$5);
    // unreachable;
   }
   else if ((label|0) == 36) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(2808,$iter1$sroa$0$0,$5);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp8trace_fn17hf4065802a72a53dfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ip_before_insn = sp;
 HEAP32[$ip_before_insn>>2] = 0;
 $2 = (__Unwind_GetIPInfo(($0|0),($ip_before_insn|0))|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$ip_before_insn>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 $6 = $or$cond << 31 >> 31;
 $ip$0$v = (($6) + ($2))|0;
 $ip$0 = $ip$0$v;
 $7 = (__Unwind_FindEnclosingFunction(($ip$0|0))|0);
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($8<<3)|0);
 HEAP32[$14>>2] = $ip$0;
 $15 = (((($13) + ($8<<3)|0)) + 4|0);
 HEAP32[$15>>2] = $7;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$1>>2] = $17;
 STACKTOP = sp;return 0;
}
function __ZN4core3ptr13drop_in_place17h341dfaf7383c3fbdE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN89__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17h7ad38f88921ff96cE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = 5527;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = 39;
 return;
}
function __ZN3std5error5Error5cause17hf2aa23a86f2c278cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h90aba9faf5727981E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1416560834);
 return -1981514837;
}
function __ZN90__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h886cd6c0308243ffE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$1$gep = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_16 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_16 = sp + 40|0;
 $_13 = sp + 24|0;
 $_6 = sp;
 HEAP32[$_16>>2] = 5527;
 $$fca$1$gep = ((($_16)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 39;
 $2 = $_16;
 $3 = $0;
 HEAP32[$_13>>2] = $2;
 $4 = ((($_13)) + 4|0);
 HEAP32[$4>>2] = (93);
 $5 = ((($_13)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_13)) + 12|0);
 HEAP32[$6>>2] = (127);
 HEAP32[$_6>>2] = 2304;
 $7 = ((($_6)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_6)) + 16|0);
 HEAP32[$8>>2] = $_13;
 $9 = ((($_6)) + 20|0);
 HEAP32[$9>>2] = 2;
 $10 = (__ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE($1,$_6)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN88__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17hbc7307a594bc5e52E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_15 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_15 = sp + 12|0;
 $builder = sp;
 __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder,$1,5516,11);
 HEAP32[$_15>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder,$_15,208)|0);
 $2 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr13drop_in_place17h19a3edbf66e80dadE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d5b86af9c231899E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h56ce4bcfe7181aeaE($2,$1)|0);
 return ($3|0);
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h9572bbcf010a0942E($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i10 = 0, $_19$sroa$0$sroa$0$0$_19$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_6$i$i$i = 0, $cond$i$i = 0, $cond$i$i8 = 0, $err$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i = sp + 16|0;
 $_6$i$i$i = sp;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i8 = ($1|0)==(0);
 if ($cond$i$i8) {
  $2 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($0)|0);
  $_0$0$i$i10 = $2;
 } else {
  $_0$0$i$i10 = $1;
 }
 $3 = (_pthread_getspecific(($_0$0$i$i10|0))|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ($3|0)==((1)|0);
  $6 = ((($3)) + 4|0);
  $$ = $5 ? 0 : $6;
  STACKTOP = sp;return ($$|0);
 }
 $7 = (___rust_alloc(20,4,$err$i$i)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i);
  // unreachable;
 }
 HEAP32[$7>>2] = $0;
 $_19$sroa$0$sroa$0$0$_19$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($7)) + 4|0);
 HEAP32[$_19$sroa$0$sroa$0$0$_19$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $cond$i$i = ($9|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $9;
  (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
  STACKTOP = sp;return ($_19$sroa$0$sroa$0$0$_19$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
 }
 $10 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($0)|0);
 $_0$0$i$i = $10;
 (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
 STACKTOP = sp;return ($_19$sroa$0$sroa$0$0$_19$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
}
function __ZN3std3ffi5c_str7CString3new17h282a25fff99126d3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = 0, $_38$i$i$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i$i = 0, $vector$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i$i$i$i$i$i$i$i = sp + 48|0;
 $_38$i$i$i$i$i$i$i = sp + 32|0;
 $vector$i$i$i$i = sp + 16|0;
 $_3 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $4 = ($2|0)==(0);
 if ($4) {
  $ptr$0$i$i$i$i$i$i$i = (1);
 } else {
  $5 = (___rust_alloc($2,1,$err$i$i$i$i$i$i$i$i)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_38$i$i$i$i$i$i$i);
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i$i = $5;
  }
 }
 $7 = $ptr$0$i$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i$i>>2] = $7;
 $$sroa_idx$i$i$i$i$i = ((($vector$i$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i$i>>2] = $2;
 $8 = ((($vector$i$i$i$i)) + 8|0);
 HEAP32[$8>>2] = 0;
 __THREW__ = 0;
 invoke_vii(115,($vector$i$i$i$i|0),($2|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($vector$i$i$i$i);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $13 = HEAP32[$8>>2]|0;
  $14 = (($13) + ($2))|0;
  HEAP32[$8>>2] = $14;
  $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i>>2]|0;
  $15 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i) + ($13)|0);
  _memcpy(($15|0),($1|0),($2|0))|0;
  ;HEAP32[$_3>>2]=HEAP32[$vector$i$i$i$i>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$vector$i$i$i$i+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$vector$i$i$i$i+8>>2]|0;
  __ZN3std3ffi5c_str7CString4_new17h55226b30b4e6e293E($0,$_3);
  STACKTOP = sp;return;
 }
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hbb0b8161f180c76fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $_4$i$i$i = 0, $_5$sroa$4$0$$sroa_idx$i = 0, $_5$sroa$4$i = 0, $_5$sroa$43$0$$sroa_idx4$i = 0, $_6$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i = 0, $err$i$i$i$i = 0;
 var $err$i$i$i$i$i$i$i = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 80|0;
 $_6$i$i$i$i$i = sp + 64|0;
 $x$i$sroa$4$i = sp + 95|0;
 $_5$sroa$4$i = sp + 92|0;
 $err$i$i$i$i$i$i$i = sp + 48|0;
 $_6$i$i$i$i$i$i$i$i = sp + 32|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 __THREW__ = 0;
 invoke_viii(122,($_4$i$i$i|0),(6146|0),33);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  __ZN4core3ptr13drop_in_place17hab0dbab777900203E($1);
  ___resumeException($12|0);
  // unreachable;
 }
 ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
 $4 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$4+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
 $6 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
  // unreachable;
 }
 HEAP8[$6>>0] = 11;
 $x$i$sroa$4$0$$sroa_raw_idx$i = ((($6)) + 1|0);
 ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
 $x$i$sroa$5$0$$sroa_idx$i = ((($6)) + 4|0);
 HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $4;
 $x$i$sroa$6$0$$sroa_idx$i = ((($6)) + 8|0);
 HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 104;
 HEAP8[$0>>0] = 2;
 $_5$sroa$4$0$$sroa_idx$i = ((($0)) + 1|0);
 ;HEAP8[$_5$sroa$4$0$$sroa_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
 $_5$sroa$43$0$$sroa_idx4$i = ((($0)) + 4|0);
 HEAP32[$_5$sroa$43$0$$sroa_idx4$i>>2] = $6;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 4|0);
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$11>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i,$9,1);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hd800b7b6df6ea60aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$0>>2]|0;
 ___rust_dealloc($5,$3,1);
 return;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h29d5967feafbc7d1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_36$sroa$0$0$copyload44$i = 0, $_50$i = 0, $cond4$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0;
 var $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_50$i = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h299a35470dcb4d8eE(6096,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_alloc($_0$0$sroa$speculated$i$i$i$i,1,$err$i11$i)|0);
  $13 = ($12|0)==(0|0);
  $$$i = $13&1;
  $24 = 0;$27 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $12;
 } else {
  $_36$sroa$0$0$copyload44$i = HEAP32[$0>>2]|0;
  $14 = (___rust_realloc($_36$sroa$0$0$copyload44$i,$5,1,$_0$0$sroa$speculated$i$i$i$i,1,$err$i$i)|0);
  $15 = ($14|0)==(0|0);
  $res$sroa$5$4$copyload24$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $16 = $res$sroa$11$4$$sroa_idx$i;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $res$sroa$5$1$i = $15 ? $res$sroa$5$4$copyload24$i : $14;
  $$sink$i$i = $15&1;
  $24 = $18;$27 = $21;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $cond4$i = ($res$sroa$0$0$i|0)==(0);
 if (!($cond4$i)) {
  HEAP32[$_50$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_50$i)) + 4|0);
  $22 = $e$sroa$4$0$$sroa_idx$i;
  $23 = $22;
  HEAP32[$23>>2] = $24;
  $25 = (($22) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $27;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_50$i);
  // unreachable;
 }
 HEAP32[$0>>2] = $res$sroa$5$2$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i,$2,1);
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0bab3d1be7de4311E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17h94995685e007180dE($2,$3,$5);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $6 = (__ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17h68bc9bea5fb7af06E($$sreg$field,$$sreg$field2,$1)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h2729587ea2440bbcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_12 = 0, $_19 = 0;
 var $_3$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $_34 = 0, $_41 = 0, $_44 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i20 = 0, $code = 0, $detail = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_44 = sp + 88|0;
 $_41 = sp + 80|0;
 $_34 = sp + 56|0;
 $_19 = sp + 40|0;
 $_12 = sp + 16|0;
 $detail = sp;
 $code = sp + 96|0;
 $trunc = HEAP8[$0>>0]|0;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $18 = ((($0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$code>>2] = $19;
  __ZN3std3sys3imp2os12error_string17hf2e9860da5f44c96E($detail,$19);
  $20 = $detail;
  $21 = $code;
  HEAP32[$_19>>2] = $20;
  $22 = ((($_19)) + 4|0);
  HEAP32[$22>>2] = (128);
  $23 = ((($_19)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = ((($_19)) + 12|0);
  HEAP32[$24>>2] = (129);
  HEAP32[$_12>>2] = 2904;
  $25 = ((($_12)) + 4|0);
  HEAP32[$25>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i20 = ((($_12)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i20>>2] = 0;
  $26 = ((($_12)) + 16|0);
  HEAP32[$26>>2] = $_19;
  $27 = ((($_12)) + 20|0);
  HEAP32[$27>>2] = 2;
  __THREW__ = 0;
  $28 = (invoke_iii(130,($1|0),($_12|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   __ZN4core3ptr13drop_in_place17h5fb21c76c2129501E($detail);
   ___resumeException($34|0);
   // unreachable;
  }
  $31 = ((($detail)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if (!($33)) {
   $_3$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$detail>>2]|0;
   ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i,$32,1);
  }
  $_0$sroa$0$0 = $28;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 case 1:  {
  $2 = ((($0)) + 1|0);
  $trunc$i = HEAP8[$2>>0]|0;
  $trunc$i$clear = $trunc$i & 31;
  do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    $$sink$i = 16;$$sink2$i = 5703;
    break;
   }
   case 1:  {
    $$sink$i = 17;$$sink2$i = 5983;
    break;
   }
   case 2:  {
    $$sink$i = 18;$$sink2$i = 5719;
    break;
   }
   case 3:  {
    $$sink$i = 16;$$sink2$i = 5737;
    break;
   }
   case 4:  {
    $$sink$i = 18;$$sink2$i = 5753;
    break;
   }
   case 5:  {
    $$sink$i = 13;$$sink2$i = 5771;
    break;
   }
   case 6:  {
    $$sink$i = 14;$$sink2$i = 5784;
    break;
   }
   case 7:  {
    $$sink$i = 21;$$sink2$i = 5798;
    break;
   }
   case 8:  {
    $$sink$i = 11;$$sink2$i = 5819;
    break;
   }
   case 9:  {
    $$sink$i = 21;$$sink2$i = 5830;
    break;
   }
   case 10:  {
    $$sink$i = 21;$$sink2$i = 5851;
    break;
   }
   case 11:  {
    $$sink$i = 23;$$sink2$i = 5872;
    break;
   }
   case 12:  {
    $$sink$i = 12;$$sink2$i = 5895;
    break;
   }
   case 13:  {
    $$sink$i = 9;$$sink2$i = 5907;
    break;
   }
   case 14:  {
    $$sink$i = 10;$$sink2$i = 5916;
    break;
   }
   case 15:  {
    $$sink$i = 21;$$sink2$i = 5926;
    break;
   }
   case 16:  {
    $$sink$i = 14;$$sink2$i = 5947;
    break;
   }
   case 17:  {
    $$sink$i = 22;$$sink2$i = 5961;
    break;
   }
   default: {
    __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(4974,40,2880);
    // unreachable;
   }
   }
  } while(0);
  HEAP32[$_44>>2] = $$sink2$i;
  $$fca$1$gep = ((($_44)) + 4|0);
  HEAP32[$$fca$1$gep>>2] = $$sink$i;
  $3 = $_44;
  HEAP32[$_41>>2] = $3;
  $4 = ((($_41)) + 4|0);
  HEAP32[$4>>2] = (93);
  HEAP32[$_34>>2] = 2896;
  $5 = ((($_34)) + 4|0);
  HEAP32[$5>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_34)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $6 = ((($_34)) + 16|0);
  HEAP32[$6>>2] = $_41;
  $7 = ((($_34)) + 20|0);
  HEAP32[$7>>2] = 1;
  $8 = (__ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE($1,$_34)|0);
  $_0$sroa$0$0 = $8;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($10)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iii[$16 & 255]($12,$1)|0);
  $_0$sroa$0$0 = $17;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h4b4a2214e68b54beE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($0);
 return;
}
function __ZN3std3sys3imp2os12error_string17hf2e9860da5f44c96E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_24 = 0, $_9$i = 0, $buf = 0, $cond$i = 0, $e$sroa$4$0$$sroa_idx10$i = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$4$0$$sroa_idx4$i = 0, $self$sroa$4$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx6$i = 0, $self$sroa$6$0$copyload$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $_9$i = sp + 16|0;
 $_24 = sp;
 $buf = sp + 24|0;
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = (_strerror_r($1,$buf,128)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(6011,18,2928);
  // unreachable;
 }
 $4 = (_strlen($buf)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E(-1,0);
  // unreachable;
 }
 __ZN4core3str9from_utf817h7d85691fcaee98e9E($_24,$buf,$4);
 $self$sroa$0$0$copyload$i = HEAP32[$_24>>2]|0;
 $self$sroa$4$0$$sroa_idx4$i = ((($_24)) + 4|0);
 $self$sroa$4$0$copyload$i = HEAP32[$self$sroa$4$0$$sroa_idx4$i>>2]|0;
 $self$sroa$6$0$$sroa_idx6$i = ((($_24)) + 8|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i>>2]|0;
 $cond$i = ($self$sroa$0$0$copyload$i|0)==(0);
 if ($cond$i) {
  __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h7ea54c5aa9847fc6E($0,$self$sroa$4$0$copyload$i,$self$sroa$6$0$copyload$i);
  STACKTOP = sp;return;
 } else {
  HEAP32[$_9$i>>2] = $self$sroa$4$0$copyload$i;
  $e$sroa$4$0$$sroa_idx10$i = ((($_9$i)) + 4|0);
  HEAP32[$e$sroa$4$0$$sroa_idx10$i>>2] = $self$sroa$6$0$copyload$i;
  __ZN4core6result13unwrap_failed17ha2bac6273804179dE($_9$i);
  // unreachable;
 }
}
function __ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h2c4b843095aebb6fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h509ce010b1cead94E($_3$sroa$0$0$copyload2$i$i$i,$3,$1)|0);
 return ($4|0);
}
function __ZN4core6result13unwrap_failed17ha2bac6273804179dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_12 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 5363;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $error;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $msg;
 $13 = $error;
 HEAP32[$_12>>2] = $12;
 $14 = ((($_12)) + 4|0);
 HEAP32[$14>>2] = (93);
 $15 = ((($_12)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = ((($_12)) + 12|0);
 HEAP32[$16>>2] = (131);
 HEAP32[$_5>>2] = 2304;
 $17 = ((($_5)) + 4|0);
 HEAP32[$17>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_5)) + 16|0);
 HEAP32[$18>>2] = $_12;
 $19 = ((($_5)) + 20|0);
 HEAP32[$19>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,2320);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hab0dbab777900203E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $_3$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$4>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i,$2,1);
 return;
}
function __ZN3std6thread5local2os13destroy_value17hf9342004a7c1e87bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i7 = 0, $cond$i$i = 0, $cond$i$i5 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = sp;
 HEAP32[$ptr>>2] = $0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(121,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   __ZN4core3ptr13drop_in_place17h635f19aa2e9fc3aaE($ptr);
   ___resumeException($8|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 ___rust_dealloc($0,12,4);
 $6 = HEAP32[$1>>2]|0;
 $cond$i$i5 = ($6|0)==(0);
 if (!($cond$i$i5)) {
  $_0$0$i$i7 = $6;
  (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($1)|0);
 $_0$0$i$i7 = $7;
 (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h635f19aa2e9fc3aaE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 ___rust_dealloc($1,12,4);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h13e8b151e6d3aaedE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1366732518);
 return 1957608458;
}
function __ZN4core3ptr13drop_in_place17heccadbc270c1480eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ee8a40636095d58E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h29d5967feafbc7d1E($3,$2);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2))|0;
 HEAP32[$4>>2] = $6;
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$3>>2]|0;
 $7 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i) + ($5)|0);
 _memcpy(($7|0),($1|0),($2|0))|0;
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h23785145b9c69a10E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i = 0, $$sink$i$i$i$i = 0, $$sink$sink$i$i$i$i = 0, $$sink15$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i = 0, $len$1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_19$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1>>>0)<(128);
 $4 = ($1>>>0)<(65536);
 if ($3) {
  $5 = $1&255;
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($2)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h3d2ca5fbd548127cE($2);
   $$pre$i$i$i = HEAP32[$6>>2]|0;
   $12 = $$pre$i$i$i;
  } else {
   $12 = $7;
  }
  $_3$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$2>>2]|0;
  $11 = (($_3$sroa$0$0$copyload2$i$i$i$i$i) + ($12)|0);
  HEAP8[$11>>0] = $5;
  $13 = HEAP32[$6>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$6>>2] = $14;
  STACKTOP = sp;return 0;
 }
 $15 = ($1>>>0)<(2048);
 HEAP32[$_19$i$i>>2] = 0;
 do {
  if ($15) {
   $16 = $1 >>> 6;
   $17 = $16 & 31;
   $18 = $17&255;
   $19 = $18 | -64;
   $$sink$i$i$i$i = $19;$$sink$sink$i$i$i$i = 1;$$sink15$i$i$i$i = $_19$i$i;$len$1$i$i$i$i = 2;
  } else {
   if ($4) {
    $20 = $1 >>> 12;
    $21 = $20 & 15;
    $22 = $21&255;
    $23 = $22 | -32;
    HEAP8[$_19$i$i>>0] = $23;
    $24 = $1 >>> 6;
    $25 = $24 & 63;
    $26 = $25&255;
    $27 = ((($_19$i$i)) + 1|0);
    $28 = $26 | -128;
    $$sink$i$i$i$i = $28;$$sink$sink$i$i$i$i = 2;$$sink15$i$i$i$i = $27;$len$1$i$i$i$i = 3;
    break;
   } else {
    $29 = $1 >>> 18;
    $30 = $29 & 7;
    $31 = $30&255;
    $32 = $31 | -16;
    HEAP8[$_19$i$i>>0] = $32;
    $33 = $1 >>> 12;
    $34 = $33 & 63;
    $35 = $34&255;
    $36 = ((($_19$i$i)) + 1|0);
    $37 = $35 | -128;
    HEAP8[$36>>0] = $37;
    $38 = $1 >>> 6;
    $39 = $38 & 63;
    $40 = $39&255;
    $41 = ((($_19$i$i)) + 2|0);
    $42 = $40 | -128;
    $$sink$i$i$i$i = $42;$$sink$sink$i$i$i$i = 3;$$sink15$i$i$i$i = $41;$len$1$i$i$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i$i$i>>0] = $$sink$i$i$i$i;
 $43 = $1 & 63;
 $44 = $43&255;
 $45 = (($_19$i$i) + ($$sink$sink$i$i$i$i)|0);
 $46 = $44 | -128;
 HEAP8[$45>>0] = $46;
 __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h29d5967feafbc7d1E($2,$len$1$i$i$i$i);
 $47 = ((($2)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + ($len$1$i$i$i$i))|0;
 HEAP32[$47>>2] = $49;
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i = HEAP32[$2>>2]|0;
 $50 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i) + ($48)|0);
 _memcpy(($50|0),($_19$i$i|0),($len$1$i$i$i$i|0))|0;
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hf4db80ddf0dcda0cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,8,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h3d2ca5fbd548127cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$sroa$0$0 = 0;
 var $_12$sroa$5$0 = 0, $_32$sroa$0$0$copyload60 = 0, $_43 = 0, $_59 = 0, $_60$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = 0, $e$sroa$4$0$$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$4$4$copyload3361 = 0, $ptr_res$sroa$8$4$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i = sp + 48|0;
 $err$i$i = sp + 32|0;
 $_59 = sp + 16|0;
 $_43 = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $18 = (___rust_alloc(4,1,$err$i$i)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_59);
   // unreachable;
  }
  $_12$sroa$0$0 = 4;$_12$sroa$5$0 = $18;$_60$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = $0;
  HEAP32[$_60$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D>>2] = $_12$sroa$5$0;
  HEAP32[$1>>2] = $_12$sroa$0$0;
  STACKTOP = sp;return;
 }
 $4 = $2 << 1;
 $5 = ($4|0)<(0);
 if ($5) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $_32$sroa$0$0$copyload60 = HEAP32[$0>>2]|0;
 $6 = (___rust_realloc($_32$sroa$0$0$copyload60,$2,1,$4,1,$err$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $ptr_res$sroa$4$4$copyload3361 = HEAP32[$err$i>>2]|0;
  $ptr_res$sroa$8$4$$sroa_idx = ((($err$i)) + 4|0);
  $8 = $ptr_res$sroa$8$4$$sroa_idx;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$_43>>2] = $ptr_res$sroa$4$4$copyload3361;
  $e$sroa$4$0$$sroa_idx = ((($_43)) + 4|0);
  $14 = $e$sroa$4$0$$sroa_idx;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_43);
  // unreachable;
 }
 $_12$sroa$0$0 = $4;$_12$sroa$5$0 = $6;$_60$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D = $0;
 HEAP32[$_60$sroa$0$0$$sroa_idx$pre$phiZZZZZZ2D>>2] = $_12$sroa$5$0;
 HEAP32[$1>>2] = $_12$sroa$0$0;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h57058bbfc1627aa2E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h72d98e1d1843f304E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-296224341);
 return -563829082;
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hb30bcfde10df810eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_16 = 0, $_22 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_22 = sp + 16|0;
 $_16 = sp + 12|0;
 $builder = sp;
 $2 = ((($0)) + 4|0);
 __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder,$1,6417,8);
 HEAP32[$_16>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder,$_16,240)|0);
 HEAP32[$_22>>2] = $2;
 (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder,$_22,256)|0);
 $3 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3ptr13drop_in_place17h83bc7cda5b0ac2deE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h78d72b51efaeacbeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, $_8$i$i = 0, $entry$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i$i = sp + 8|0;
 $_8$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$2>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN4core3fmt9Formatter10debug_list17h8a79fc8ff848a03cE($_8$i$i,$1);
 $5 = (($_3$sroa$0$0$copyload2$i$i$i) + ($4)|0);
 $6 = ($4|0)==(0);
 if ($6) {
  $10 = (__ZN4core3fmt8builders9DebugList6finish17h99f83a18b1d8b20bE($_8$i$i)|0);
  STACKTOP = sp;return ($10|0);
 }
 $8 = $_3$sroa$0$0$copyload2$i$i$i;
 while(1) {
  $7 = ((($8)) + 1|0);
  HEAP32[$entry$i$i$i>>2] = $8;
  (__ZN4core3fmt8builders9DebugList5entry17h72a333a8d23408c0E($_8$i$i,$entry$i$i$i,272)|0);
  $9 = ($7|0)==($5|0);
  if ($9) {
   break;
  } else {
   $8 = $7;
  }
 }
 $10 = (__ZN4core3fmt8builders9DebugList6finish17h99f83a18b1d8b20bE($_8$i$i)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr13drop_in_place17h56f68143dbc3ca81E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4cbe974281be09a1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h7f3c58ad94980558E($2,$1)|0);
 return ($3|0);
}
function __ZN4core3ptr13drop_in_place17h6e9378da48f24f69E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha7cbdfffa9299f44E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17he923db6f4f3df2c4E($2,$1)|0);
 return ($3|0);
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_13reserve_exact17hb5e9d145ed4d269aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_38$sroa$0$0$copyload50$i = 0, $_52$i = 0, $cond4$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload29$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_52$i = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h299a35470dcb4d8eE(6096,17);
  // unreachable;
 }
 $8 = ($$arith|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $9 = ($5|0)==(0);
 if ($9) {
  $10 = (___rust_alloc($$arith,1,$err$i11$i)|0);
  $11 = ($10|0)==(0|0);
  $$$i = $11&1;
  $22 = 0;$25 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $10;
 } else {
  $_38$sroa$0$0$copyload50$i = HEAP32[$0>>2]|0;
  $12 = (___rust_realloc($_38$sroa$0$0$copyload50$i,$5,1,$$arith,1,$err$i$i)|0);
  $13 = ($12|0)==(0|0);
  $res$sroa$5$4$copyload29$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $14 = $res$sroa$11$4$$sroa_idx$i;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $res$sroa$5$1$i = $13 ? $res$sroa$5$4$copyload29$i : $12;
  $$sink$i$i = $13&1;
  $22 = $16;$25 = $19;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $cond4$i = ($res$sroa$0$0$i|0)==(0);
 if (!($cond4$i)) {
  HEAP32[$_52$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_52$i)) + 4|0);
  $20 = $e$sroa$4$0$$sroa_idx$i;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_52$i);
  // unreachable;
 }
 HEAP32[$0>>2] = $res$sroa$5$2$i;
 HEAP32[$4>>2] = $$arith;
 STACKTOP = sp;return;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_16into_boxed_slice17h642cc4ad68d1941bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, $_47$sroa$4$4$copyload1832$i$i = 0, $_47$sroa$8$4$$sroa_idx$i$i = 0, $_51$sroa$0$0$copyload31$i$i = 0, $_61$i$i = 0, $err$i$i$i = 0, $err$sroa$4$0$$sroa_idx$i$i = 0, $retVal$index1 = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i$i$i = sp + 32|0;
 $_61$i$i = sp + 16|0;
 $self = sp;
 ;HEAP32[$self>>2]=HEAP32[$0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$0+8>>2]|0;
 $1 = ((($self)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($self)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  __THREW__ = 0;
  invoke_vi(91,(2952|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($self);
  ___resumeException($7|0);
  // unreachable;
 }
 $9 = ($2|0)==(0);
 do {
  if ($9) {
   $10 = ($4|0)==(0);
   if (!($10)) {
    $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$self>>2]|0;
    ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i,$4,1);
   }
   HEAP32[$self>>2] = 1;
   $$sink$i$i = 0;
  } else {
   $11 = ($4|0)==($2|0);
   if ($11) {
    $24 = $self;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $26;
    HEAP32[$retVal>>2] = $30;
    $retVal$index1 = ((($retVal)) + 4|0);
    HEAP32[$retVal$index1>>2] = $29;
    STACKTOP = sp;return;
   }
   $_51$sroa$0$0$copyload31$i$i = HEAP32[$self>>2]|0;
   $12 = (___rust_realloc($_51$sroa$0$0$copyload31$i$i,$4,1,$2,1,$err$i$i$i)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $_47$sroa$4$4$copyload1832$i$i = HEAP32[$err$i$i$i>>2]|0;
    $_47$sroa$8$4$$sroa_idx$i$i = ((($err$i$i$i)) + 4|0);
    $14 = $_47$sroa$8$4$$sroa_idx$i$i;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$_61$i$i>>2] = $_47$sroa$4$4$copyload1832$i$i;
    $err$sroa$4$0$$sroa_idx$i$i = ((($_61$i$i)) + 4|0);
    $20 = $err$sroa$4$0$$sroa_idx$i$i;
    $21 = $20;
    HEAP32[$21>>2] = $16;
    $22 = (($20) + 4)|0;
    $23 = $22;
    HEAP32[$23>>2] = $19;
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_61$i$i);
    // unreachable;
   } else {
    HEAP32[$self>>2] = $12;
    $$sink$i$i = $2;
    break;
   }
  }
 } while(0);
 HEAP32[$3>>2] = $$sink$i$i;
 $24 = $self;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $26;
 HEAP32[$retVal>>2] = $30;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $29;
 STACKTOP = sp;return;
}
function __ZN3std6thread5local2os13destroy_value17h278b96bd201ff7c4E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$i$i = 0, $_0$0$i$i7 = 0, $cond$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i5 = 0, $eh$lpad$body10$index2Z2D = 0, $eh$lpad$body10$indexZ2D = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr = sp;
 HEAP32[$ptr>>2] = $0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(121,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   __ZN4core3ptr13drop_in_place17h2be846e71fe108f6E($ptr);
   $eh$lpad$body10$index2Z2D = $20;$eh$lpad$body10$indexZ2D = $19;
   ___resumeException($eh$lpad$body10$indexZ2D|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(0);
 if (!($cond$i$i$i$i$i)) {
  $8 = ((($0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($11-1)|0);
   $12 = ($11|0)==(1);
   if ($12) {
    /* fence */;
    __THREW__ = 0;
    invoke_vi(90,($8|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $15 = ___cxa_find_matching_catch_2()|0;
     $16 = tempRet0;
     __ZN5alloc4heap8box_free17hebd80228444fc0e1E($0);
     $eh$lpad$body10$index2Z2D = $16;$eh$lpad$body10$indexZ2D = $15;
     ___resumeException($eh$lpad$body10$indexZ2D|0);
     // unreachable;
    }
   }
  }
 }
 ___rust_dealloc($0,24,4);
 $17 = HEAP32[$1>>2]|0;
 $cond$i$i5 = ($17|0)==(0);
 if (!($cond$i$i5)) {
  $_0$0$i$i7 = $17;
  (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
  STACKTOP = sp;return;
 }
 $18 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E($1)|0);
 $_0$0$i$i7 = $18;
 (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17hebd80228444fc0e1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,24,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h2be846e71fe108f6E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $cond$i$i$i = ($3|0)==(0);
 if (!($cond$i$i$i)) {
  $4 = ((($1)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($7-1)|0);
   $8 = ($7|0)==(1);
   if ($8) {
    /* fence */;
    __THREW__ = 0;
    invoke_vi(90,($4|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $12 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     $14 = HEAP32[$0>>2]|0;
     __ZN5alloc4heap8box_free17hebd80228444fc0e1E($14);
     ___resumeException($12|0);
     // unreachable;
    }
   }
  }
 }
 $11 = HEAP32[$0>>2]|0;
 ___rust_dealloc($11,24,4);
 return;
}
function __ZN3std6thread4park17h6fd56b4feaa98d88E() {
 var $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i35 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre6$i$i$i$i$i$i = 0, $$pre6$i$i$i$i$i$i30 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i33 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $_5$sroa$0$0$copyload2$i$i$i$i$i = 0, $_5$sroa$0$0$copyload2$i$i$i17 = 0, $_9$i = 0, $_9$i20 = 0, $cond2$i$i$i$i$i$i$i$i = 0;
 var $cond2$i$i$i$i$i$i$i$i28 = 0, $eh$lpad$body$sink54$index4Z2D = 0, $eh$lpad$body$sink54$indexZ2D = 0, $guard$i = 0, $or$cond$i$i = 0, $self$i$i = 0, $success = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_9$i20 = sp + 32|0;
 $guard$i = sp + 24|0;
 $_9$i = sp + 16|0;
 $self$i$i = sp + 8|0;
 $thread = sp;
 $0 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e5681632d507562E()|0);
 $1 = $0;
 HEAP32[$self$i$i>>2] = $1;
 $2 = ($0|0)==(0);
 if ($2) {
  __THREW__ = 0;
  invoke_vii(132,(4501|0),94);
  $3 = __THREW__; __THREW__ = 0;
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZN4core3ptr13drop_in_place17h3960634c37b68044E($self$i$i);
  ___resumeException($4|0);
  // unreachable;
 }
 HEAP32[$thread>>2] = $0;
 $6 = ((($1)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 (_pthread_mutex_lock(($7|0))|0);
 __THREW__ = 0;
 $8 = (invoke_i(103)|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if (!($10)) {
   $11 = ($8|0)==(0|0);
   $12 = $6;
   if ($11) {
    __THREW__ = 0;
    invoke_v(104);
    $18 = __THREW__; __THREW__ = 0;
    break;
   }
   $13 = HEAP32[$8>>2]|0;
   $cond2$i$i$i$i$i$i$i$i = ($13|0)==(0);
   if ($cond2$i$i$i$i$i$i$i$i) {
    $14 = $8;
    $15 = $14;
    HEAP8[$15>>0]=1&255;HEAP8[$15+1>>0]=(1>>8)&255;HEAP8[$15+2>>0]=(1>>16)&255;HEAP8[$15+3>>0]=1>>24;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP8[$17>>0]=0&255;HEAP8[$17+1>>0]=(0>>8)&255;HEAP8[$17+2>>0]=(0>>16)&255;HEAP8[$17+3>>0]=0>>24;
    $$pre6$i$i$i$i$i$i = ((($8)) + 4|0);
    $$pre$phi$i$i$i$i$i$iZ2D = $$pre6$i$i$i$i$i$i;$19 = 0;
   } else {
    $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($8)) + 4|0);
    $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
    $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i;$19 = $$pre$i$i$i$i$i$i;
   }
   HEAP8[$$pre$phi$i$i$i$i$i$iZ2D>>0]=$19&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+1>>0]=($19>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+2>>0]=($19>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+3>>0]=$19>>24;
   $20 = ($19|0)!=(0);
   $21 = ((($1)) + 28|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   $24 = $20&1;
   if (!($23)) {
    $27 = $_9$i;
    $28 = $27;
    HEAP32[$28>>2] = $12;
    $29 = (($27) + 4)|0;
    $30 = $29;
    HEAP32[$30>>2] = $24;
    __THREW__ = 0;
    invoke_vi(133,($_9$i|0));
    $31 = __THREW__; __THREW__ = 0;
    break;
   }
   $32 = $12;$41 = $24;
   while(1) {
    $33 = $32;
    $34 = ((($33)) + 5|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ($35<<24>>24)==(0);
    if (!($36)) {
     label = 19;
     break;
    }
    $_5$sroa$0$0$copyload2$i$i$i17 = HEAP32[$thread>>2]|0;
    $37 = $guard$i;
    $38 = $37;
    HEAP32[$38>>2] = $32;
    $39 = (($37) + 4)|0;
    $40 = $39;
    HEAP32[$40>>2] = $41;
    $42 = HEAP32[$33>>2]|0;
    $43 = $42;
    $44 = ((($_5$sroa$0$0$copyload2$i$i$i17)) + 36|0);
    $45 = HEAP32[$44>>2]|0;if (($45|0) == 0) HEAP32[$44>>2] = $43;
    $success = ($45|0)==(0);
    $46 = ($45|0)==($43|0);
    $or$cond$i$i = $success | $46;
    if (!($or$cond$i$i)) {
     label = 16;
     break;
    }
    $52 = ((($_5$sroa$0$0$copyload2$i$i$i17)) + 32|0);
    $53 = HEAP32[$52>>2]|0;
    (_pthread_cond_wait(($53|0),($42|0))|0);
    $54 = HEAP32[$guard$i>>2]|0;
    $55 = ((($54)) + 4|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = ($56<<24>>24)==(0);
    $58 = $guard$i;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($58) + 4)|0;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    if ($57) {
     $32 = $60;$41 = $63;
    } else {
     label = 18;
     break;
    }
   }
   if ((label|0) == 16) {
    __THREW__ = 0;
    invoke_viii(95,(6677|0),54,(3008|0));
    $47 = __THREW__; __THREW__ = 0;
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    __THREW__ = 0;
    invoke_vi(134,($guard$i|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     break;
    } else {
     $eh$lpad$body$sink54$index4Z2D = $49;$eh$lpad$body$sink54$indexZ2D = $48;
    }
    __ZN4core3ptr13drop_in_place17hd10a86be7f072410E($thread);
    ___resumeException($eh$lpad$body$sink54$indexZ2D|0);
    // unreachable;
   }
   else if ((label|0) == 18) {
    $64 = $_9$i20;
    $65 = $64;
    HEAP32[$65>>2] = $60;
    $66 = (($64) + 4)|0;
    $67 = $66;
    HEAP32[$67>>2] = $63;
    __THREW__ = 0;
    invoke_vi(133,($_9$i20|0));
    $68 = __THREW__; __THREW__ = 0;
    break;
   }
   else if ((label|0) == 19) {
    HEAP8[$34>>0] = 0;
    $69 = $41 & 255;
    $70 = (0)==(0);
    $71 = ($69|0)==(0);
    $72 = $70 & $71;
    do {
     if ($72) {
      __THREW__ = 0;
      $73 = (invoke_i(103)|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       break L4;
      }
      $76 = ($73|0)==(0|0);
      if ($76) {
       __THREW__ = 0;
       invoke_v(104);
       $82 = __THREW__; __THREW__ = 0;
       break L4;
      }
      $77 = HEAP32[$73>>2]|0;
      $cond2$i$i$i$i$i$i$i$i28 = ($77|0)==(0);
      if ($cond2$i$i$i$i$i$i$i$i28) {
       $78 = $73;
       $79 = $78;
       HEAP8[$79>>0]=1&255;HEAP8[$79+1>>0]=(1>>8)&255;HEAP8[$79+2>>0]=(1>>16)&255;HEAP8[$79+3>>0]=1>>24;
       $80 = (($78) + 4)|0;
       $81 = $80;
       HEAP8[$81>>0]=0&255;HEAP8[$81+1>>0]=(0>>8)&255;HEAP8[$81+2>>0]=(0>>16)&255;HEAP8[$81+3>>0]=0>>24;
       $$pre6$i$i$i$i$i$i30 = ((($73)) + 4|0);
       HEAP8[$$pre6$i$i$i$i$i$i30>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i$i30+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i$i30+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i$i30+3>>0]=0>>24;
       break;
      }
      $$sink$in$phi$trans$insert$i$i$i$i$i$i33 = ((($73)) + 4|0);
      $$pre$i$i$i$i$i$i35 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i33>>2]|0;
      $83 = ($$pre$i$i$i$i$i$i35|0)==(0);
      if (!($83)) {
       $84 = ((($33)) + 4|0);
       HEAP8[$84>>0] = 1;
      }
     }
    } while(0);
    $85 = HEAP32[$33>>2]|0;
    (_pthread_mutex_unlock(($85|0))|0);
    $_5$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$thread>>2]|0;
    $86 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($86-1)|0);
    $87 = ($86|0)==(1);
    if (!($87)) {
     STACKTOP = sp;return;
    }
    /* fence */;
    __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($thread);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $25 = ___cxa_find_matching_catch_2()|0;
 $26 = tempRet0;
 $eh$lpad$body$sink54$index4Z2D = $26;$eh$lpad$body$sink54$indexZ2D = $25;
 __ZN4core3ptr13drop_in_place17hd10a86be7f072410E($thread);
 ___resumeException($eh$lpad$body$sink54$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hd10a86be7f072410E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_5$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_5$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 $1 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2] = (($1-1)|0);
 $2 = ($1|0)==(1);
 if (!($2)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($0);
 return;
}
function __ZN4core6result13unwrap_failed17h2ddc61b13be20e23E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_12 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 5363;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $error;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $msg;
 $13 = $error;
 HEAP32[$_12>>2] = $12;
 $14 = ((($_12)) + 4|0);
 HEAP32[$14>>2] = (93);
 $15 = ((($_12)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = ((($_12)) + 12|0);
 HEAP32[$16>>2] = (135);
 HEAP32[$_5>>2] = 2304;
 $17 = ((($_5)) + 4|0);
 HEAP32[$17>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_5)) + 16|0);
 HEAP32[$18>>2] = $_12;
 $19 = ((($_5)) + 20|0);
 HEAP32[$19>>2] = 2;
 __THREW__ = 0;
 invoke_vii(101,($_5|0),(2320|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = ___cxa_find_matching_catch_2()|0;
 $22 = tempRet0;
 __ZN4core3ptr13drop_in_place17h7b495fd915d29ab8E($error);
 ___resumeException($21|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h74602cb08776945bE($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i = 0, $$pre6$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond2$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
    // unreachable;
   }
   $7 = HEAP32[$5>>2]|0;
   $cond2$i$i$i$i$i$i$i = ($7|0)==(0);
   if ($cond2$i$i$i$i$i$i$i) {
    $8 = $5;
    $9 = $8;
    HEAP8[$9>>0]=1&255;HEAP8[$9+1>>0]=(1>>8)&255;HEAP8[$9+2>>0]=(1>>16)&255;HEAP8[$9+3>>0]=1>>24;
    $10 = (($8) + 4)|0;
    $11 = $10;
    HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
    $$pre6$i$i$i$i$i = ((($5)) + 4|0);
    HEAP8[$$pre6$i$i$i$i$i>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i = ((($5)) + 4|0);
   $$pre$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i>>2]|0;
   $12 = ($$pre$i$i$i$i$i|0)==(0);
   if (!($12)) {
    $13 = ((($1)) + 4|0);
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 (_pthread_mutex_unlock(($15|0))|0);
 return;
}
function __ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17he8fc179523a73dcbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h4d77fdb82a6fd7deE(6767,25,$1)|0);
 return ($2|0);
}
function __ZN4core3ptr13drop_in_place17h7b495fd915d29ab8E($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i = 0, $$pre6$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond2$i$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
    // unreachable;
   }
   $7 = HEAP32[$5>>2]|0;
   $cond2$i$i$i$i$i$i$i$i = ($7|0)==(0);
   if ($cond2$i$i$i$i$i$i$i$i) {
    $8 = $5;
    $9 = $8;
    HEAP8[$9>>0]=1&255;HEAP8[$9+1>>0]=(1>>8)&255;HEAP8[$9+2>>0]=(1>>16)&255;HEAP8[$9+3>>0]=1>>24;
    $10 = (($8) + 4)|0;
    $11 = $10;
    HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
    $$pre6$i$i$i$i$i$i = ((($5)) + 4|0);
    HEAP8[$$pre6$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($5)) + 4|0);
   $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
   $12 = ($$pre$i$i$i$i$i$i|0)==(0);
   if (!($12)) {
    $13 = ((($1)) + 4|0);
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 (_pthread_mutex_unlock(($15|0))|0);
 return;
}
function __ZN3std6thread6Thread6unpark17ha337b21221f21174E($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i9 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre6$i$i$i$i$i$i = 0, $$pre6$i$i$i$i$i$i10 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i7 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_5$sroa$0$0$copyload2$i$i$i = 0, $_9$i = 0, $cond2$i$i$i$i$i$i$i$i = 0, $cond2$i$i$i$i$i$i$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_9$i = sp;
 $_5$sroa$0$0$copyload2$i$i$i = HEAP32[$0>>2]|0;
 $1 = ((($_5$sroa$0$0$copyload2$i$i$i)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (_pthread_mutex_lock(($2|0))|0);
 $3 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
 $4 = ($3|0)==(0|0);
 $5 = $1;
 if ($4) {
  __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
  // unreachable;
 }
 $6 = HEAP32[$3>>2]|0;
 $cond2$i$i$i$i$i$i$i$i5 = ($6|0)==(0);
 if ($cond2$i$i$i$i$i$i$i$i5) {
  $7 = $3;
  $8 = $7;
  HEAP8[$8>>0]=1&255;HEAP8[$8+1>>0]=(1>>8)&255;HEAP8[$8+2>>0]=(1>>16)&255;HEAP8[$8+3>>0]=1>>24;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP8[$10>>0]=0&255;HEAP8[$10+1>>0]=(0>>8)&255;HEAP8[$10+2>>0]=(0>>16)&255;HEAP8[$10+3>>0]=0>>24;
  $$pre6$i$i$i$i$i$i10 = ((($3)) + 4|0);
  $$pre$phi$i$i$i$i$i$iZ2D = $$pre6$i$i$i$i$i$i10;$11 = 0;
 } else {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i7 = ((($3)) + 4|0);
  $$pre$i$i$i$i$i$i9 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i7>>2]|0;
  $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i7;$11 = $$pre$i$i$i$i$i$i9;
 }
 HEAP8[$$pre$phi$i$i$i$i$i$iZ2D>>0]=$11&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+1>>0]=($11>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+2>>0]=($11>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$iZ2D+3>>0]=$11>>24;
 $12 = ($11|0)!=(0);
 $13 = ((($_5$sroa$0$0$copyload2$i$i$i)) + 28|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = $12&1;
  $17 = $_9$i;
  $18 = $17;
  HEAP32[$18>>2] = $5;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  __ZN4core6result13unwrap_failed17h2ddc61b13be20e23E($_9$i);
  // unreachable;
 }
 $21 = ((($_5$sroa$0$0$copyload2$i$i$i)) + 29|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  HEAP8[$21>>0] = 1;
  $24 = ((($_5$sroa$0$0$copyload2$i$i$i)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  (_pthread_cond_signal(($25|0))|0);
 }
 if ($12) {
  $34 = HEAP32[$1>>2]|0;
  (_pthread_mutex_unlock(($34|0))|0);
  STACKTOP = sp;return;
 }
 $26 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
  // unreachable;
 }
 $28 = HEAP32[$26>>2]|0;
 $cond2$i$i$i$i$i$i$i$i = ($28|0)==(0);
 if ($cond2$i$i$i$i$i$i$i$i) {
  $29 = $26;
  $30 = $29;
  HEAP8[$30>>0]=1&255;HEAP8[$30+1>>0]=(1>>8)&255;HEAP8[$30+2>>0]=(1>>16)&255;HEAP8[$30+3>>0]=1>>24;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP8[$32>>0]=0&255;HEAP8[$32+1>>0]=(0>>8)&255;HEAP8[$32+2>>0]=(0>>16)&255;HEAP8[$32+3>>0]=0>>24;
  $$pre6$i$i$i$i$i$i = ((($26)) + 4|0);
  HEAP8[$$pre6$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i$i+3>>0]=0>>24;
  $34 = HEAP32[$1>>2]|0;
  (_pthread_mutex_unlock(($34|0))|0);
  STACKTOP = sp;return;
 }
 $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($26)) + 4|0);
 $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
 $33 = ($$pre$i$i$i$i$i$i|0)==(0);
 if ($33) {
  $34 = HEAP32[$1>>2]|0;
  (_pthread_mutex_unlock(($34|0))|0);
  STACKTOP = sp;return;
 }
 HEAP8[$13>>0] = 1;
 $34 = HEAP32[$1>>2]|0;
 (_pthread_mutex_unlock(($34|0))|0);
 STACKTOP = sp;return;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17hfeaa3c2e8020fa0bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$50$i = 0, $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_36$sroa$0$0$copyload4748$i = 0, $_50$i = 0, $cond4$i = 0;
 var $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i12$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0, $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload26$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i12$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_50$i = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h299a35470dcb4d8eE(6096,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $9 ? $$arith : $8;
 $$arith2 = ($_0$0$sroa$speculated$i$i$i$i*12)|0;
 $$overflow3 = ($_0$0$sroa$speculated$i$i$i$i>>>0)>(357913941);
 if ($$overflow3) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3024);
  // unreachable;
 }
 $10 = ($$arith2|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_alloc($$arith2,4,$err$i12$i)|0);
  $13 = ($12|0)==(0|0);
  $14 = $12;
  $$50$i = $13&1;
  $28 = 0;$31 = 0;$res$sroa$0$0$i = $$50$i;$res$sroa$5$2$i = $14;
 } else {
  $15 = ($5*12)|0;
  $_36$sroa$0$0$copyload4748$i = HEAP32[$0>>2]|0;
  $16 = (___rust_realloc($_36$sroa$0$0$copyload4748$i,$15,4,$$arith2,4,$err$i$i)|0);
  $17 = ($16|0)==(0|0);
  $res$sroa$5$4$copyload26$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $18 = $res$sroa$11$4$$sroa_idx$i;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $16;
  $res$sroa$5$1$i = $17 ? $res$sroa$5$4$copyload26$i : $24;
  $$sink$i$i = $17&1;
  $28 = $20;$31 = $23;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $cond4$i = ($res$sroa$0$0$i|0)==(0);
 if (!($cond4$i)) {
  HEAP32[$_50$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_50$i)) + 4|0);
  $26 = $e$sroa$4$0$$sroa_idx$i;
  $27 = $26;
  HEAP32[$27>>2] = $28;
  $29 = (($26) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $31;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_50$i);
  // unreachable;
 }
 $25 = $res$sroa$5$2$i;
 HEAP32[$0>>2] = $25;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hae0b36d05f9e11f0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN4core3ptr13drop_in_place17h26d8f0910532aeb9E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$112$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i6$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($_3$sroa$0$0$copyload2$i$i$i$i) + (($2*12)|0)|0);
 $4 = ($2|0)==(0);
 if (!($4)) {
  $_10$112$i$i = $_3$sroa$0$0$copyload2$i$i$i$i;
  while(1) {
   $5 = ((($_10$112$i$i)) + 12|0);
   $6 = ((($_10$112$i$i)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$_10$112$i$i>>2]|0;
    ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i,$7,1);
   }
   $9 = ($5|0)==($3|0);
   if ($9) {
    break;
   } else {
    $_10$112$i$i = $5;
   }
  }
 }
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  return;
 }
 $13 = ($11*12)|0;
 $_3$sroa$0$0$copyload2$i6$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i6$i$i$i,$13,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h5c67080057a70880E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(0);
 if ($cond) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($2);
 return;
}
function __ZN3std10sys_common11at_exit_imp4push17h56aca8626b4ae8acE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sroa_idx$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, $_6$i$i$i$i = 0, $err$i$i$i = 0, $ret$0$off09 = 0, $value$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $value$i = sp + 32|0;
 $err$i$i$i = sp + 16|0;
 $_6$i$i$i$i = sp;
 (_pthread_mutex_lock(((12872)|0))|0);
 $2 = HEAP32[3225]|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $6 = (___rust_alloc(12,4,$err$i$i$i)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
    // unreachable;
   } else {
    HEAP32[$6>>2] = 4;
    $$sroa_idx$i$i = ((($6)) + 4|0);
    HEAP32[$$sroa_idx$i$i>>2] = 0;
    $8 = ((($6)) + 8|0);
    HEAP32[$8>>2] = 0;
    HEAP32[3225] = $6;
    $11 = $6;
    break L1;
   }
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((12872)|0))|0);
   $25 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($25|0,($0|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    __ZN5alloc4heap8box_free17h8aa20a127f7cae9fE($0,$1);
    ___resumeException($33|0);
    // unreachable;
   }
   $28 = ((($1)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    $ret$0$off09 = 0;
    STACKTOP = sp;return ($ret$0$off09|0);
   }
   $31 = ((($1)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   ___rust_dealloc($0,$29,$32);
   $ret$0$off09 = 0;
   STACKTOP = sp;return ($ret$0$off09|0);
   break;
  }
  default: {
   $11 = $5;
  }
  }
 } while(0);
 HEAP32[$value$i>>2] = $0;
 $9 = ((($value$i)) + 4|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($11)) + 8|0);
 $12 = HEAP32[$10>>2]|0;
 $13 = ((($11)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 do {
  if ($15) {
   __THREW__ = 0;
   invoke_vi(136,($11|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    __ZN4core3ptr13drop_in_place17h1730c3b929dc4dbcE($value$i);
    ___resumeException($16|0);
    // unreachable;
   } else {
    $$pre$i = HEAP32[$10>>2]|0;
    $21 = $$pre$i;
    break;
   }
  } else {
   $21 = $12;
  }
 } while(0);
 $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$11>>2]|0;
 $20 = (($_3$sroa$0$0$copyload2$i$i$i) + ($21<<3)|0);
 HEAP32[$20>>2] = $3;
 $22 = (((($_3$sroa$0$0$copyload2$i$i$i) + ($21<<3)|0)) + 4|0);
 HEAP32[$22>>2] = $4;
 $23 = HEAP32[$10>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$10>>2] = $24;
 (_pthread_mutex_unlock(((12872)|0))|0);
 $ret$0$off09 = 1;
 STACKTOP = sp;return ($ret$0$off09|0);
}
function __ZN4core3ptr13drop_in_place17h1730c3b929dc4dbcE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  __ZN5alloc4heap8box_free17h8aa20a127f7cae9fE($16,$17);
  ___resumeException($14|0);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($7)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 ___rust_dealloc($11,$9,$13);
 return;
}
function __ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h2cfc03d2e4b17390E($0) {
 $0 = $0|0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_12$sroa$0$0 = 0, $_12$sroa$5$0$in = 0, $_32$sroa$0$0$copyload6162 = 0, $_43 = 0, $_59 = 0, $e$sroa$4$0$$sroa_idx = 0, $err$i = 0, $err$i$i = 0, $ptr_res$sroa$4$4$copyload34 = 0, $ptr_res$sroa$8$4$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i = sp + 48|0;
 $err$i$i = sp + 32|0;
 $_59 = sp + 16|0;
 $_43 = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = $2 << 3;
 if ($3) {
  $20 = (___rust_alloc(32,4,$err$i$i)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_59);
   // unreachable;
  }
  $$pre$phiZ2D = $0;$_12$sroa$0$0 = 4;$_12$sroa$5$0$in = $20;
  HEAP32[$$pre$phiZ2D>>2] = $_12$sroa$5$0$in;
  HEAP32[$1>>2] = $_12$sroa$0$0;
  STACKTOP = sp;return;
 }
 $5 = $2 << 4;
 $6 = ($5|0)<(0);
 if ($6) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2824);
  // unreachable;
 }
 $_32$sroa$0$0$copyload6162 = HEAP32[$0>>2]|0;
 $7 = (___rust_realloc($_32$sroa$0$0$copyload6162,$4,4,$5,4,$err$i)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $ptr_res$sroa$4$4$copyload34 = HEAP32[$err$i>>2]|0;
  $ptr_res$sroa$8$4$$sroa_idx = ((($err$i)) + 4|0);
  $10 = $ptr_res$sroa$8$4$$sroa_idx;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$_43>>2] = $ptr_res$sroa$4$4$copyload34;
  $e$sroa$4$0$$sroa_idx = ((($_43)) + 4|0);
  $16 = $e$sroa$4$0$$sroa_idx;
  $17 = $16;
  HEAP32[$17>>2] = $12;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $15;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_43);
  // unreachable;
 }
 $9 = $2 << 1;
 $$pre$phiZ2D = $0;$_12$sroa$0$0 = $9;$_12$sroa$5$0$in = $7;
 HEAP32[$$pre$phiZ2D>>2] = $_12$sroa$5$0$in;
 HEAP32[$1>>2] = $_12$sroa$0$0;
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17h8aa20a127f7cae9fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN3std2io5stdio6stdout17h7ea6f240a87579f0E() {
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_5$sroa$0$0$copyload2$i$i$i$i = 0, $_6$i$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i = 0, $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i = 0, $magicptr$i = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $self$i = sp + 64|0;
 $err$i$i$i$i$i = sp + 48|0;
 $_6$i$i$i$i$i$i = sp + 32|0;
 $err$i$i$i$i$i$i = sp + 16|0;
 $_6$i$i$i$i$i$i$i = sp;
 (_pthread_mutex_lock(((3048)|0))|0);
 $0 = HEAP32[(3076)>>2]|0;
 $magicptr$i = $0;
 L1: do {
  switch ($magicptr$i|0) {
  case 0:  {
   $1 = (___rust_alloc(4,4,$err$i$i$i$i$i$i)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i);
    // unreachable;
   }
   HEAP32[$1>>2] = 3048;
   $3 = (__ZN3std10sys_common11at_exit_imp4push17h56aca8626b4ae8acE($1,288)|0);
   $4 = HEAP32[(3080)>>2]|0;
   $5 = (FUNCTION_TABLE_i[$4 & 255]()|0);
   $6 = $5;
   if ($3) {
    $7 = HEAP32[$6>>2]|0;HEAP32[$6>>2] = (($7+1)|0);
    $8 = ($7|0)<(0);
    if ($8) {
     _llvm_trap();
     // unreachable;
    }
    $9 = (___rust_alloc(4,4,$err$i$i$i$i$i)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i);
     // unreachable;
    } else {
     HEAP32[$9>>2] = $6;
     $11 = $9;
     HEAP32[(3076)>>2] = $11;
     $$sink$i = $6;
     break L1;
    }
   } else {
    $$sink$i = $6;
   }
   break;
  }
  case 1:  {
   $$sink$i = 0;
   break;
  }
  default: {
   $_5$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
   $12 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2] = (($12+1)|0);
   $13 = ($12|0)<(0);
   if ($13) {
    _llvm_trap();
    // unreachable;
   } else {
    $$sink$i = $_5$sroa$0$0$copyload2$i$i$i$i;
   }
  }
  }
 } while(0);
 (_pthread_mutex_unlock(((3048)|0))|0);
 HEAP32[$self$i>>2] = $$sink$i;
 $14 = ($$sink$i|0)==(0|0);
 if ($14) {
  __THREW__ = 0;
  invoke_vii(132,(6792|0),36);
  $15 = __THREW__; __THREW__ = 0;
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZN4core3ptr13drop_in_place17haba0009e3bfda22dE($self$i);
  ___resumeException($16|0);
  // unreachable;
 } else {
  $18 = $$sink$i;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17haba0009e3bfda22dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($3-1)|0);
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E($0);
 return;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_4$sroa$0$0$copyload23 = 0, $_5$sroa$0$0$copyload2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_4$sroa$0$0$copyload23 = HEAP32[$0>>2]|0;
 $1 = ((($_4$sroa$0$0$copyload23)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 (_pthread_mutex_destroy(($2|0))|0);
 $3 = HEAP32[$1>>2]|0;
 ___rust_dealloc($3,28,4);
 $4 = ((($_4$sroa$0$0$copyload23)) + 16|0);
 __ZN4core3ptr13drop_in_place17h1e52d37537565cd1E($4);
 $_5$sroa$0$0$copyload2$i$i = HEAP32[$0>>2]|0;
 $5 = ((($_5$sroa$0$0$copyload2$i$i)) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6-1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  return;
 }
 /* fence */;
 ___rust_dealloc($_4$sroa$0$0$copyload23,40,4);
 return;
}
function __ZN4core3ptr13drop_in_place17h1e52d37537565cd1E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_r$i$i$i = 0, $cond$i$i$i$i = 0, $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0;
 var $not$cond$i$i$i$i = 0, $switch$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_r$i$i$i = sp;
 $1 = ((($0)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $not$cond$i$i$i$i = ($2<<24>>24)==(0);
 if (!($not$cond$i$i$i$i)) {
  $3 = ((($0)) + 14|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   __THREW__ = 0;
   invoke_vii(137,($_r$i$i$i|0),($0|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    $eh$lpad$body$i$i$index2Z2D = $35;$eh$lpad$body$i$i$indexZ2D = $34;
    __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($0);
    ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
    // unreachable;
   }
   $8 = HEAP32[$_r$i$i$i>>2]|0;
   $cond$i$i$i$i = ($8|0)==(0);
   if (!($cond$i$i$i$i)) {
    $9 = ((($_r$i$i$i)) + 4|0);
    $10 = HEAP8[$9>>0]|0;
    $switch$i$i$i$i = ($10&255)<(2);
    if (!($switch$i$i$i$i)) {
     $11 = ((($_r$i$i$i)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($12)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($12)) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     invoke_vi($17|0,($14|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $27 = ___cxa_find_matching_catch_2()|0;
      $28 = tempRet0;
      $29 = HEAP32[$13>>2]|0;
      $30 = HEAP32[$15>>2]|0;
      __ZN5alloc4heap8box_free17he7aff06e65e4596eE($29,$30);
      __ZN5alloc4heap8box_free17h53b02e8f65dea423E($12);
      $eh$lpad$body$i$i$index2Z2D = $28;$eh$lpad$body$i$i$indexZ2D = $27;
      __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($0);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     }
     $20 = HEAP32[$15>>2]|0;
     $21 = ((($20)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if (!($23)) {
      $24 = HEAP32[$13>>2]|0;
      $25 = ((($20)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      ___rust_dealloc($24,$22,$26);
     }
     ___rust_dealloc($12,12,4);
    }
   }
  }
 }
 $31 = ((($0)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i,$32,1);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h42e6a373fdad5ea9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre249 = 0, $$sink207 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i1$i$i = 0, $_4$i$i$i = 0, $_6$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i = 0, $cond$i77 = 0, $cond$i80 = 0, $cond203 = 0, $cond6 = 0, $eh$lpad$body126$index2Z2D = 0, $eh$lpad$body126$indexZ2D = 0, $err$i$i$i$i = 0;
 var $err$i$i$i$i$i$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$10$0 = 0, $r = 0, $r$i$sroa$5$0$$sroa_idx189 = 0, $ret = 0, $switch$i119 = 0, $trunc$i = 0, $trunc$i$clear = 0, $written$0232 = 0, $written$0234 = 0, $written$1269 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $err$i$i$i$i = sp + 112|0;
 $_6$i$i$i$i$i = sp + 96|0;
 $x$i$sroa$4$i = sp + 124|0;
 $err$i$i$i$i$i$i$i = sp + 80|0;
 $_6$i$i$i$i$i$i$i$i = sp + 64|0;
 $x$sroa$0$i$i$i$i$i = sp + 48|0;
 $_4$i$i$i = sp + 32|0;
 $r = sp + 16|0;
 $ret = sp;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$ret>>2] = 0;
 $4 = ($3|0)==(0);
 if ($4) {
  ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 14|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 13|0);
 $r$i$sroa$5$0$$sroa_idx189 = ((($r)) + 4|0);
 $8 = ((($r)) + 4|0);
 $9 = ((($r)) + 8|0);
 $10 = ((($8)) + 1|0);
 $11 = ((($r)) + 8|0);
 $12 = ((($r)) + 8|0);
 $13 = ((($r)) + 4|0);
 $written$0234 = 0;
 L4: while(1) {
  HEAP8[$5>>0] = 1;
  $15 = HEAP8[$6>>0]|0;
  $cond$i77 = ($15<<24>>24)==(0);
  if ($cond$i77) {
   label = 5;
   break;
  }
  $17 = HEAP32[$2>>2]|0;
  $18 = ($17>>>0)<($written$0234>>>0);
  if ($18) {
   label = 8;
   break;
  }
  $20 = (($17) - ($written$0234))|0;
  $21 = HEAP8[$7>>0]|0;
  $cond$i80 = ($21<<24>>24)==(0);
  do {
   if ($cond$i80) {
    $_3$sroa$0$0$copyload2$i$i$i = HEAP32[$1>>2]|0;
    $22 = (($_3$sroa$0$0$copyload2$i$i$i) + ($written$0234)|0);
    $23 = ($20|0)>(-1);
    $_0$0$sroa$speculated$i$i$i$i$i$i = $23 ? $20 : 2147483647;
    $24 = (_write(1,$22,$_0$0$sroa$speculated$i$i$i$i$i$i)|0);
    $25 = ($24|0)==(-1);
    if (!($25)) {
     HEAP32[$r>>2] = 0;
     HEAP32[$r$i$sroa$5$0$$sroa_idx189>>2] = $24;
     HEAP32[$12>>2] = 0;
     label = 19;
     break;
    }
    $26 = (___errno_location()|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(9);
    if ($28) {
     label = 13;
    } else {
     HEAP32[$r>>2] = 1;
     HEAP32[$r$i$sroa$5$0$$sroa_idx189>>2] = 0;
     HEAP32[$11>>2] = $27;
     HEAP8[$5>>0] = 0;
     $trunc$i = HEAP8[$8>>0]|0;
     $trunc$i$clear = $trunc$i & 3;
     switch ($trunc$i$clear<<24>>24) {
     case 0:  {
      $36 = HEAP32[$9>>2]|0;
      $cond203 = ($36|0)==(4);
      if (!($cond203)) {
       label = 40;
       break L4;
      }
      break;
     }
     case 1:  {
      $$sink207 = $10;
      label = 24;
      break;
     }
     default: {
      $37 = HEAP32[$9>>2]|0;
      $$sink207 = $37;
      label = 24;
     }
     }
     if ((label|0) == 24) {
      label = 0;
      $39 = HEAP8[$$sink207>>0]|0;
      $40 = ($39<<24>>24)==(15);
      if (!($40)) {
       label = 40;
       break L4;
      }
     }
     $switch$i119 = ($trunc$i&255)<(2);
     if ($switch$i119) {
      $written$1269 = $written$0234;
     } else {
      $41 = HEAP32[$9>>2]|0;
      $42 = ((($41)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      invoke_vi($46|0,($43|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 29;
       break L4;
      }
      $49 = HEAP32[$44>>2]|0;
      $50 = ((($49)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0);
      if (!($52)) {
       $53 = HEAP32[$42>>2]|0;
       $54 = ((($49)) + 8|0);
       $55 = HEAP32[$54>>2]|0;
       ___rust_dealloc($53,$51,$55);
      }
      ___rust_dealloc($41,12,4);
      $written$1269 = $written$0234;
     }
    }
   } else {
    label = 13;
   }
  } while(0);
  if ((label|0) == 13) {
   label = 0;
   HEAP32[$r>>2] = 0;
   HEAP32[$13>>2] = $20;
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   HEAP8[$5>>0] = 0;
   $35 = HEAP32[$r$i$sroa$5$0$$sroa_idx189>>2]|0;
   $cond6 = ($35|0)==(0);
   if ($cond6) {
    label = 14;
    break;
   }
   $38 = (($35) + ($written$0234))|0;
   $written$1269 = $38;
  }
  $60 = ($written$1269>>>0)<($3>>>0);
  if ($60) {
   $written$0234 = $written$1269;
  } else {
   $written$0232 = $written$1269;
   label = 3;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   __THREW__ = 0;
   invoke_vi(91,(2280|0));
   $16 = __THREW__; __THREW__ = 0;
   label = 41;
  }
  else if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vii(124,($written$0234|0),($17|0));
   $19 = __THREW__; __THREW__ = 0;
   label = 41;
  }
  else if ((label|0) == 14) {
   __THREW__ = 0;
   invoke_viii(122,($_4$i$i$i|0),(6828|0),33);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $67 = ___cxa_find_matching_catch_2()|0;
    $68 = tempRet0;
    __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($r);
    $personalityslot$sroa$0$0 = $67;$personalityslot$sroa$10$0 = $68;
    __ZN4core3ptr13drop_in_place17h5c67080057a70880E($ret);
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
   $31 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   ;HEAP32[$31>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$31+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
   $33 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
   $34 = ($33|0)==(0|0);
   if ($34) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
    // unreachable;
   } else {
    HEAP8[$33>>0] = 14;
    $x$i$sroa$4$0$$sroa_raw_idx$i = ((($33)) + 1|0);
    ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
    $x$i$sroa$5$0$$sroa_idx$i = ((($33)) + 4|0);
    HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $31;
    $x$i$sroa$6$0$$sroa_idx$i = ((($33)) + 8|0);
    HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 104;
    $69 = $33;
    $$pre = ((($ret)) + 4|0);
    HEAP32[$ret>>2] = 1;
    $70 = $$pre;
    $71 = $70;
    HEAP32[$71>>2] = 2;
    $72 = (($70) + 4)|0;
    $73 = $72;
    HEAP32[$73>>2] = $69;
    label = 39;
    break;
   }
  }
  else if ((label|0) == 29) {
   $56 = ___cxa_find_matching_catch_2()|0;
   $57 = tempRet0;
   $58 = HEAP32[$42>>2]|0;
   $59 = HEAP32[$44>>2]|0;
   __ZN5alloc4heap8box_free17he7aff06e65e4596eE($58,$59);
   __ZN5alloc4heap8box_free17h53b02e8f65dea423E($41);
   $eh$lpad$body126$index2Z2D = $57;$eh$lpad$body126$indexZ2D = $56;
  }
  else if ((label|0) == 40) {
   $74 = $8;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($74) + 4)|0;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $$pre249 = ((($ret)) + 4|0);
   HEAP32[$ret>>2] = 1;
   $80 = $$pre249;
   $81 = $80;
   HEAP32[$81>>2] = $76;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $79;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $written$0232 = $written$0234;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $14 = ($written$0232|0)==(0);
   if ($14) {
    ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
    STACKTOP = sp;return;
   }
   $61 = HEAP32[$2>>2]|0;
   $62 = ($61>>>0)<($written$0232>>>0);
   if ($62) {
    __THREW__ = 0;
    invoke_vi(91,(3084|0));
    $63 = __THREW__; __THREW__ = 0;
    label = 41;
    break;
   }
   HEAP32[$2>>2] = 0;
   $64 = (($61) - ($written$0232))|0;
   $65 = ($64|0)==(0);
   if ($65) {
    ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
    STACKTOP = sp;return;
   }
   $_3$sroa$0$0$copyload2$i$i1$i$i = HEAP32[$1>>2]|0;
   $66 = (($_3$sroa$0$0$copyload2$i$i1$i$i) + ($written$0232)|0);
   _memmove(($_3$sroa$0$0$copyload2$i$i1$i$i|0),($66|0),($64|0))|0;
   HEAP32[$2>>2] = $64;
   ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 41) {
  $84 = ___cxa_find_matching_catch_2()|0;
  $85 = tempRet0;
  $eh$lpad$body126$index2Z2D = $85;$eh$lpad$body126$indexZ2D = $84;
 }
 $personalityslot$sroa$0$0 = $eh$lpad$body126$indexZ2D;$personalityslot$sroa$10$0 = $eh$lpad$body126$index2Z2D;
 __ZN4core3ptr13drop_in_place17h5c67080057a70880E($ret);
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h404387ea88c5ad22E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h4dd8aef055c0581dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$sroa$0$0$copyload = 0, $_5$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_5$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $1 = $_5$sroa$0$0$copyload;
 (_pthread_mutex_lock(($1|0))|0);
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP8[$2>>0]=1&255;HEAP8[$2+1>>0]=(1>>8)&255;HEAP8[$2+2>>0]=(1>>16)&255;HEAP8[$2+3>>0]=1>>24;
 (_pthread_mutex_unlock(($1|0))|0);
 $_5$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$3>>2]|0;
 $4 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i$i$i>>2] = (($4-1)|0);
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___rust_dealloc($3,4,4);
  ___rust_dealloc($0,4,4);
  return;
 }
 /* fence */;
 __THREW__ = 0;
 invoke_vi(138,($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  __ZN5alloc4heap8box_free17ha61b8c99361d573eE($3);
  __ZN5alloc4heap8box_free17hef559bedc4395708E($0);
  ___resumeException($8|0);
  // unreachable;
 } else {
  ___rust_dealloc($3,4,4);
  ___rust_dealloc($0,4,4);
  return;
 }
}
function __ZN5alloc4heap8box_free17ha61b8c99361d573eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,4,4);
 return;
}
function __ZN5alloc4heap8box_free17hef559bedc4395708E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,4,4);
 return;
}
function __ZN3std2io5stdio6stdout11stdout_init17h57cc982e9f814456E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_38$i$i$i$i$i$i = 0, $_6$i$i$i$i = 0, $_6$i$i$i$i6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$4$sroa$12 = 0, $_6$sroa$6 = 0, $_7$sroa$4$sroa$11 = 0, $_8$sroa$10 = 0, $attr$i$i = 0, $data$i$sroa$0$0$$sroa_idx = 0, $data$i$sroa$10$0$$sroa_raw_idx = 0;
 var $data$i$sroa$12$0$$sroa_raw_idx = 0, $data$i$sroa$13 = 0, $data$i$sroa$13$0$$sroa_raw_idx = 0, $data$i$sroa$14$0$$sroa_raw_idx = 0, $data$i$sroa$15 = 0, $data$i$sroa$15$0$$sroa_raw_idx = 0, $data$i$sroa$4$0$$sroa_idx = 0, $data$i$sroa$5$0$$sroa_idx = 0, $data$i$sroa$6$0$$sroa_idx = 0, $data$i$sroa$7$0$$sroa_idx = 0, $data$i$sroa$8$0$$sroa_raw_idx = 0, $data$i$sroa$9$0$$sroa_raw_idx = 0, $err$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $err$i$i$i5 = 0, $mutex$sroa$7$i = 0, $t$i$sroa$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $err$i$i$i5 = sp + 88|0;
 $_6$i$i$i$i6 = sp + 72|0;
 $data$i$sroa$13 = sp + 121|0;
 $data$i$sroa$15 = sp + 118|0;
 $attr$i$i = sp + 64|0;
 $err$i$i$i = sp + 48|0;
 $_6$i$i$i$i = sp + 32|0;
 $mutex$sroa$7$i = sp + 115|0;
 $t$i$sroa$12 = sp + 112|0;
 $err$i$i$i$i$i$i$i = sp + 16|0;
 $_38$i$i$i$i$i$i = sp;
 $_8$sroa$10 = sp + 109|0;
 $_7$sroa$4$sroa$11 = sp + 106|0;
 $_6$sroa$4$sroa$12 = sp + 103|0;
 $_6$sroa$6 = sp + 100|0;
 $0 = (___rust_alloc(1024,1,$err$i$i$i$i$i$i$i)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_38$i$i$i$i$i$i);
  // unreachable;
 }
 $2 = $0;
 ;HEAP8[$_7$sroa$4$sroa$11>>0]=HEAP8[$_8$sroa$10>>0]|0;HEAP8[$_7$sroa$4$sroa$11+1>>0]=HEAP8[$_8$sroa$10+1>>0]|0;HEAP8[$_7$sroa$4$sroa$11+2>>0]=HEAP8[$_8$sroa$10+2>>0]|0;
 ;HEAP8[$t$i$sroa$12>>0]=HEAP8[$_7$sroa$4$sroa$11>>0]|0;HEAP8[$t$i$sroa$12+1>>0]=HEAP8[$_7$sroa$4$sroa$11+1>>0]|0;HEAP8[$t$i$sroa$12+2>>0]=HEAP8[$_7$sroa$4$sroa$11+2>>0]|0;
 $3 = (___rust_alloc(28,4,$err$i$i$i)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 }
 (_pthread_mutexattr_init(($attr$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i|0),1)|0);
 (_pthread_mutex_init(($3|0),($attr$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i|0))|0);
 ;HEAP8[$_6$sroa$4$sroa$12>>0]=HEAP8[$t$i$sroa$12>>0]|0;HEAP8[$_6$sroa$4$sroa$12+1>>0]=HEAP8[$t$i$sroa$12+1>>0]|0;HEAP8[$_6$sroa$4$sroa$12+2>>0]=HEAP8[$t$i$sroa$12+2>>0]|0;
 ;HEAP8[$_6$sroa$6>>0]=HEAP8[$mutex$sroa$7$i>>0]|0;HEAP8[$_6$sroa$6+1>>0]=HEAP8[$mutex$sroa$7$i+1>>0]|0;HEAP8[$_6$sroa$6+2>>0]=HEAP8[$mutex$sroa$7$i+2>>0]|0;
 ;HEAP8[$data$i$sroa$13>>0]=HEAP8[$_6$sroa$4$sroa$12>>0]|0;HEAP8[$data$i$sroa$13+1>>0]=HEAP8[$_6$sroa$4$sroa$12+1>>0]|0;HEAP8[$data$i$sroa$13+2>>0]=HEAP8[$_6$sroa$4$sroa$12+2>>0]|0;
 ;HEAP8[$data$i$sroa$15>>0]=HEAP8[$_6$sroa$6>>0]|0;HEAP8[$data$i$sroa$15+1>>0]=HEAP8[$_6$sroa$6+1>>0]|0;HEAP8[$data$i$sroa$15+2>>0]=HEAP8[$_6$sroa$6+2>>0]|0;
 $5 = (___rust_alloc(40,4,$err$i$i$i5)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i6);
  // unreachable;
 } else {
  $7 = $3;
  HEAP32[$5>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($5)) + 4|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 1;
  $data$i$sroa$0$0$$sroa_idx = ((($5)) + 8|0);
  HEAP32[$data$i$sroa$0$0$$sroa_idx>>2] = $7;
  $data$i$sroa$4$0$$sroa_idx = ((($5)) + 12|0);
  HEAP32[$data$i$sroa$4$0$$sroa_idx>>2] = 0;
  $data$i$sroa$5$0$$sroa_idx = ((($5)) + 16|0);
  HEAP32[$data$i$sroa$5$0$$sroa_idx>>2] = $2;
  $data$i$sroa$6$0$$sroa_idx = ((($5)) + 20|0);
  HEAP32[$data$i$sroa$6$0$$sroa_idx>>2] = 1024;
  $data$i$sroa$7$0$$sroa_idx = ((($5)) + 24|0);
  HEAP32[$data$i$sroa$7$0$$sroa_idx>>2] = 0;
  $data$i$sroa$8$0$$sroa_raw_idx = ((($5)) + 28|0);
  HEAP8[$data$i$sroa$8$0$$sroa_raw_idx>>0] = 1;
  $data$i$sroa$9$0$$sroa_raw_idx = ((($5)) + 29|0);
  HEAP8[$data$i$sroa$9$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$10$0$$sroa_raw_idx = ((($5)) + 30|0);
  HEAP8[$data$i$sroa$10$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$12$0$$sroa_raw_idx = ((($5)) + 32|0);
  HEAP8[$data$i$sroa$12$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$13$0$$sroa_raw_idx = ((($5)) + 33|0);
  ;HEAP8[$data$i$sroa$13$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$13>>0]|0;HEAP8[$data$i$sroa$13$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$13+1>>0]|0;HEAP8[$data$i$sroa$13$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$13+2>>0]|0;
  $data$i$sroa$14$0$$sroa_raw_idx = ((($5)) + 36|0);
  HEAP8[$data$i$sroa$14$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$15$0$$sroa_raw_idx = ((($5)) + 37|0);
  ;HEAP8[$data$i$sroa$15$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$15>>0]|0;HEAP8[$data$i$sroa$15$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$15+1>>0]|0;HEAP8[$data$i$sroa$15$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$15+2>>0]|0;
  $8 = $5;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h95b7a6feabb14128E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_18$i = 0, $_26$i = 0, $_3$i$i$i = 0, $_3$i$i61$i = 0, $_3$sroa$0$0$$sroa_idx$i$i = 0, $_3$sroa$0$0$$sroa_idx$i76$i = 0, $_46$sroa$5$sroa$0$0$extract$trunc$i = 0, $_53$i = 0, $_8 = 0, $cond$i = 0;
 var $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i65$i = 0, $cond$i$i$i64$i = 0, $cond4$i = 0, $cond7$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $err1$sroa$0$0$$sroa_idx$i = 0, $or$cond$i = 0, $phitmp$i = 0, $self$i$sroa$0$0$copyload$i$i$i = 0, $self$i$sroa$0$0$copyload$i$i63$i = 0, $self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx$i = 0, $self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx126$i = 0, $self$i$sroa$4$0$$sroa_idx3$i$i$i = 0, $self$i$sroa$4$0$copyload$i$i71125$i = 0, $self$i$sroa$4$0$copyload$i$i71127140$i = 0, $switch$i81$i = 0;
 var $switch$i91$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_3$i$i61$i = sp + 64|0;
 $_3$i$i$i = sp + 48|0;
 $_53$i = sp + 32|0;
 $_26$i = sp + 16|0;
 $_18$i = sp + 8|0;
 $_8 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $cond$i$i$i = ($6|0)==(0);
 if (!($cond$i$i$i)) {
  __ZN4core6result13unwrap_failed17h0f6cc8b8f2677502E();
  // unreachable;
 }
 HEAP8[$5>>0]=-1&255;HEAP8[$5+1>>0]=(-1>>8)&255;HEAP8[$5+2>>0]=(-1>>16)&255;HEAP8[$5+3>>0]=-1>>24;
 $7 = ((($4)) + 8|0);
 $phitmp$i = $7;
 $8 = $5;
 $9 = $_8;
 $10 = $9;
 HEAP32[$10>>2] = $phitmp$i;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ((($4)) + 24|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   label = 10;
  } else {
   __THREW__ = 0;
   invoke_vii(137,($_3$i$i$i|0),($7|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    $self$i$sroa$0$0$copyload$i$i$i = HEAP32[$_3$i$i$i>>2]|0;
    $cond$i$i$i$i = ($self$i$sroa$0$0$copyload$i$i$i|0)==(0);
    if (!($cond$i$i$i$i)) {
     $self$i$sroa$4$0$$sroa_idx3$i$i$i = ((($_3$i$i$i)) + 4|0);
     $21 = $self$i$sroa$4$0$$sroa_idx3$i$i$i;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $24 = (($21) + 4)|0;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$0>>2] = 1;
     $_3$sroa$0$0$$sroa_idx$i$i = ((($0)) + 4|0);
     $27 = $_3$sroa$0$0$$sroa_idx$i$i;
     $28 = $27;
     HEAP32[$28>>2] = $23;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = $26;
     HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
     STACKTOP = sp;return;
    }
    $18 = ((($4)) + 20|0);
    $19 = HEAP8[$18>>0]|0;
    $cond$i$i$i$i$i$i$i = ($19<<24>>24)==(0);
    if ($cond$i$i$i$i$i$i$i) {
     __THREW__ = 0;
     invoke_vi(91,(2280|0));
     $20 = __THREW__; __THREW__ = 0;
     break;
    } else {
     HEAP8[$13>>0] = 0;
     label = 10;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   __THREW__ = 0;
   invoke_viiii(139,($_18$i|0),10,($2|0),($3|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    $33 = HEAP32[$_18$i>>2]|0;
    $cond$i = ($33|0)==(0);
    if ($cond$i) {
     __THREW__ = 0;
     invoke_viiii(140,($0|0),($7|0),($2|0),($3|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break;
     }
     HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
     STACKTOP = sp;return;
    }
    $36 = ((($_18$i)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 1)|0;
    $39 = ($38>>>0)>($3>>>0);
    if ($39) {
     __THREW__ = 0;
     invoke_vii(108,($38|0),($3|0));
     $40 = __THREW__; __THREW__ = 0;
     break;
    }
    __THREW__ = 0;
    invoke_viiii(140,($_26$i|0),($7|0),($2|0),($38|0));
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if (!($42)) {
     $43 = HEAP32[$_26$i>>2]|0;
     $cond4$i = ($43|0)==(0);
     if (!($cond4$i)) {
      $err1$sroa$0$0$$sroa_idx$i = ((($_26$i)) + 4|0);
      $52 = $err1$sroa$0$0$$sroa_idx$i;
      $53 = $52;
      $54 = HEAP32[$53>>2]|0;
      $55 = (($52) + 4)|0;
      $56 = $55;
      $57 = HEAP32[$56>>2]|0;
      HEAP32[$0>>2] = 1;
      $_3$sroa$0$0$$sroa_idx$i76$i = ((($0)) + 4|0);
      $58 = $_3$sroa$0$0$$sroa_idx$i76$i;
      $59 = $58;
      HEAP32[$59>>2] = $54;
      $60 = (($58) + 4)|0;
      $61 = $60;
      HEAP32[$61>>2] = $57;
      HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     $44 = ((($_26$i)) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     HEAP8[$13>>0] = 1;
     __THREW__ = 0;
     invoke_vii(137,($_3$i$i61$i|0),($7|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if (!($47)) {
      $self$i$sroa$0$0$copyload$i$i63$i = HEAP32[$_3$i$i61$i>>2]|0;
      $cond$i$i$i64$i = ($self$i$sroa$0$0$copyload$i$i63$i|0)==(0);
      if ($cond$i$i$i64$i) {
       $48 = ((($4)) + 20|0);
       $49 = HEAP8[$48>>0]|0;
       $cond$i$i$i$i$i$i65$i = ($49<<24>>24)==(0);
       if ($cond$i$i$i$i$i$i65$i) {
        __THREW__ = 0;
        invoke_vi(91,(2280|0));
        $50 = __THREW__; __THREW__ = 0;
        break;
       }
       HEAP8[$13>>0] = 0;
       $51 = ($45|0)==($38|0);
       if ($51) {
        $62 = (($2) + ($38)|0);
        $63 = (($3) - ($38))|0;
        __THREW__ = 0;
        invoke_viiii(140,($_53$i|0),($7|0),($62|0),($63|0));
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         break;
        }
        $66 = HEAP32[$_53$i>>2]|0;
        $cond7$i = ($66|0)==(0);
        $67 = ((($_53$i)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = $cond7$i ? $68 : 0;
        $$sink$i = (($69) + ($38))|0;
        HEAP32[$0>>2] = 0;
        $70 = ((($0)) + 4|0);
        HEAP32[$70>>2] = $$sink$i;
        $71 = $68&255;
        $switch$i81$i = ($71&255)<(2);
        $or$cond$i = $cond7$i | $switch$i81$i;
        if (!($or$cond$i)) {
         $72 = ((($_53$i)) + 8|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = ((($73)) + 4|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = ((($73)) + 8|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = HEAP32[$77>>2]|0;
         __THREW__ = 0;
         invoke_vi($78|0,($75|0));
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          $88 = ___cxa_find_matching_catch_2()|0;
          $89 = tempRet0;
          $90 = HEAP32[$74>>2]|0;
          $91 = HEAP32[$76>>2]|0;
          __ZN5alloc4heap8box_free17he7aff06e65e4596eE($90,$91);
          __ZN5alloc4heap8box_free17h53b02e8f65dea423E($73);
          $eh$lpad$body$index3Z2D = $89;$eh$lpad$body$indexZ2D = $88;
          __ZN4core3ptr13drop_in_place17h951b6646891fa0deE($_8);
          ___resumeException($eh$lpad$body$indexZ2D|0);
          // unreachable;
         }
         $81 = HEAP32[$76>>2]|0;
         $82 = ((($81)) + 4|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = ($83|0)==(0);
         if (!($84)) {
          $85 = HEAP32[$74>>2]|0;
          $86 = ((($81)) + 8|0);
          $87 = HEAP32[$86>>2]|0;
          ___rust_dealloc($85,$83,$87);
         }
         ___rust_dealloc($73,12,4);
        }
        HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
        STACKTOP = sp;return;
       }
      } else {
       $self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx$i = ((($_3$i$i61$i)) + 4|0);
       $self$i$sroa$4$0$copyload$i$i71125$i = HEAP32[$self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx$i>>2]|0;
       $self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx126$i = ((($_3$i$i61$i)) + 8|0);
       $self$i$sroa$4$0$copyload$i$i71127140$i = HEAP32[$self$i$sroa$4$0$$sroa_cast$i$i70$sroa_idx126$i>>2]|0;
       $_46$sroa$5$sroa$0$0$extract$trunc$i = $self$i$sroa$4$0$copyload$i$i71125$i&255;
       $switch$i91$i = ($_46$sroa$5$sroa$0$0$extract$trunc$i&255)<(2);
       if (!($switch$i91$i)) {
        $93 = ((($self$i$sroa$4$0$copyload$i$i71127140$i)) + 4|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ((($self$i$sroa$4$0$copyload$i$i71127140$i)) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = HEAP32[$96>>2]|0;
        __THREW__ = 0;
        invoke_vi($97|0,($94|0));
        $98 = __THREW__; __THREW__ = 0;
        $99 = $98&1;
        if ($99) {
         $107 = ___cxa_find_matching_catch_2()|0;
         $108 = tempRet0;
         $109 = HEAP32[$93>>2]|0;
         $110 = HEAP32[$95>>2]|0;
         __ZN5alloc4heap8box_free17he7aff06e65e4596eE($109,$110);
         __ZN5alloc4heap8box_free17h53b02e8f65dea423E($self$i$sroa$4$0$copyload$i$i71127140$i);
         $eh$lpad$body$index3Z2D = $108;$eh$lpad$body$indexZ2D = $107;
         __ZN4core3ptr13drop_in_place17h951b6646891fa0deE($_8);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        $100 = HEAP32[$95>>2]|0;
        $101 = ((($100)) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ($102|0)==(0);
        if (!($103)) {
         $104 = HEAP32[$93>>2]|0;
         $105 = ((($100)) + 8|0);
         $106 = HEAP32[$105>>2]|0;
         ___rust_dealloc($104,$102,$106);
        }
        ___rust_dealloc($self$i$sroa$4$0$copyload$i$i71127140$i,12,4);
       }
      }
      HEAP32[$0>>2] = 0;
      $92 = ((($0)) + 4|0);
      HEAP32[$92>>2] = $45;
      HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $111 = ___cxa_find_matching_catch_2()|0;
 $112 = tempRet0;
 $eh$lpad$body$index3Z2D = $112;$eh$lpad$body$indexZ2D = $111;
 __ZN4core3ptr13drop_in_place17h951b6646891fa0deE($_8);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hdf5802326bb176deE($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i = 0, $$pre6$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond2$i$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
    // unreachable;
   }
   $7 = HEAP32[$5>>2]|0;
   $cond2$i$i$i$i$i$i$i$i = ($7|0)==(0);
   if ($cond2$i$i$i$i$i$i$i$i) {
    $8 = $5;
    $9 = $8;
    HEAP8[$9>>0]=1&255;HEAP8[$9+1>>0]=(1>>8)&255;HEAP8[$9+2>>0]=(1>>16)&255;HEAP8[$9+3>>0]=1>>24;
    $10 = (($8) + 4)|0;
    $11 = $10;
    HEAP8[$11>>0]=0&255;HEAP8[$11+1>>0]=(0>>8)&255;HEAP8[$11+2>>0]=(0>>16)&255;HEAP8[$11+3>>0]=0>>24;
    $$pre6$i$i$i$i$i$i = ((($5)) + 4|0);
    HEAP8[$$pre6$i$i$i$i$i$i>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i$i+3>>0]=0>>24;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($5)) + 4|0);
   $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
   $12 = ($$pre$i$i$i$i$i$i|0)==(0);
   if (!($12)) {
    $13 = ((($1)) + 28|0);
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 (_pthread_mutex_unlock(($15|0))|0);
 return;
}
function __ZN3std3sys3imp6memchr7memrchr17hbb99f8c011977941E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = 0, $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i = 0, $_21$0$i$i = 0;
 var $g$sroa$0$0$i$i$i$i = 0, $g$sroa$0$0$i$i15$i$i = 0, $g$sroa$0$1$i$i$i$i = 0, $g$sroa$0$1$i$i26$i$i = 0, $offset$0$i$i = 0, $offset$1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = (($4) + ($3))|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $offset$0$i$i = $3;
  } else {
   $8 = ($6>>>0)<($3>>>0);
   $9 = (($3) - ($6))|0;
   $_21$0$i$i = $8 ? $9 : 0;
   $10 = ($_21$0$i$i>>>0)>($3>>>0);
   if ($10) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($_21$0$i$i,$3);
    // unreachable;
   }
   $11 = (($2) + ($_21$0$i$i)|0);
   $12 = (($3) - ($_21$0$i$i))|0;
   $13 = (($11) + ($12)|0);
   $14 = $11;
   $15 = $13;$g$sroa$0$0$i$i15$i$i = $12;
   while(1) {
    $16 = $15;
    $17 = (($16) - ($14))|0;
    $18 = ($17>>>0)>(3);
    if (!($18)) {
     $36 = $15;$g$sroa$0$1$i$i26$i$i = $g$sroa$0$0$i$i15$i$i;
     label = 10;
     break;
    }
    $19 = ((($15)) + -1|0);
    $20 = (($g$sroa$0$0$i$i15$i$i) + -1)|0;
    $21 = HEAP8[$19>>0]|0;
    $22 = ($21<<24>>24)==($1<<24>>24);
    if ($22) {
     $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = $20;
     break;
    }
    $23 = ((($15)) + -2|0);
    $24 = (($g$sroa$0$0$i$i15$i$i) + -2)|0;
    $25 = HEAP8[$23>>0]|0;
    $26 = ($25<<24>>24)==($1<<24>>24);
    if ($26) {
     $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = $24;
     break;
    }
    $27 = ((($15)) + -3|0);
    $28 = (($g$sroa$0$0$i$i15$i$i) + -3)|0;
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==($1<<24>>24);
    if ($30) {
     $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = $28;
     break;
    }
    $31 = ((($15)) + -4|0);
    $32 = (($g$sroa$0$0$i$i15$i$i) + -4)|0;
    $33 = HEAP8[$31>>0]|0;
    $34 = ($33<<24>>24)==($1<<24>>24);
    if ($34) {
     $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = $32;
     break;
    } else {
     $15 = $31;$g$sroa$0$0$i$i15$i$i = $32;
    }
   }
   if ((label|0) == 10) {
    while(1) {
     label = 0;
     $35 = ($11|0)==($36|0);
     if ($35) {
      $offset$0$i$i = $_21$0$i$i;
      break L1;
     }
     $37 = ((($36)) + -1|0);
     $38 = (($g$sroa$0$1$i$i26$i$i) + -1)|0;
     $39 = HEAP8[$37>>0]|0;
     $40 = ($39<<24>>24)==($1<<24>>24);
     if ($40) {
      $_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i = $38;
      break;
     } else {
      $36 = $37;$g$sroa$0$1$i$i26$i$i = $38;
      label = 10;
     }
    }
   }
   $41 = (($_15$sroa$6$8$insert$insert$sink$i$i32$off32$ph$i$i) + ($_21$0$i$i))|0;
   HEAP32[$0>>2] = 1;
   $42 = ((($0)) + 4|0);
   HEAP32[$42>>2] = $41;
   return;
  }
 } while(0);
 $43 = $1&255;
 $44 = $43 << 8;
 $45 = $44 | $43;
 $46 = $45 << 16;
 $47 = $46 | $45;
 $offset$1$i$i = $offset$0$i$i;
 while(1) {
  $48 = ($offset$1$i$i>>>0)>(7);
  if (!($48)) {
   break;
  }
  $83 = (($offset$1$i$i) + -8)|0;
  $84 = (($2) + ($83)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($offset$1$i$i) + -4)|0;
  $87 = (($2) + ($86)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $85 ^ $47;
  $90 = (($89) + -16843009)|0;
  $91 = $89 & -2139062144;
  $92 = $91 ^ -2139062144;
  $93 = $92 & $90;
  $94 = $88 ^ $47;
  $95 = (($94) + -16843009)|0;
  $96 = $94 & -2139062144;
  $97 = $96 ^ -2139062144;
  $98 = $97 & $95;
  $99 = $98 | $93;
  $100 = ($99|0)==(0);
  if ($100) {
   $offset$1$i$i = $83;
  } else {
   break;
  }
 }
 $49 = ($offset$1$i$i>>>0)>($3>>>0);
 if ($49) {
  __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($offset$1$i$i,$3);
  // unreachable;
 }
 $50 = (($2) + ($offset$1$i$i)|0);
 $51 = $50;$g$sroa$0$0$i$i$i$i = $offset$1$i$i;
 while(1) {
  $52 = $51;
  $53 = (($52) - ($4))|0;
  $54 = ($53>>>0)>(3);
  if (!($54)) {
   $71 = $51;$g$sroa$0$1$i$i$i$i = $g$sroa$0$0$i$i$i$i;
   label = 24;
   break;
  }
  $55 = ((($51)) + -1|0);
  $56 = (($g$sroa$0$0$i$i$i$i) + -1)|0;
  $57 = HEAP8[$55>>0]|0;
  $58 = ($57<<24>>24)==($1<<24>>24);
  if ($58) {
   $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i = $56;
   label = 21;
   break;
  }
  $59 = ((($51)) + -2|0);
  $60 = (($g$sroa$0$0$i$i$i$i) + -2)|0;
  $61 = HEAP8[$59>>0]|0;
  $62 = ($61<<24>>24)==($1<<24>>24);
  if ($62) {
   $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i = $60;
   label = 21;
   break;
  }
  $63 = ((($51)) + -3|0);
  $64 = (($g$sroa$0$0$i$i$i$i) + -3)|0;
  $65 = HEAP8[$63>>0]|0;
  $66 = ($65<<24>>24)==($1<<24>>24);
  if ($66) {
   $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i = $64;
   label = 21;
   break;
  }
  $67 = ((($51)) + -4|0);
  $68 = (($g$sroa$0$0$i$i$i$i) + -4)|0;
  $69 = HEAP8[$67>>0]|0;
  $70 = ($69<<24>>24)==($1<<24>>24);
  if ($70) {
   $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i = $68;
   label = 21;
   break;
  } else {
   $51 = $67;$g$sroa$0$0$i$i$i$i = $68;
  }
 }
 L32: do {
  if ((label|0) == 21) {
   $79 = 1;$82 = $_15$sroa$6$8$insert$insert$sink$ph123$in$in$in$i$i$i$i;
  }
  else if ((label|0) == 24) {
   while(1) {
    label = 0;
    $72 = ($71|0)==($2|0);
    if ($72) {
     $79 = 0;$82 = 0;
     break L32;
    }
    $73 = ((($71)) + -1|0);
    $74 = (($g$sroa$0$1$i$i$i$i) + -1)|0;
    $75 = HEAP8[$73>>0]|0;
    $76 = ($75<<24>>24)==($1<<24>>24);
    if ($76) {
     $79 = 1;$82 = $74;
     break;
    } else {
     $71 = $73;$g$sroa$0$1$i$i$i$i = $74;
     label = 24;
    }
   }
  }
 } while(0);
 $77 = $0;
 $78 = $77;
 HEAP32[$78>>2] = $79;
 $80 = (($77) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $82;
 return;
}
function __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h9a075e68f2005596E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$sink$i$i$i$i = 0, $$pre = 0, $$ret$sroa$4$0$i$i$i$off0 = 0, $$ret$sroa$4$0$i$i$i$off32 = 0, $$sink$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i$i$i = 0;
 var $_15 = 0, $_3$sroa$0$0$$sroa_idx$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i = 0, $_35$sroa$4$0$$sroa_idx57 = 0, $_35$sroa$5$0$$sroa_idx59 = 0, $cond = 0, $cond$i29 = 0, $cond$i31 = 0, $cond$i34 = 0, $cond19$i = 0, $err$sroa$0$0$$sroa_idx = 0, $or$cond = 0, $or$cond81 = 0, $r$i$sroa$5$sroa$0$0$extract$trunc = 0, $r$sroa$0$1 = 0, $r$sroa$6$1 = 0, $r$sroa$8$1 = 0, $ret$sroa$4$0$i$i$i$off0 = 0, $ret$sroa$4$0$i$i$i$off32 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_15 = sp;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 do {
  if ($9) {
   __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h42e6a373fdad5ea9E($_15,$1);
   $10 = HEAP32[$_15>>2]|0;
   $cond = ($10|0)==(0);
   if ($cond) {
    $$pre = HEAP32[$7>>2]|0;
    $21 = $$pre;
    break;
   }
   $err$sroa$0$0$$sroa_idx = ((($_15)) + 4|0);
   $11 = $err$sroa$0$0$$sroa_idx;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$0>>2] = 1;
   $_3$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
   $17 = $_3$sroa$0$0$$sroa_idx$i;
   $18 = $17;
   HEAP32[$18>>2] = $13;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = $16;
   STACKTOP = sp;return;
  } else {
   $21 = $8;
  }
 } while(0);
 $22 = ($21>>>0)>($3>>>0);
 if ($22) {
  __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h29d5967feafbc7d1E($1,$3);
  $34 = HEAP32[$4>>2]|0;
  $35 = (($34) + ($3))|0;
  HEAP32[$4>>2] = $35;
  $_3$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$1>>2]|0;
  $36 = (($_3$sroa$0$0$copyload2$i$i$i$i$i) + ($34)|0);
  _memcpy(($36|0),($2|0),($3|0))|0;
  HEAP32[$0>>2] = 0;
  $37 = ((($0)) + 4|0);
  HEAP32[$37>>2] = $3;
  STACKTOP = sp;return;
 }
 $23 = ((($1)) + 14|0);
 HEAP8[$23>>0] = 1;
 $24 = ((($1)) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $cond$i29 = ($25<<24>>24)==(0);
 if ($cond$i29) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2280);
  // unreachable;
 }
 $26 = ((($1)) + 13|0);
 $27 = HEAP8[$26>>0]|0;
 $cond$i31 = ($27<<24>>24)==(0);
 if ($cond$i31) {
  $28 = ($3|0)>(-1);
  $_0$0$sroa$speculated$i$i$i$i$i$i = $28 ? $3 : 2147483647;
  $29 = (_write(1,$2,$_0$0$sroa$speculated$i$i$i$i$i$i)|0);
  $30 = ($29|0)==(-1);
  if ($30) {
   $31 = (___errno_location()|0);
   $32 = HEAP32[$31>>2]|0;
   $$sink$i$i$i$i = 1;$ret$sroa$4$0$i$i$i$off0 = 0;$ret$sroa$4$0$i$i$i$off32 = $32;
  } else {
   $$sink$i$i$i$i = 0;$ret$sroa$4$0$i$i$i$off0 = $29;$ret$sroa$4$0$i$i$i$off32 = 0;
  }
  $r$i$sroa$5$sroa$0$0$extract$trunc = $ret$sroa$4$0$i$i$i$off0&255;
  $cond$i34 = ($$sink$i$i$i$i|0)==(1);
  $cond19$i = ($r$i$sroa$5$sroa$0$0$extract$trunc<<24>>24)==(0);
  $or$cond = $cond19$i & $cond$i34;
  $33 = ($ret$sroa$4$0$i$i$i$off32|0)==(9);
  $or$cond81 = $33 & $or$cond;
  $$$sink$i$i$i$i = $or$cond81 ? 0 : $$sink$i$i$i$i;
  $$ret$sroa$4$0$i$i$i$off0 = $or$cond81 ? $3 : $ret$sroa$4$0$i$i$i$off0;
  $$ret$sroa$4$0$i$i$i$off32 = $or$cond81 ? 9 : $ret$sroa$4$0$i$i$i$off32;
  $r$sroa$0$1 = $$$sink$i$i$i$i;$r$sroa$6$1 = $$ret$sroa$4$0$i$i$i$off0;$r$sroa$8$1 = $$ret$sroa$4$0$i$i$i$off32;
 } else {
  $r$sroa$0$1 = 0;$r$sroa$6$1 = $3;$r$sroa$8$1 = 0;
 }
 HEAP8[$23>>0] = 0;
 HEAP32[$0>>2] = $r$sroa$0$1;
 $_35$sroa$4$0$$sroa_idx57 = ((($0)) + 4|0);
 HEAP32[$_35$sroa$4$0$$sroa_idx57>>2] = $r$sroa$6$1;
 $_35$sroa$5$0$$sroa_idx59 = ((($0)) + 8|0);
 HEAP32[$_35$sroa$5$0$$sroa_idx59>>2] = $r$sroa$8$1;
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17h951b6646891fa0deE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 return;
}
function __ZN3std2io5Write9write_all17h268dc3cc6ff5f450E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sroa_idx = 0, $$sroa_idx58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_29$sroa$0$0$$sroa_idx = 0;
 var $_4$i$i$i = 0, $_6$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i = 0, $buf$sroa$0$087$ph = 0, $buf$sroa$8$086$ph = 0, $cond = 0, $cond123 = 0, $cond124 = 0, $cond2 = 0, $cond68 = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $or$cond = 0, $switch$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0;
 var $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $err$i$i$i$i = sp + 96|0;
 $_6$i$i$i$i$i = sp + 80|0;
 $x$i$sroa$4$i = sp + 108|0;
 $err$i$i$i$i$i$i$i = sp + 64|0;
 $_6$i$i$i$i$i$i$i$i = sp + 48|0;
 $x$sroa$0$i$i$i$i$i = sp + 32|0;
 $_4$i$i$i = sp + 16|0;
 $_10 = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $5 = ((($_10)) + 4|0);
   $6 = ((($_10)) + 4|0);
   $7 = ((($_10)) + 8|0);
   $8 = ((($6)) + 1|0);
   $buf$sroa$0$087$ph = $2;$buf$sroa$8$086$ph = $3;
   L3: while(1) {
    __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h95b7a6feabb14128E($_10,$1,$buf$sroa$0$087$ph,$buf$sroa$8$086$ph);
    $9 = HEAP32[$_10>>2]|0;
    $cond123 = ($9|0)==(0);
    L5: do {
     if (!($cond123)) {
      $cond124 = $cond123;
      while(1) {
       $trunc$i = HEAP8[$6>>0]|0;
       $trunc$i$clear = $trunc$i & 3;
       switch ($trunc$i$clear<<24>>24) {
       case 0:  {
        $17 = HEAP32[$7>>2]|0;
        $cond68 = ($17|0)==(4);
        if (!($cond68)) {
         label = 17;
         break L3;
        }
        break;
       }
       case 1:  {
        $$sink = $8;
        label = 16;
        break;
       }
       default: {
        $18 = HEAP32[$7>>2]|0;
        $$sink = $18;
        label = 16;
       }
       }
       if ((label|0) == 16) {
        label = 0;
        $21 = HEAP8[$$sink>>0]|0;
        $22 = ($21<<24>>24)==(15);
        if (!($22)) {
         label = 17;
         break L3;
        }
       }
       $switch$i = ($trunc$i&255)<(2);
       $or$cond = $cond124 | $switch$i;
       if (!($or$cond)) {
        $34 = HEAP32[$7>>2]|0;
        $35 = ((($34)) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ((($34)) + 8|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = HEAP32[$38>>2]|0;
        __THREW__ = 0;
        invoke_vi($39|0,($36|0));
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if ($41) {
         label = 24;
         break L3;
        }
        $42 = HEAP32[$37>>2]|0;
        $43 = ((($42)) + 4|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)==(0);
        if (!($45)) {
         $46 = HEAP32[$35>>2]|0;
         $47 = ((($42)) + 8|0);
         $48 = HEAP32[$47>>2]|0;
         ___rust_dealloc($46,$44,$48);
        }
        ___rust_dealloc($34,12,4);
       }
       __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h95b7a6feabb14128E($_10,$1,$buf$sroa$0$087$ph,$buf$sroa$8$086$ph);
       $53 = HEAP32[$_10>>2]|0;
       $cond = ($53|0)==(0);
       if ($cond) {
        break L5;
       } else {
        $cond124 = $cond;
       }
      }
     }
    } while(0);
    $16 = HEAP32[$5>>2]|0;
    $cond2 = ($16|0)==(0);
    if ($cond2) {
     label = 5;
     break;
    }
    $19 = ($buf$sroa$8$086$ph>>>0)<($16>>>0);
    if ($19) {
     label = 15;
     break;
    }
    $54 = (($buf$sroa$0$087$ph) + ($16)|0);
    $55 = (($buf$sroa$8$086$ph) - ($16))|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break L1;
    } else {
     $buf$sroa$0$087$ph = $54;$buf$sroa$8$086$ph = $55;
    }
   }
   do {
    if ((label|0) == 5) {
     __THREW__ = 0;
     invoke_viii(122,($_4$i$i$i|0),(5062|0),28);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      $57 = ___cxa_find_matching_catch_2()|0;
      $58 = tempRet0;
      __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($_10);
      ___resumeException($57|0);
      // unreachable;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
     $12 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i)|0);
     $13 = ($12|0)==(0|0);
     if ($13) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$12>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$12+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
     $14 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$14>>0] = 14;
      $x$i$sroa$4$0$$sroa_raw_idx$i = ((($14)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i = ((($14)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $12;
      $x$i$sroa$6$0$$sroa_idx$i = ((($14)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 104;
      $33 = $14;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx58 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx58>>2] = $33;
      break;
     }
    }
    else if ((label|0) == 15) {
     __THREW__ = 0;
     invoke_vii(124,($16|0),($buf$sroa$8$086$ph|0));
     $20 = __THREW__; __THREW__ = 0;
     $57 = ___cxa_find_matching_catch_2()|0;
     $58 = tempRet0;
     __ZN4core3ptr13drop_in_place17hdca853de06a14a17E($_10);
     ___resumeException($57|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     $23 = $6;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) + 4)|0;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     HEAP32[$0>>2] = 1;
     $_29$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
     $29 = $_29$sroa$0$0$$sroa_idx;
     $30 = $29;
     HEAP32[$30>>2] = $25;
     $31 = (($29) + 4)|0;
     $32 = $31;
     HEAP32[$32>>2] = $28;
    }
    else if ((label|0) == 24) {
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     $51 = HEAP32[$35>>2]|0;
     $52 = HEAP32[$37>>2]|0;
     __ZN5alloc4heap8box_free17he7aff06e65e4596eE($51,$52);
     __ZN5alloc4heap8box_free17h53b02e8f65dea423E($34);
     ___resumeException($49|0);
     // unreachable;
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17hc0861914e3408fa1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i13 = 0, $$pre$phi$i$i$i$i$i$i$iZ2D = 0, $$pre6$i$i$i$i$i$i$i = 0, $$pre6$i$i$i$i$i$i$i8 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i11 = 0, $$sroa_idx$i = 0, $$sroa_idx19$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $_13$i = 0, $_4$i$i$i$i = 0, $_5$sroa$0$0$copyload2$i$i$i$i = 0, $_6 = 0, $_6$i$i$i$i$i$i = 0, $_6$i$i$i$i$i$i$i$i$i = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $args = 0, $cond$i = 0, $cond$i$i = 0, $cond2$i$i$i$i$i$i$i$i$i = 0, $cond2$i$i$i$i$i$i$i$i$i6 = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $err$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i = 0, $output$i = 0, $switch$i$i = 0, $x$i$sroa$4$0$$sroa_raw_idx$i$i = 0, $x$i$sroa$4$i$i = 0, $x$i$sroa$5$0$$sroa_idx$i$i = 0, $x$i$sroa$6$0$$sroa_idx$i$i = 0, $x$sroa$0$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $err$i$i$i$i$i = sp + 152|0;
 $_6$i$i$i$i$i$i = sp + 136|0;
 $x$i$sroa$4$i$i = sp + 164|0;
 $err$i$i$i$i$i$i$i$i = sp + 120|0;
 $_6$i$i$i$i$i$i$i$i$i = sp + 104|0;
 $x$sroa$0$i$i$i$i$i$i = sp + 88|0;
 $_4$i$i$i$i = sp + 72|0;
 $_13$i = sp + 48|0;
 $output$i = sp + 32|0;
 $_6 = sp + 24|0;
 $args = sp;
 ;HEAP32[$args>>2]=HEAP32[$2>>2]|0;HEAP32[$args+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$2+20>>2]|0;
 $_5$sroa$0$0$copyload2$i$i$i$i = HEAP32[$1>>2]|0;
 $3 = ((($_5$sroa$0$0$copyload2$i$i$i$i)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 (_pthread_mutex_lock(($4|0))|0);
 $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
 $6 = ($5|0)==(0|0);
 $7 = $3;
 if ($6) {
  __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
  // unreachable;
 }
 $8 = HEAP32[$5>>2]|0;
 $cond2$i$i$i$i$i$i$i$i$i = ($8|0)==(0);
 if ($cond2$i$i$i$i$i$i$i$i$i) {
  $9 = $5;
  $10 = $9;
  HEAP8[$10>>0]=1&255;HEAP8[$10+1>>0]=(1>>8)&255;HEAP8[$10+2>>0]=(1>>16)&255;HEAP8[$10+3>>0]=1>>24;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP8[$12>>0]=0&255;HEAP8[$12+1>>0]=(0>>8)&255;HEAP8[$12+2>>0]=(0>>16)&255;HEAP8[$12+3>>0]=0>>24;
  $$pre6$i$i$i$i$i$i$i = ((($5)) + 4|0);
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$pre6$i$i$i$i$i$i$i;$13 = 0;
 } else {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($5)) + 4|0);
  $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i$i;$13 = $$pre$i$i$i$i$i$i$i;
 }
 HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D>>0]=$13&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+1>>0]=($13>>8)&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+2>>0]=($13>>16)&255;HEAP8[$$pre$phi$i$i$i$i$i$i$iZ2D+3>>0]=$13>>24;
 $14 = ($13|0)!=(0);
 $15 = ((($_5$sroa$0$0$copyload2$i$i$i$i)) + 36|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $14&1;
 $18 = $_6;
 $19 = $18;
 HEAP32[$19>>2] = $7;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 HEAP32[$output$i>>2] = $_6;
 $_7$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 0;
 ;HEAP32[$_13$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_13$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_13$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_13$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_13$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_13$i+20>>2]=HEAP32[$args+20>>2]|0;
 __THREW__ = 0;
 $22 = (invoke_iiii(102,($output$i|0),(304|0),($_13$i|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 L8: do {
  if (!($24)) {
   $cond$i = ($22<<24>>24)==(0);
   do {
    if ($cond$i) {
     HEAP32[$0>>2] = 0;
     label = 17;
    } else {
     $25 = ((($output$i)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0);
     if (!($27)) {
      ;HEAP32[$0>>2]=HEAP32[$25>>2]|0;HEAP32[$0+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$25+8>>2]|0;
      break;
     }
     __THREW__ = 0;
     invoke_viii(122,($_4$i$i$i$i|0),(5036|0),15);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      break L8;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i$i+8>>2]|0;
     $30 = (___rust_alloc(12,4,$err$i$i$i$i$i$i$i$i)|0);
     $31 = ($30|0)==(0|0);
     if ($31) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i$i$i$i);
      // unreachable;
     }
     ;HEAP32[$30>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]|0;HEAP32[$30+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]|0;
     $32 = (___rust_alloc(12,4,$err$i$i$i$i$i)|0);
     $33 = ($32|0)==(0|0);
     if ($33) {
      __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i$i);
      // unreachable;
     } else {
      HEAP8[$32>>0] = 16;
      $x$i$sroa$4$0$$sroa_raw_idx$i$i = ((($32)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$x$i$sroa$4$i$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$x$i$sroa$4$i$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$x$i$sroa$4$i$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i$i = ((($32)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i$i>>2] = $30;
      $x$i$sroa$6$0$$sroa_idx$i$i = ((($32)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i$i>>2] = 104;
      $34 = $32;
      HEAP32[$0>>2] = 1;
      $$sroa_idx$i = ((($0)) + 4|0);
      HEAP32[$$sroa_idx$i>>2] = 2;
      $$sroa_idx19$i = ((($0)) + 8|0);
      HEAP32[$$sroa_idx19$i>>2] = $34;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $35 = HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2]|0;
    $cond$i$i = ($35|0)==(0);
    if (!($cond$i$i)) {
     $36 = ((($output$i)) + 8|0);
     $37 = HEAP8[$36>>0]|0;
     $switch$i$i = ($37&255)<(2);
     if (!($switch$i$i)) {
      $38 = ((($output$i)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($39)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($39)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = HEAP32[$43>>2]|0;
      __THREW__ = 0;
      invoke_vi($44|0,($41|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       $54 = ___cxa_find_matching_catch_2()|0;
       $55 = tempRet0;
       $56 = HEAP32[$40>>2]|0;
       $57 = HEAP32[$42>>2]|0;
       __ZN5alloc4heap8box_free17he7aff06e65e4596eE($56,$57);
       $58 = HEAP32[$38>>2]|0;
       __ZN5alloc4heap8box_free17h53b02e8f65dea423E($58);
       $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
       __ZN4core3ptr13drop_in_place17hdf5802326bb176deE($_6);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      $47 = HEAP32[$42>>2]|0;
      $48 = ((($47)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0);
      if (!($50)) {
       $51 = HEAP32[$40>>2]|0;
       $52 = ((($47)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       ___rust_dealloc($51,$49,$53);
      }
      $59 = HEAP32[$38>>2]|0;
      ___rust_dealloc($59,12,4);
     }
    }
   }
   $64 = HEAP32[$_6>>2]|0;
   $65 = ((($_6)) + 4|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)==(0);
   if (!($67)) {
    $77 = HEAP32[$_6>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    (_pthread_mutex_unlock(($78|0))|0);
    STACKTOP = sp;return;
   }
   $68 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
   $69 = ($68|0)==(0|0);
   if ($69) {
    __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
    // unreachable;
   }
   $70 = HEAP32[$68>>2]|0;
   $cond2$i$i$i$i$i$i$i$i$i6 = ($70|0)==(0);
   if ($cond2$i$i$i$i$i$i$i$i$i6) {
    $71 = $68;
    $72 = $71;
    HEAP8[$72>>0]=1&255;HEAP8[$72+1>>0]=(1>>8)&255;HEAP8[$72+2>>0]=(1>>16)&255;HEAP8[$72+3>>0]=1>>24;
    $73 = (($71) + 4)|0;
    $74 = $73;
    HEAP8[$74>>0]=0&255;HEAP8[$74+1>>0]=(0>>8)&255;HEAP8[$74+2>>0]=(0>>16)&255;HEAP8[$74+3>>0]=0>>24;
    $$pre6$i$i$i$i$i$i$i8 = ((($68)) + 4|0);
    HEAP8[$$pre6$i$i$i$i$i$i$i8>>0]=0&255;HEAP8[$$pre6$i$i$i$i$i$i$i8+1>>0]=(0>>8)&255;HEAP8[$$pre6$i$i$i$i$i$i$i8+2>>0]=(0>>16)&255;HEAP8[$$pre6$i$i$i$i$i$i$i8+3>>0]=0>>24;
    $77 = HEAP32[$_6>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    (_pthread_mutex_unlock(($78|0))|0);
    STACKTOP = sp;return;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i11 = ((($68)) + 4|0);
   $$pre$i$i$i$i$i$i$i13 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i11>>2]|0;
   $75 = ($$pre$i$i$i$i$i$i$i13|0)==(0);
   if ($75) {
    $77 = HEAP32[$_6>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    (_pthread_mutex_unlock(($78|0))|0);
    STACKTOP = sp;return;
   }
   $76 = ((($64)) + 28|0);
   HEAP8[$76>>0] = 1;
   $77 = HEAP32[$_6>>2]|0;
   $78 = HEAP32[$77>>2]|0;
   (_pthread_mutex_unlock(($78|0))|0);
   STACKTOP = sp;return;
  }
 } while(0);
 $60 = ___cxa_find_matching_catch_2()|0;
 $61 = tempRet0;
 __THREW__ = 0;
 invoke_vi(50,($output$i|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if (!($63)) {
  $eh$lpad$body$index3Z2D = $61;$eh$lpad$body$indexZ2D = $60;
  __ZN4core3ptr13drop_in_place17hdf5802326bb176deE($_6);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $79 = ___cxa_find_matching_catch_2()|0;
 $80 = tempRet0;
 $eh$lpad$body$index3Z2D = $80;$eh$lpad$body$indexZ2D = $79;
 __ZN4core3ptr13drop_in_place17hdf5802326bb176deE($_6);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hbc83d48ade734206E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(0);
 if ($cond$i) {
  return;
 }
 $3 = ((($0)) + 8|0);
 __ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E($3);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hb5283a538a93dc48E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$sink47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $cond = 0, $cond$i33 = 0, $e$sroa$0$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h268dc3cc6ff5f450E($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $cond = ($4|0)==(0);
 if ($cond) {
  $$sink47 = 0;
  STACKTOP = sp;return ($$sink47|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i33 = ($12|0)==(0);
 $$pre = ((($0)) + 8|0);
 if (!($cond$i33)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   HEAP32[$11>>2] = 1;
   $17 = $$pre;
   $18 = $17;
   HEAP32[$18>>2] = $7;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = $10;
   ___resumeException($15|0);
   // unreachable;
  }
 }
 HEAP32[$11>>2] = 1;
 $21 = $$pre;
 $22 = $21;
 HEAP32[$22>>2] = $7;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $10;
 $$sink47 = 1;
 STACKTOP = sp;return ($$sink47|0);
}
function __ZN4core3fmt5Write10write_char17h640c5e6ff95c325fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $$sink47$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_12 = 0, $_5$i = 0, $cond$i = 0, $cond$i33$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5$i = sp;
 $_12 = sp + 12|0;
 HEAP32[$_12>>2] = 0;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = $1&255;
  HEAP8[$_12>>0] = $3;
  $len$2$i = 1;
 } else {
  $4 = ($1>>>0)<(2048);
  do {
   if ($4) {
    $5 = $1 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    $$sink$i = $8;$$sink$sink$i = 1;$$sink15$i = $_12;$len$1$i = 2;
   } else {
    $9 = ($1>>>0)<(65536);
    if ($9) {
     $10 = $1 >>> 12;
     $11 = $10 & 15;
     $12 = $11&255;
     $13 = $12 | -32;
     HEAP8[$_12>>0] = $13;
     $14 = $1 >>> 6;
     $15 = $14 & 63;
     $16 = $15&255;
     $17 = ((($_12)) + 1|0);
     $18 = $16 | -128;
     $$sink$i = $18;$$sink$sink$i = 2;$$sink15$i = $17;$len$1$i = 3;
     break;
    } else {
     $19 = $1 >>> 18;
     $20 = $19 & 7;
     $21 = $20&255;
     $22 = $21 | -16;
     HEAP8[$_12>>0] = $22;
     $23 = $1 >>> 12;
     $24 = $23 & 63;
     $25 = $24&255;
     $26 = ((($_12)) + 1|0);
     $27 = $25 | -128;
     HEAP8[$26>>0] = $27;
     $28 = $1 >>> 6;
     $29 = $28 & 63;
     $30 = $29&255;
     $31 = ((($_12)) + 2|0);
     $32 = $30 | -128;
     $$sink$i = $32;$$sink$sink$i = 3;$$sink15$i = $31;$len$1$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i>>0] = $$sink$i;
  $33 = $1 & 63;
  $34 = $33&255;
  $35 = (($_12) + ($$sink$sink$i)|0);
  $36 = $34 | -128;
  HEAP8[$35>>0] = $36;
  $len$2$i = $len$1$i;
 }
 $37 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h268dc3cc6ff5f450E($_5$i,$37,$_12,$len$2$i);
 $38 = HEAP32[$_5$i>>2]|0;
 $cond$i = ($38|0)==(0);
 if ($cond$i) {
  $$sink47$i = 0;
  STACKTOP = sp;return ($$sink47$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_5$i)) + 4|0);
 $39 = $e$sroa$0$0$$sroa_idx$i;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $cond$i33$i = ($46|0)==(0);
 $$pre$i = ((($0)) + 8|0);
 if (!($cond$i33$i)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre$i|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   HEAP32[$45>>2] = 1;
   $51 = $$pre$i;
   $52 = $51;
   HEAP32[$52>>2] = $41;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = $44;
   ___resumeException($49|0);
   // unreachable;
  }
 }
 HEAP32[$45>>2] = 1;
 $55 = $$pre$i;
 $56 = $55;
 HEAP32[$56>>2] = $41;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $44;
 $$sink47$i = 1;
 STACKTOP = sp;return ($$sink47$i|0);
}
function __ZN4core3fmt5Write9write_fmt17h98713a2091a1b095E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8,328,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr13drop_in_place17hfc3d6bfd16c2a175E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he023176ec91aa549E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i = 0, $$sink47$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$i = 0, $cond$i = 0, $cond$i33$i = 0, $e$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5$i = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 __ZN3std2io5Write9write_all17h268dc3cc6ff5f450E($_5$i,$4,$1,$2);
 $5 = HEAP32[$_5$i>>2]|0;
 $cond$i = ($5|0)==(0);
 if ($cond$i) {
  $$sink47$i = 0;
  STACKTOP = sp;return ($$sink47$i|0);
 }
 $e$sroa$0$0$$sroa_idx$i = ((($_5$i)) + 4|0);
 $6 = $e$sroa$0$0$$sroa_idx$i;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $cond$i33$i = ($13|0)==(0);
 $$pre$i = ((($3)) + 8|0);
 if (!($cond$i33$i)) {
  __THREW__ = 0;
  invoke_vi(123,($$pre$i|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   HEAP32[$12>>2] = 1;
   $18 = $$pre$i;
   $19 = $18;
   HEAP32[$19>>2] = $8;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = $11;
   ___resumeException($16|0);
   // unreachable;
  }
 }
 HEAP32[$12>>2] = 1;
 $22 = $$pre$i;
 $23 = $22;
 HEAP32[$23>>2] = $8;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $11;
 $$sink47$i = 1;
 STACKTOP = sp;return ($$sink47$i|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9a7e795ea8af7aa8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt5Write10write_char17h640c5e6ff95c325fE($2,$1)|0);
 return ($3|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h46db9fd6b5c4178dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,328,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std2io5stdio6_print17hae3bb5eaa91b1bf2E($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $_12$sroa$4$0$$sroa_idx$i$i$i$i = 0, $_14$i = 0, $_16$i = 0, $_16$i$i$i$i = 0, $_18$i$i$i = 0, $_18$i$i$i$i = 0, $_20$i$i$i$i = 0, $_22$0$in38$i$i$i = 0, $_25$i = 0, $_32$i = 0, $_5$i$i$i$i = 0, $_6$i$i$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_8$sroa$4$0$$sroa_idx4$i$i$i$i$i = 0, $args$i = 0, $borrowed$i$i$i$i = 0, $cond$i = 0, $cond2$i$i$i = 0;
 var $cond3$i = 0, $e$i = 0, $label$i = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$0$0$i$i$i$i = 0, $personalityslot$sroa$6$0$i = 0, $personalityslot$sroa$8$0$i$i$i$i = 0, $phitmp$i$i$i = 0, $result$i = 0, $t1$i$i$i$i$i$sroa$5$0$$sroa_idx$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $_6$i$i$i$i$i = sp + 216|0;
 $_20$i$i$i$i = sp + 192|0;
 $_18$i$i$i$i = sp + 184|0;
 $_16$i$i$i$i = sp + 160|0;
 $borrowed$i$i$i$i = sp + 152|0;
 $_5$i$i$i$i = sp + 144|0;
 $_18$i$i$i = sp + 128|0;
 $_32$i = sp + 112|0;
 $_25$i = sp + 88|0;
 $e$i = sp + 80|0;
 $_16$i = sp + 56|0;
 $_14$i = sp + 48|0;
 $result$i = sp + 32|0;
 $label$i = sp + 24|0;
 $args$i = sp;
 ;HEAP32[$args$i>>2]=HEAP32[$0>>2]|0;HEAP32[$args$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$args$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$args$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$args$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$args$i+20>>2]=HEAP32[$0+20>>2]|0;
 HEAP32[$label$i>>2] = 6918;
 $1 = ((($label$i)) + 4|0);
 HEAP32[$1>>2] = 6;
 $2 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h9572bbcf010a0942E(3108)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$2>>2]|0;
  $cond$i = ($4|0)==(1);
  if ($cond$i) {
   $8 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h9572bbcf010a0942E(3108)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
    // unreachable;
   }
   $10 = HEAP32[$8>>2]|0;
   $cond2$i$i$i = ($10|0)==(0);
   do {
    if ($cond2$i$i$i) {
     $t1$i$i$i$i$i$sroa$5$0$$sroa_idx$i$i$i = ((($8)) + 8|0);
     HEAP8[$8>>0]=1&255;HEAP8[$8+1>>0]=(1>>8)&255;HEAP8[$8+2>>0]=(1>>16)&255;HEAP8[$8+3>>0]=1>>24;
     $_12$sroa$4$0$$sroa_idx$i$i$i$i = ((($8)) + 4|0);
     HEAP8[$_12$sroa$4$0$$sroa_idx$i$i$i$i>>0]=0&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i$i$i$i+1>>0]=(0>>8)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i$i$i$i+2>>0]=(0>>16)&255;HEAP8[$_12$sroa$4$0$$sroa_idx$i$i$i$i+3>>0]=0>>24;
     $11 = $t1$i$i$i$i$i$sroa$5$0$$sroa_idx$i$i$i;
     $12 = $11;
     HEAP8[$12>>0]=0&255;HEAP8[$12+1>>0]=(0>>8)&255;HEAP8[$12+2>>0]=(0>>16)&255;HEAP8[$12+3>>0]=0>>24;
     $13 = (($11) + 4)|0;
     $14 = $13;
     HEAP8[$14>>0]=0&255;HEAP8[$14+1>>0]=(0>>8)&255;HEAP8[$14+2>>0]=(0>>16)&255;HEAP8[$14+3>>0]=0>>24;
     $$pre$phi$i$iZ2D = $t1$i$i$i$i$i$sroa$5$0$$sroa_idx$i$i$i;$78 = $_5$i$i$i$i;$_22$0$in38$i$i$i = $_12$sroa$4$0$$sroa_idx$i$i$i$i;
     label = 11;
    } else {
     $15 = ((($8)) + 4|0);
     $$pre$i$i$i = HEAP32[$15>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0);
     if ($phitmp$i$i$i) {
      $$pre$i$i = ((($8)) + 8|0);
      $$pre$phi$i$iZ2D = $$pre$i$i;$78 = $_5$i$i$i$i;$_22$0$in38$i$i$i = $15;
      label = 11;
      break;
     } else {
      HEAP32[$_5$i$i$i$i>>2] = 0;
      $79 = $_5$i$i$i$i;
      label = 20;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     HEAP8[$_22$0$in38$i$i$i>>0]=-1&255;HEAP8[$_22$0$in38$i$i$i+1>>0]=(-1>>8)&255;HEAP8[$_22$0$in38$i$i$i+2>>0]=(-1>>16)&255;HEAP8[$_22$0$in38$i$i$i+3>>0]=-1>>24;
     $16 = $_22$0$in38$i$i$i;
     $_8$sroa$4$0$$sroa_idx4$i$i$i$i$i = ((($_5$i$i$i$i)) + 4|0);
     HEAP32[$_8$sroa$4$0$$sroa_idx4$i$i$i$i$i>>2] = $16;
     HEAP32[$_5$i$i$i$i>>2] = $$pre$phi$i$iZ2D;
     $17 = $_5$i$i$i$i;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($17) + 4)|0;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     $23 = $borrowed$i$i$i$i;
     $24 = $23;
     HEAP32[$24>>2] = $19;
     $25 = (($23) + 4)|0;
     $26 = $25;
     HEAP32[$26>>2] = $22;
     $27 = $19;
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     $30 = $22;
     if ($29) {
      HEAP8[$30>>0]=0&255;HEAP8[$30+1>>0]=(0>>8)&255;HEAP8[$30+2>>0]=(0>>16)&255;HEAP8[$30+3>>0]=0>>24;
      $79 = $78;
      label = 20;
      break;
     }
     ;HEAP32[$_16$i$i$i$i>>2]=HEAP32[$args$i>>2]|0;HEAP32[$_16$i$i$i$i+4>>2]=HEAP32[$args$i+4>>2]|0;HEAP32[$_16$i$i$i$i+8>>2]=HEAP32[$args$i+8>>2]|0;HEAP32[$_16$i$i$i$i+12>>2]=HEAP32[$args$i+12>>2]|0;HEAP32[$_16$i$i$i$i+16>>2]=HEAP32[$args$i+16>>2]|0;HEAP32[$_16$i$i$i$i+20>>2]=HEAP32[$args$i+20>>2]|0;
     $34 = $19;
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($27)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     ;HEAP32[$_6$i$i$i$i$i>>2]=HEAP32[$_16$i$i$i$i>>2]|0;HEAP32[$_6$i$i$i$i$i+4>>2]=HEAP32[$_16$i$i$i$i+4>>2]|0;HEAP32[$_6$i$i$i$i$i+8>>2]=HEAP32[$_16$i$i$i$i+8>>2]|0;HEAP32[$_6$i$i$i$i$i+12>>2]=HEAP32[$_16$i$i$i$i+12>>2]|0;HEAP32[$_6$i$i$i$i$i+16>>2]=HEAP32[$_16$i$i$i$i+16>>2]|0;HEAP32[$_6$i$i$i$i$i+20>>2]=HEAP32[$_16$i$i$i$i+20>>2]|0;
     $38 = ((($37)) + 24|0);
     $39 = HEAP32[$38>>2]|0;
     __THREW__ = 0;
     invoke_viii($39|0,($_18$i$i$i|0),($35|0),($_6$i$i$i$i$i|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      HEAP8[$30>>0]=0&255;HEAP8[$30+1>>0]=(0>>8)&255;HEAP8[$30+2>>0]=(0>>16)&255;HEAP8[$30+3>>0]=0>>24;
      break;
     }
     $31 = ___cxa_find_matching_catch_2()|0;
     $32 = tempRet0;
     __ZN4core3ptr13drop_in_place17h54ca33c8fd907905E($borrowed$i$i$i$i);
     $33 = ($19|0)==(0);
     if (!($33)) {
      $personalityslot$sroa$0$0$i$i$i$i = $31;$personalityslot$sroa$8$0$i$i$i$i = $32;
      ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
      // unreachable;
     }
     __ZN4core3ptr13drop_in_place17h60fed642ac06e2c2E($_5$i$i$i$i);
     $personalityslot$sroa$0$0$i$i$i$i = $31;$personalityslot$sroa$8$0$i$i$i$i = $32;
     ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 20) {
    $42 = (__ZN3std2io5stdio6stdout17h7ea6f240a87579f0E()|0);
    HEAP32[$_18$i$i$i$i>>2] = $42;
    ;HEAP32[$_20$i$i$i$i>>2]=HEAP32[$args$i>>2]|0;HEAP32[$_20$i$i$i$i+4>>2]=HEAP32[$args$i+4>>2]|0;HEAP32[$_20$i$i$i$i+8>>2]=HEAP32[$args$i+8>>2]|0;HEAP32[$_20$i$i$i$i+12>>2]=HEAP32[$args$i+12>>2]|0;HEAP32[$_20$i$i$i$i+16>>2]=HEAP32[$args$i+16>>2]|0;HEAP32[$_20$i$i$i$i+20>>2]=HEAP32[$args$i+20>>2]|0;
    __THREW__ = 0;
    invoke_viii(141,($_18$i$i$i|0),($_18$i$i$i$i|0),($_20$i$i$i$i|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     __ZN4core3ptr13drop_in_place17hb6797f8e7c71c834E($_18$i$i$i$i);
     $personalityslot$sroa$0$0$i$i$i$i = $48;$personalityslot$sroa$8$0$i$i$i$i = $49;
     ___resumeException($personalityslot$sroa$0$0$i$i$i$i|0);
     // unreachable;
    }
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;HEAP32[$43>>2] = (($44-1)|0);
    $45 = ($44|0)==(1);
    if ($45) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E($_18$i$i$i$i);
    }
   }
   ;HEAP32[$result$i>>2]=HEAP32[$_18$i$i$i>>2]|0;HEAP32[$result$i+4>>2]=HEAP32[$_18$i$i$i+4>>2]|0;HEAP32[$result$i+8>>2]=HEAP32[$_18$i$i$i+8>>2]|0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $5 = (__ZN3std2io5stdio6stdout17h7ea6f240a87579f0E()|0);
  HEAP32[$_14$i>>2] = $5;
  ;HEAP32[$_16$i>>2]=HEAP32[$args$i>>2]|0;HEAP32[$_16$i+4>>2]=HEAP32[$args$i+4>>2]|0;HEAP32[$_16$i+8>>2]=HEAP32[$args$i+8>>2]|0;HEAP32[$_16$i+12>>2]=HEAP32[$args$i+12>>2]|0;HEAP32[$_16$i+16>>2]=HEAP32[$args$i+16>>2]|0;HEAP32[$_16$i+20>>2]=HEAP32[$args$i+20>>2]|0;
  __THREW__ = 0;
  invoke_viii(141,($result$i|0),($_14$i|0),($_16$i|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $76 = ___cxa_find_matching_catch_2()|0;
   $77 = tempRet0;
   __ZN4core3ptr13drop_in_place17hb6797f8e7c71c834E($_14$i);
   $personalityslot$sroa$0$0$i = $76;$personalityslot$sroa$6$0$i = $77;
   ___resumeException($personalityslot$sroa$0$0$i|0);
   // unreachable;
  }
  $51 = $5;
  $52 = HEAP32[$51>>2]|0;HEAP32[$51>>2] = (($52-1)|0);
  $53 = ($52|0)==(1);
  if ($53) {
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E($_14$i);
  }
 }
 $50 = HEAP32[$result$i>>2]|0;
 $cond3$i = ($50|0)==(1);
 if (!($cond3$i)) {
  STACKTOP = sp;return;
 }
 $54 = ((($result$i)) + 4|0);
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $e$i;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = $label$i;
 $66 = $e$i;
 HEAP32[$_32$i>>2] = $65;
 $67 = ((($_32$i)) + 4|0);
 HEAP32[$67>>2] = (93);
 $68 = ((($_32$i)) + 8|0);
 HEAP32[$68>>2] = $66;
 $69 = ((($_32$i)) + 12|0);
 HEAP32[$69>>2] = (117);
 HEAP32[$_25$i>>2] = 3116;
 $70 = ((($_25$i)) + 4|0);
 HEAP32[$70>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i$i = ((($_25$i)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
 $71 = ((($_25$i)) + 16|0);
 HEAP32[$71>>2] = $_32$i;
 $72 = ((($_25$i)) + 20|0);
 HEAP32[$72>>2] = 2;
 __THREW__ = 0;
 invoke_vii(118,($_25$i|0),(3132|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = ___cxa_find_matching_catch_2()|0;
 $75 = tempRet0;
 __ZN4core3ptr13drop_in_place17h4b4a2214e68b54beE($e$i);
 $personalityslot$sroa$0$0$i = $74;$personalityslot$sroa$6$0$i = $75;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17h60fed642ac06e2c2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP8[$4>>0]=0&255;HEAP8[$4+1>>0]=(0>>8)&255;HEAP8[$4+2>>0]=(0>>16)&255;HEAP8[$4+3>>0]=0>>24;
 return;
}
function __ZN4core3ptr13drop_in_place17hb6797f8e7c71c834E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_5$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_5$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 $1 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i>>2] = (($1-1)|0);
 $2 = ($1|0)==(1);
 if (!($2)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E($0);
 return;
}
function __ZN3std4sync4once4Once10call_inner17hcc3be45d61199d14E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_41$sroa$0$0$$sroa_idx = 0, $complete = 0, $node = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $self$i$i = 0, $state$0 = 0, $state$1 = 0, $success = 0, $success1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$i$i = sp + 24|0;
 $node = sp + 8|0;
 $complete = sp;
 $4 = HEAP32[$0>>2]|0;
 $_41$sroa$0$0$$sroa_idx = ((($node)) + 8|0);
 $5 = ((($node)) + 4|0);
 $6 = $node;
 $7 = $6 | 2;
 $state$0 = $4;
 L1: while(1) {
  switch ($state$0|0) {
  case 3:  {
   label = 7;
   break L1;
   break;
  }
  case 1:  {
   if (!($1)) {
    label = 3;
    break L1;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $9 = $state$0 & 3;
   $10 = ($9|0)==(2);
   if (!($10)) {
    label = 11;
    break L1;
   }
   $17 = (__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h8e5681632d507562E()|0);
   $18 = $17;
   HEAP32[$self$i$i>>2] = $18;
   $19 = ($17|0)==(0);
   if ($19) {
    label = 13;
    break L1;
   }
   HEAP32[$node>>2] = $17;
   HEAP8[$_41$sroa$0$0$$sroa_idx>>0] = 0;
   HEAP32[$5>>2] = 0;
   $state$1 = $state$0;
   while(1) {
    $23 = $state$1 & 3;
    $24 = ($23|0)==(2);
    if (!($24)) {
     label = 16;
     break;
    }
    $29 = $state$1 & -4;
    $30 = $29;
    HEAP32[$5>>2] = $30;
    $31 = HEAP32[$0>>2]|0;if (($31|0) == ($state$1|0)) HEAP32[$0>>2] = $7;
    $success1 = ($31|0)==($state$1|0);
    if ($success1) {
     break;
    } else {
     $state$1 = $31;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $25 = HEAP32[$node>>2]|0;
    $26 = ($25|0)==(0|0);
    if (!($26)) {
     $27 = HEAP32[$25>>2]|0;HEAP32[$25>>2] = (($27-1)|0);
     $28 = ($27|0)==(1);
     if ($28) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($node);
     }
    }
    $state$0 = $state$1;
    continue L1;
   }
   while(1) {
    $32 = HEAP8[$_41$sroa$0$0$$sroa_idx>>0]|0;
    $33 = ($32<<24>>24)==(0);
    if (!($33)) {
     break;
    }
    __THREW__ = 0;
    invoke_v(142);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 27;
     break L1;
    }
   }
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$node>>2]|0;
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    $39 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($39-1)|0);
    $40 = ($39|0)==(1);
    if ($40) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($node);
    }
   }
   $state$0 = $36;
   continue L1;
  }
  }
  $8 = HEAP32[$0>>2]|0;if (($8|0) == ($state$0|0)) HEAP32[$0>>2] = 2;
  $success = ($8|0)==($state$0|0);
  if ($success) {
   label = 8;
   break;
  } else {
   $state$0 = $8;
  }
 }
 if ((label|0) == 3) {
  __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(6975,42,3148);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  HEAP8[$complete>>0] = 1;
  $11 = ((($complete)) + 4|0);
  HEAP32[$11>>2] = $0;
  $12 = ($state$0|0)==(1);
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  invoke_vii($14|0,($2|0),($12|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   __ZN4core3ptr13drop_in_place17h75c0ef31ba592525E($complete);
   $personalityslot$sroa$0$0 = $43;$personalityslot$sroa$8$0 = $44;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   HEAP8[$complete>>0] = 0;
   __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h9ea75344f7ff5c9dE($complete);
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 11) {
  __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(7017,47,3164);
  // unreachable;
 }
 else if ((label|0) == 13) {
  __THREW__ = 0;
  invoke_vii(132,(4501|0),94);
  $20 = __THREW__; __THREW__ = 0;
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __ZN4core3ptr13drop_in_place17h3960634c37b68044E($self$i$i);
  ___resumeException($21|0);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  __ZN4core3ptr13drop_in_place17hc393e5c83eaa20d4E($node);
  $personalityslot$sroa$0$0 = $41;$personalityslot$sroa$8$0 = $42;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h9ea75344f7ff5c9dE($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_23 = 0, $_30 = 0, $_5$sroa$0$0$copyload2$i$i$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0;
 var $left_val = 0, $queue1$019 = 0, $right_val = 0, $self$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $self$i = sp + 48|0;
 $thread = sp + 40|0;
 $_30 = sp + 24|0;
 $_23 = sp;
 $right_val = sp + 60|0;
 $left_val = sp + 56|0;
 $_12 = sp + 52|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $$sink = $2 ? 3 : 1;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = $$sink;
 $6 = $5 & 3;
 HEAP32[$_12>>2] = $6;
 HEAP32[$left_val>>2] = $_12;
 HEAP32[$right_val>>2] = 3180;
 $7 = ($6|0)==(2);
 if (!($7)) {
  $8 = $left_val;
  $9 = $right_val;
  HEAP32[$_30>>2] = $8;
  $10 = ((($_30)) + 4|0);
  HEAP32[$10>>2] = (42);
  $11 = ((($_30)) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = ((($_30)) + 12|0);
  HEAP32[$12>>2] = (42);
  HEAP32[$_23>>2] = 2352;
  $13 = ((($_23)) + 4|0);
  HEAP32[$13>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_23)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $14 = ((($_23)) + 16|0);
  HEAP32[$14>>2] = $_30;
  $15 = ((($_23)) + 20|0);
  HEAP32[$15>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($_23,3184);
  // unreachable;
 }
 $16 = $5 & -4;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $16;
 $queue1$019 = $18;
 while(1) {
  $19 = ((($queue1$019)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAPU8[$queue1$019>>0]|(HEAPU8[$queue1$019+1>>0]<<8)|(HEAPU8[$queue1$019+2>>0]<<16)|(HEAPU8[$queue1$019+3>>0]<<24);
  HEAP8[$queue1$019>>0]=0&255;HEAP8[$queue1$019+1>>0]=(0>>8)&255;HEAP8[$queue1$019+2>>0]=(0>>16)&255;HEAP8[$queue1$019+3>>0]=0>>24;
  $22 = $21;
  HEAP32[$self$i>>2] = $22;
  $23 = ($21|0)==(0);
  if ($23) {
   label = 7;
   break;
  }
  HEAP32[$thread>>2] = $21;
  $27 = ((($queue1$019)) + 8|0);
  HEAP8[$27>>0] = 1;
  __THREW__ = 0;
  invoke_vi(143,($thread|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   label = 12;
   break;
  }
  $_5$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$thread>>2]|0;
  $30 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($30-1)|0);
  $31 = ($30|0)==(1);
  if ($31) {
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($thread);
  }
  $32 = ($20|0)==(0|0);
  if ($32) {
   label = 5;
   break;
  } else {
   $queue1$019 = $20;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_vi(91,(2280|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  __ZN4core3ptr13drop_in_place17h3960634c37b68044E($self$i);
  ___resumeException($25|0);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  __ZN4core3ptr13drop_in_place17hd10a86be7f072410E($thread);
  ___resumeException($33|0);
  // unreachable;
 }
}
function __ZN4core3ptr13drop_in_place17hc393e5c83eaa20d4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($3-1)|0);
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($0);
 return;
}
function __ZN4core3ptr13drop_in_place17h75c0ef31ba592525E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN65__LT_std__sync__once__Finish_u20_as_u20_core__ops__drop__Drop_GT_4drop17h9ea75344f7ff5c9dE($0);
 return;
}
function __ZN4core3ptr13drop_in_place17haa9de1c104a1a350E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc814d1b8089bb507E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$112$i$i$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i = 0;
 var $_39$sroa$4$0$$sroa_idx39$i$i = 0, $_39$sroa$5$0$$sroa_idx41$i$i = 0, $_39$sroa$6$0$$sroa_idx43$i$i = 0, $_40$sroa$0$0$copyload$i$i = 0, $_40$sroa$4$0$$sroa_idx69$i$i = 0, $_40$sroa$4$0$copyload$i$i = 0, $_40$sroa$5$0$$sroa_idx71$i$i = 0, $_40$sroa$5$0$copyload$i$i = 0, $cond$i = 0, $iter$sroa$0$0$i$i = 0, $iter$sroa$0$0$ph$i$i = 0, $iter1$i$i = 0, $magicptr$i$i = 0, $tmp$sroa$0$0$copyload$i$i$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = 0, $tmp$sroa$5$0$copyload$i1$i85$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $iter1$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 HEAP8[$2>>0] = 0;
 $cond$i = ($3<<24>>24)==(0);
 if ($cond$i) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(2280);
  // unreachable;
 }
 (_pthread_mutex_lock(((12840)|0))|0);
 $4 = HEAP32[3217]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i = HEAP32[$4>>2]|0;
  $6 = ((($4)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i) + (($7*12)|0)|0);
  $9 = ($7|0)==(0);
  if (!($9)) {
   $_10$112$i$i$i$i$i$i$i$i = $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i;
   while(1) {
    $10 = ((($_10$112$i$i$i$i$i$i$i$i)) + 12|0);
    $11 = ((($_10$112$i$i$i$i$i$i$i$i)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i = HEAP32[$_10$112$i$i$i$i$i$i$i$i>>2]|0;
     ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i,$12,1);
    }
    $14 = ($10|0)==($8|0);
    if ($14) {
     break;
    } else {
     $_10$112$i$i$i$i$i$i$i$i = $10;
    }
   }
  }
  $15 = ((($4)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = ($16*12)|0;
   $_3$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i = HEAP32[$4>>2]|0;
   ___rust_dealloc($_3$sroa$0$0$copyload2$i6$i$i$i$i$i$i$i$i$i,$18,4);
  }
  $19 = HEAP32[3217]|0;
  ___rust_dealloc($19,12,4);
 }
 HEAP32[3217] = 0;
 (_pthread_mutex_unlock(((12840)|0))|0);
 $_39$sroa$4$0$$sroa_idx39$i$i = ((($iter1$i$i)) + 4|0);
 $_39$sroa$5$0$$sroa_idx41$i$i = ((($iter1$i$i)) + 8|0);
 $_39$sroa$6$0$$sroa_idx43$i$i = ((($iter1$i$i)) + 12|0);
 $iter$sroa$0$0$ph$i$i = 0;
 L17: while(1) {
  $iter$sroa$0$0$i$i = $iter$sroa$0$0$ph$i$i;
  L19: while(1) {
   $20 = ($iter$sroa$0$0$i$i>>>0)<(10);
   if (!($20)) {
    label = 24;
    break L17;
   }
   $$arith = (($iter$sroa$0$0$i$i) + 1)|0;
   $$overflow = ($iter$sroa$0$0$i$i>>>0)>(4294967294);
   if ($$overflow) {
    label = 24;
    break L17;
   }
   (_pthread_mutex_lock(((12872)|0))|0);
   $21 = HEAP32[3225]|0;
   $22 = ($iter$sroa$0$0$i$i|0)==(9);
   $$$i$i = $22 ? (1) : 0;
   HEAP32[3225] = $$$i$i;
   (_pthread_mutex_unlock(((12872)|0))|0);
   $magicptr$i$i = $21;
   switch ($magicptr$i$i|0) {
   case 1:  {
    label = 16;
    break L17;
    break;
   }
   case 0:  {
    $iter$sroa$0$0$i$i = $$arith;
    break;
   }
   default: {
    break L19;
   }
   }
  }
  $_40$sroa$0$0$copyload$i$i = HEAP32[$21>>2]|0;
  $_40$sroa$4$0$$sroa_idx69$i$i = ((($21)) + 4|0);
  $_40$sroa$4$0$copyload$i$i = HEAP32[$_40$sroa$4$0$$sroa_idx69$i$i>>2]|0;
  $_40$sroa$5$0$$sroa_idx71$i$i = ((($21)) + 8|0);
  $_40$sroa$5$0$copyload$i$i = HEAP32[$_40$sroa$5$0$$sroa_idx71$i$i>>2]|0;
  $23 = (($_40$sroa$0$0$copyload$i$i) + ($_40$sroa$5$0$copyload$i$i<<3)|0);
  HEAP32[$iter1$i$i>>2] = $_40$sroa$0$0$copyload$i$i;
  HEAP32[$_39$sroa$4$0$$sroa_idx39$i$i>>2] = $_40$sroa$4$0$copyload$i$i;
  HEAP32[$_39$sroa$5$0$$sroa_idx41$i$i>>2] = $_40$sroa$0$0$copyload$i$i;
  HEAP32[$_39$sroa$6$0$$sroa_idx43$i$i>>2] = $23;
  $24 = $_40$sroa$0$0$copyload$i$i;
  while(1) {
   $25 = ($24|0)==($23|0);
   if ($25) {
    break;
   }
   $30 = ((($24)) + 8|0);
   $tmp$sroa$0$0$copyload$i$i$i$i = HEAP32[$24>>2]|0;
   $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = ((($24)) + 4|0);
   $tmp$sroa$5$0$copyload$i1$i85$i$i = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i$i$i>>2]|0;
   $31 = ((($tmp$sroa$5$0$copyload$i1$i85$i$i)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vi($32|0,($tmp$sroa$0$0$copyload$i$i$i$i|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    label = 22;
    break L17;
   } else {
    $24 = $30;
   }
  }
  HEAP32[$_39$sroa$5$0$$sroa_idx41$i$i>>2] = $23;
  $26 = ($_40$sroa$4$0$copyload$i$i|0)==(0);
  if (!($26)) {
   $27 = $_40$sroa$4$0$copyload$i$i << 3;
   ___rust_dealloc($_40$sroa$0$0$copyload$i$i,$27,4);
  }
  ___rust_dealloc($21,12,4);
  $iter$sroa$0$0$ph$i$i = $$arith;
 }
 if ((label|0) == 16) {
  __ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E(7097,37,3200);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  HEAP32[$_39$sroa$5$0$$sroa_idx41$i$i>>2] = $30;
  __ZN4core3ptr13drop_in_place17hed15faa9bca35ba2E($iter1$i$i);
  __ZN5alloc4heap8box_free17hfbd913bb5aa0f455E($21);
  ___resumeException($28|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function __ZN4core3ops8function6FnOnce9call_once17h9dce3249ba81abf1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc814d1b8089bb507E($arg0,$1);
 STACKTOP = sp;return;
}
function __ZN4core3ptr13drop_in_place17hed15faa9bca35ba2E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23$sroa$0$0$copyload4344$i = 0, $tmp$sroa$0$0$copyload$i$i$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = 0, $tmp$sroa$5$0$copyload$i1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 L1: do {
  if (!($5)) {
   $14 = $2;
   while(1) {
    $13 = ((($14)) + 8|0);
    HEAP32[$1>>2] = $13;
    $tmp$sroa$0$0$copyload$i$i$i$i = HEAP32[$14>>2]|0;
    $tmp$sroa$5$0$$sroa_idx2$i$i$i$i = ((($14)) + 4|0);
    $tmp$sroa$5$0$copyload$i1$i$i$i = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i$i$i>>2]|0;
    $15 = $tmp$sroa$5$0$copyload$i1$i$i$i;
    $16 = HEAP32[$15>>2]|0;
    __THREW__ = 0;
    invoke_vi($16|0,($tmp$sroa$0$0$copyload$i$i$i$i|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = $tmp$sroa$5$0$copyload$i1$i$i$i;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $23 = ((($19)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     ___rust_dealloc($tmp$sroa$0$0$copyload$i$i$i$i,$21,$24);
    }
    $25 = HEAP32[$1>>2]|0;
    $26 = HEAP32[$3>>2]|0;
    $27 = ($25|0)==($26|0);
    if ($27) {
     break L1;
    } else {
     $14 = $25;
    }
   }
   $6 = ___cxa_find_matching_catch_2()|0;
   $7 = tempRet0;
   $8 = $tmp$sroa$5$0$copyload$i1$i$i$i;
   __ZN5alloc4heap8box_free17h8aa20a127f7cae9fE($tmp$sroa$0$0$copyload$i$i$i$i,$8);
   ___resumeException($6|0);
   // unreachable;
  }
 } while(0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = $10 << 3;
 $_23$sroa$0$0$copyload4344$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_23$sroa$0$0$copyload4344$i,$12,4);
 return;
}
function __ZN5alloc4heap8box_free17hfbd913bb5aa0f455E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___rust_dealloc($0,12,4);
 return;
}
function ___rdl_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0$0 = 0, $_21$sroa$4$0$$sroa_idx = 0, $_21$sroa$5$0$$sroa_idx = 0, $out$i$i$i = 0, $ptr$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i = sp;
 $3 = ($1>>>0)<(9);
 if ($3) {
  $4 = (_malloc($0)|0);
  $ptr$0$i$i = $4;
  label = 4;
 } else {
  HEAP32[$out$i$i$i>>2] = 0;
  $5 = (_posix_memalign($out$i$i$i,$1,$0)|0);
  $6 = ($5|0)==(0);
  $7 = HEAP32[$out$i$i$i>>2]|0;
  if ($6) {
   $ptr$0$i$i = $7;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $8 = ($ptr$0$i$i|0)==(0|0);
  if (!($8)) {
   $_0$0 = $ptr$0$i$i;
   STACKTOP = sp;return ($_0$0|0);
  }
 }
 HEAP32[$2>>2] = 0;
 $_21$sroa$4$0$$sroa_idx = ((($2)) + 4|0);
 HEAP32[$_21$sroa$4$0$$sroa_idx>>2] = $0;
 $_21$sroa$5$0$$sroa_idx = ((($2)) + 8|0);
 HEAP32[$_21$sroa$5$0$$sroa_idx>>2] = $1;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function ___rdl_oom($0) {
 $0 = $0|0;
 var $$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_4 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_4 = sp + 16|0;
 $_5 = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$2>>2]|0;
 $$val$i = HEAP32[$3>>2]|0;
 HEAP32[$_5>>2] = $1;
 $5 = ((($_5)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($_5)) + 8|0);
 HEAP32[$6>>2] = $$val$i;
 __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17hd72c4d7fee483941E($_4,$_5);
 // unreachable;
}
function ___rdl_dealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function ___rdl_usable_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $3;
 HEAP32[$2>>2] = $3;
 return;
}
function ___rdl_realloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_19$sroa$13$0$ph = 0, $_19$sroa$16$0$ph = 0, $_19$sroa$7$0$ph = 0, $_32$sroa$4$0$$sroa_idx = 0, $_32$sroa$5$0$$sroa_idx = 0, $or$cond$i$i = 0, $out$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i$i = sp;
 $6 = ($2|0)==($4|0);
 do {
  if ($6) {
   $7 = ($2>>>0)<(9);
   if ($7) {
    $8 = (_realloc($0,$3)|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     $_19$sroa$13$0$ph = $3;$_19$sroa$16$0$ph = $2;$_19$sroa$7$0$ph = 0;
     break;
    } else {
     $_0$0 = $8;
    }
    STACKTOP = sp;return ($_0$0|0);
   }
   HEAP32[$out$i$i$i$i>>2] = 0;
   $10 = (_posix_memalign($out$i$i$i$i,$2,$3)|0);
   $11 = ($10|0)!=(0);
   $12 = HEAP32[$out$i$i$i$i>>2]|0;
   $13 = ($12|0)==(0|0);
   $or$cond$i$i = $11 | $13;
   if ($or$cond$i$i) {
    $_19$sroa$13$0$ph = $3;$_19$sroa$16$0$ph = $2;$_19$sroa$7$0$ph = 0;
   } else {
    $14 = ($1>>>0)<=($3>>>0);
    $_0$0$sroa$speculated$i$i$i$i = $14 ? $1 : $3;
    _memcpy(($12|0),($0|0),($_0$0$sroa$speculated$i$i$i$i|0))|0;
    _free($0);
    $_0$0 = $12;
    STACKTOP = sp;return ($_0$0|0);
   }
  } else {
   $_19$sroa$13$0$ph = (7180);$_19$sroa$16$0$ph = 36;$_19$sroa$7$0$ph = 1;
  }
 } while(0);
 HEAP32[$5>>2] = $_19$sroa$7$0$ph;
 $_32$sroa$4$0$$sroa_idx = ((($5)) + 4|0);
 HEAP32[$_32$sroa$4$0$$sroa_idx>>2] = $_19$sroa$13$0$ph;
 $_32$sroa$5$0$$sroa_idx = ((($5)) + 8|0);
 HEAP32[$_32$sroa$5$0$$sroa_idx>>2] = $_19$sroa$16$0$ph;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function ___rdl_alloc_zeroed($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_21$sroa$4$0$$sroa_idx = 0, $_21$sroa$5$0$$sroa_idx = 0, $or$cond$i$i = 0, $out$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i$i = sp;
 $3 = ($1>>>0)<(9);
 if ($3) {
  $4 = (_calloc($0,1)|0);
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $_0$0 = $4;
   STACKTOP = sp;return ($_0$0|0);
  }
 } else {
  HEAP32[$out$i$i$i$i>>2] = 0;
  $6 = (_posix_memalign($out$i$i$i$i,$1,$0)|0);
  $7 = ($6|0)!=(0);
  $8 = HEAP32[$out$i$i$i$i>>2]|0;
  $9 = ($8|0)==(0|0);
  $or$cond$i$i = $7 | $9;
  if (!($or$cond$i$i)) {
   _memset(($8|0),0,($0|0))|0;
   $_0$0 = $8;
   STACKTOP = sp;return ($_0$0|0);
  }
 }
 HEAP32[$2>>2] = 0;
 $_21$sroa$4$0$$sroa_idx = ((($2)) + 4|0);
 HEAP32[$_21$sroa$4$0$$sroa_idx>>2] = $0;
 $_21$sroa$5$0$$sroa_idx = ((($2)) + 8|0);
 HEAP32[$_21$sroa$5$0$$sroa_idx>>2] = $1;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function ___rdl_alloc_excess($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_24$sroa$4$0$$sroa_idx = 0, $out$i$i$i$i = 0, $ptr$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i$i = sp;
 $4 = ($1>>>0)<(9);
 if ($4) {
  $5 = (_malloc($0)|0);
  $ptr$0$i$i$i = $5;
  label = 4;
 } else {
  HEAP32[$out$i$i$i$i>>2] = 0;
  $6 = (_posix_memalign($out$i$i$i$i,$1,$0)|0);
  $7 = ($6|0)==(0);
  $8 = HEAP32[$out$i$i$i$i>>2]|0;
  if ($7) {
   $ptr$0$i$i$i = $8;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $9 = ($ptr$0$i$i$i|0)==(0|0);
  if (!($9)) {
   HEAP32[$2>>2] = $0;
   $_0$0 = $ptr$0$i$i$i;
   STACKTOP = sp;return ($_0$0|0);
  }
 }
 HEAP32[$3>>2] = 0;
 $_24$sroa$4$0$$sroa_idx = ((($3)) + 4|0);
 $10 = $_24$sroa$4$0$$sroa_idx;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $_0$0 = 0;
 STACKTOP = sp;return ($_0$0|0);
}
function ___rdl_realloc_excess($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sink$i$i = 0, $$sink15$i$i = 0, $$sink17$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0;
 var $_0$0$sroa$speculated$i$i$i$i$i = 0, $_12$sroa$0$0$$sroa_idx23$i$i$i = 0, $_13$sroa$12$0$ph$i$i = 0, $_13$sroa$16$0$ph$i$i = 0, $_13$sroa$7$0$i$i = 0, $_13$sroa$7$0$in$i$i = 0, $_13$sroa$7$0$ph$i$i = 0, $_13$sroa$7$0$sink$i$i = 0, $_21 = 0, $cond = 0, $e = 0, $e$0$sroa_cast5$pre$phiZZZ2D = 0, $or$cond$i$i$i = 0, $out$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $out$i$i$i$i$i = sp + 28|0;
 $e = sp + 16|0;
 $_21 = sp;
 $7 = ($2|0)==($4|0);
 do {
  if ($7) {
   $8 = ($2>>>0)<(9);
   if ($8) {
    $9 = (_realloc($0,$3)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     $_13$sroa$12$0$ph$i$i = $3;$_13$sroa$16$0$ph$i$i = $2;$_13$sroa$7$0$ph$i$i = 0;
     label = 7;
     break;
    } else {
     $_13$sroa$7$0$in$i$i = $9;
    }
   } else {
    HEAP32[$out$i$i$i$i$i>>2] = 0;
    $11 = (_posix_memalign($out$i$i$i$i$i,$2,$3)|0);
    $12 = ($11|0)!=(0);
    $13 = HEAP32[$out$i$i$i$i$i>>2]|0;
    $14 = ($13|0)==(0|0);
    $or$cond$i$i$i = $12 | $14;
    if ($or$cond$i$i$i) {
     $_13$sroa$12$0$ph$i$i = $3;$_13$sroa$16$0$ph$i$i = $2;$_13$sroa$7$0$ph$i$i = 0;
     label = 7;
     break;
    }
    $15 = ($1>>>0)<=($3>>>0);
    $_0$0$sroa$speculated$i$i$i$i$i = $15 ? $1 : $3;
    _memcpy(($13|0),($0|0),($_0$0$sroa$speculated$i$i$i$i$i|0))|0;
    _free($0);
    $_13$sroa$7$0$in$i$i = $13;
   }
   $_13$sroa$7$0$i$i = $_13$sroa$7$0$in$i$i;
   $$sink$i$i = $3;$$sink15$i$i = 1;$$sink17$i$i = 0;$_13$sroa$7$0$sink$i$i = $_13$sroa$7$0$i$i;
  } else {
   $_13$sroa$12$0$ph$i$i = (7180);$_13$sroa$16$0$ph$i$i = 36;$_13$sroa$7$0$ph$i$i = (1);
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $_12$sroa$0$0$$sroa_idx23$i$i$i = ((($_21)) + 4|0);
  HEAP32[$_12$sroa$0$0$$sroa_idx23$i$i$i>>2] = $_13$sroa$7$0$ph$i$i;
  $$sink$i$i = $_13$sroa$16$0$ph$i$i;$$sink15$i$i = 2;$$sink17$i$i = 1;$_13$sroa$7$0$sink$i$i = $_13$sroa$12$0$ph$i$i;
 }
 $16 = (((($_21)) + 4|0) + ($$sink17$i$i<<2)|0);
 HEAP32[$16>>2] = $_13$sroa$7$0$sink$i$i;
 $17 = (((($_21)) + 4|0) + ($$sink15$i$i<<2)|0);
 HEAP32[$17>>2] = $$sink$i$i;
 HEAP32[$_21>>2] = $$sink17$i$i;
 $cond = ($$sink17$i$i|0)==(0);
 if ($cond) {
  $18 = ((($_21)) + 4|0);
  $19 = ((($_21)) + 8|0);
  $20 = HEAP32[$18>>2]|0;
  $21 = HEAP32[$19>>2]|0;
  HEAP32[$5>>2] = $21;
  $_0$0 = $20;$e$0$sroa_cast5$pre$phiZZZ2D = $e;
  STACKTOP = sp;return ($_0$0|0);
 } else {
  $22 = ((($_21)) + 4|0);
  ;HEAP32[$e>>2]=HEAP32[$22>>2]|0;HEAP32[$e+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$22+8>>2]|0;
  ;HEAP32[$6>>2]=HEAP32[$22>>2]|0;HEAP32[$6+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$22+8>>2]|0;
  $_0$0 = 0;$e$0$sroa_cast5$pre$phiZZZ2D = $e;
  STACKTOP = sp;return ($_0$0|0);
 }
 return (0)|0;
}
function ___rdl_grow_in_place($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($3>>>0)<=($1>>>0);
 $$ = $cond&1;
 return ($$|0);
}
function ___rdl_shrink_in_place($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($1>>>0)<=($3>>>0);
 $$ = $cond&1;
 return ($$|0);
}
function __ZN3std10sys_common11thread_info3set17h58c0b420c88bfc5aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i = 0, $$pre$i$i23 = 0, $$pre$phi$i$i37Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $_10$i$i$i = 0, $_10$sroa$4$0$$sroa_idx51 = 0, $_12$sroa$0$0$copyload12 = 0, $_19$i$i = 0;
 var $_22$0$in$pre$phi$i$iZZZ2D = 0, $_4$i$i$i = 0, $_5$sroa$4$0$$sroa_idx12$i$i$i = 0, $_7$sroa$0$0$$sroa_idx$i$i$i = 0, $_7$sroa$0$0$copyload34$i$i$i = 0, $_9$i$i$i = 0, $_9$i$i$i19 = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i38 = 0, $cond$i$i$i$i33 = 0, $cond$i2$i$i$i = 0, $cond$i2$i$i$i29 = 0, $cond2$i$i = 0, $cond2$i$i21 = 0, $eh$lpad$body54$index2Z2D = 0, $eh$lpad$body54$indexZ2D = 0, $f$i$i = 0, $personalityslot$sroa$0$015$i$i = 0, $personalityslot$sroa$6$016$i$i = 0;
 var $phitmp$i$i$i$i = 0, $t1$i$i$i$i$i$i$i = 0, $t1$i$i$i$i$i$i$i18 = 0, $thread = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26 = 0, $value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = 0, $value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $t1$i$i$i$i$i$i$i18 = sp + 144|0;
 $_9$i$i$i19 = sp + 120|0;
 $_10$i$i$i = sp + 112|0;
 $_4$i$i$i = sp + 96|0;
 $_19$i$i = sp + 80|0;
 $f$i$i = sp + 64|0;
 $t1$i$i$i$i$i$i$i = sp + 32|0;
 $_9$i$i$i = sp + 8|0;
 $thread = sp;
 $2 = $1;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$thread>>2] = $2;
 __THREW__ = 0;
 $9 = (invoke_i(144)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $12 = ($9|0)==(0|0);
   if ($12) {
    __THREW__ = 0;
    invoke_v(104);
    $30 = __THREW__; __THREW__ = 0;
    break;
   }
   $13 = HEAP32[$9>>2]|0;
   $cond2$i$i = ($13|0)==(0);
   do {
    if ($cond2$i$i) {
     dest=$t1$i$i$i$i$i$i$i; src=$9; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     HEAP8[$9>>0]=1&255;HEAP8[$9+1>>0]=(1>>8)&255;HEAP8[$9+2>>0]=(1>>16)&255;HEAP8[$9+3>>0]=1>>24;
     $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = ((($9)) + 4|0);
     HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i>>0]=0&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+3>>0]=0>>24;
     $value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = ((($9)) + 16|0);
     HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i>>0]=0&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i+3>>0]=0>>24;
     ;HEAP32[$_9$i$i$i>>2]=HEAP32[$t1$i$i$i$i$i$i$i>>2]|0;HEAP32[$_9$i$i$i+4>>2]=HEAP32[$t1$i$i$i$i$i$i$i+4>>2]|0;HEAP32[$_9$i$i$i+8>>2]=HEAP32[$t1$i$i$i$i$i$i$i+8>>2]|0;HEAP32[$_9$i$i$i+12>>2]=HEAP32[$t1$i$i$i$i$i$i$i+12>>2]|0;HEAP32[$_9$i$i$i+16>>2]=HEAP32[$t1$i$i$i$i$i$i$i+16>>2]|0;
     $14 = HEAP32[$_9$i$i$i>>2]|0;
     $cond$i2$i$i$i = ($14|0)==(0);
     if (!($cond$i2$i$i$i)) {
      $15 = ((($_9$i$i$i)) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $18 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($18-1)|0);
       $19 = ($18|0)==(1);
       if ($19) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(90,($15|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if ($21) {
         break L1;
        }
       }
      }
     }
     $22 = HEAP32[$9>>2]|0;
     $cond$i$i$i$i = ($22|0)==(0);
     if ($cond$i$i$i$i) {
      __THREW__ = 0;
      invoke_vi(91,(2280|0));
      $23 = __THREW__; __THREW__ = 0;
      break L1;
     } else {
      $$pre$phi$i$iZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i;
      break;
     }
    } else {
     $$pre$i$i = ((($9)) + 4|0);
     $$pre$phi$i$iZ2D = $$pre$i$i;
    }
   } while(0);
   $24 = HEAP32[$$pre$phi$i$iZ2D>>2]|0;
   $cond$i$i$i$i$i$i = ($24|0)==(-1);
   if ($cond$i$i$i$i$i$i) {
    __THREW__ = 0;
    invoke_v(87);
    $25 = __THREW__; __THREW__ = 0;
    break;
   }
   $26 = ((($9)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    __THREW__ = 0;
    invoke_viii(95,(7216|0),38,(3216|0));
    $29 = __THREW__; __THREW__ = 0;
    break;
   }
   $_12$sroa$0$0$copyload12 = HEAP32[$thread>>2]|0;
   $31 = $f$i$i;
   $32 = $31;
   HEAP32[$32>>2] = $5;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = $8;
   $_10$sroa$4$0$$sroa_idx51 = ((($f$i$i)) + 8|0);
   HEAP32[$_10$sroa$4$0$$sroa_idx51>>2] = $_12$sroa$0$0$copyload12;
   $35 = $_12$sroa$0$0$copyload12;
   __THREW__ = 0;
   $36 = (invoke_i(144)|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   L24: do {
    if ($38) {
     $84 = ___cxa_find_matching_catch_2()|0;
     $85 = tempRet0;
     __ZN4core3ptr13drop_in_place17h618a56c257713fa0E($f$i$i);
     $personalityslot$sroa$0$015$i$i = $84;$personalityslot$sroa$6$016$i$i = $85;
    } else {
     $39 = ($36|0)==(0|0);
     if ($39) {
      $40 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($40-1)|0);
      $41 = ($40|0)==(1);
      if (!($41)) {
       __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
       // unreachable;
      }
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($_10$sroa$4$0$$sroa_idx51);
      __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
      // unreachable;
     }
     ;HEAP32[$_19$i$i>>2]=HEAP32[$f$i$i>>2]|0;HEAP32[$_19$i$i+4>>2]=HEAP32[$f$i$i+4>>2]|0;HEAP32[$_19$i$i+8>>2]=HEAP32[$f$i$i+8>>2]|0;
     $42 = HEAP32[$36>>2]|0;
     $cond2$i$i21 = ($42|0)==(0);
     L34: do {
      if ($cond2$i$i21) {
       dest=$t1$i$i$i$i$i$i$i18; src=$36; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       HEAP8[$36>>0]=1&255;HEAP8[$36+1>>0]=(1>>8)&255;HEAP8[$36+2>>0]=(1>>16)&255;HEAP8[$36+3>>0]=1>>24;
       $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26 = ((($36)) + 4|0);
       HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26>>0]=0&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26+3>>0]=0>>24;
       $value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27 = ((($36)) + 16|0);
       HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27>>0]=0&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27+1>>0]=(0>>8)&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27+2>>0]=(0>>16)&255;HEAP8[$value$i$sroa$49$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i27+3>>0]=0>>24;
       ;HEAP32[$_9$i$i$i19>>2]=HEAP32[$t1$i$i$i$i$i$i$i18>>2]|0;HEAP32[$_9$i$i$i19+4>>2]=HEAP32[$t1$i$i$i$i$i$i$i18+4>>2]|0;HEAP32[$_9$i$i$i19+8>>2]=HEAP32[$t1$i$i$i$i$i$i$i18+8>>2]|0;HEAP32[$_9$i$i$i19+12>>2]=HEAP32[$t1$i$i$i$i$i$i$i18+12>>2]|0;HEAP32[$_9$i$i$i19+16>>2]=HEAP32[$t1$i$i$i$i$i$i$i18+16>>2]|0;
       $43 = HEAP32[$_9$i$i$i19>>2]|0;
       $cond$i2$i$i$i29 = ($43|0)==(0);
       if ($cond$i2$i$i$i29) {
        label = 28;
       } else {
        $44 = ((($_9$i$i$i19)) + 16|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(0|0);
        if ($46) {
         label = 28;
        } else {
         $47 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($47-1)|0);
         $48 = ($47|0)==(1);
         if ($48) {
          /* fence */;
          __THREW__ = 0;
          invoke_vi(90,($44|0));
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if (!($50)) {
           label = 28;
          }
         } else {
          label = 28;
         }
        }
       }
       do {
        if ((label|0) == 28) {
         $51 = HEAP32[$36>>2]|0;
         $cond$i$i$i$i33 = ($51|0)==(0);
         if ($cond$i$i$i$i33) {
          __THREW__ = 0;
          invoke_vi(91,(2280|0));
          $52 = __THREW__; __THREW__ = 0;
          break;
         } else {
          $$pre$phi$i$i37Z2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26;$_22$0$in$pre$phi$i$iZZZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i$i26;
          break L34;
         }
        }
       } while(0);
       $86 = ___cxa_find_matching_catch_2()|0;
       $87 = tempRet0;
       __ZN4core3ptr13drop_in_place17h618a56c257713fa0E($_19$i$i);
       $personalityslot$sroa$0$015$i$i = $86;$personalityslot$sroa$6$016$i$i = $87;
       break L24;
      } else {
       $$pre$i$i23 = ((($36)) + 4|0);
       $$pre$phi$i$i37Z2D = $$pre$i$i23;$_22$0$in$pre$phi$i$iZZZ2D = $$pre$i$i23;
      }
     } while(0);
     $53 = $_19$i$i;
     $54 = $53;
     $55 = HEAP32[$54>>2]|0;
     $56 = (($53) + 4)|0;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $_7$sroa$0$0$$sroa_idx$i$i$i = ((($_19$i$i)) + 8|0);
     $_7$sroa$0$0$copyload34$i$i$i = HEAP32[$_7$sroa$0$0$$sroa_idx$i$i$i>>2]|0;
     $59 = $_4$i$i$i;
     $60 = $59;
     HEAP32[$60>>2] = $55;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     $_5$sroa$4$0$$sroa_idx12$i$i$i = ((($_4$i$i$i)) + 8|0);
     HEAP32[$_5$sroa$4$0$$sroa_idx12$i$i$i>>2] = $_7$sroa$0$0$copyload34$i$i$i;
     $63 = HEAP32[$$pre$phi$i$i37Z2D>>2]|0;
     $cond$i$i$i$i$i$i38 = ($63|0)==(0);
     if (!($cond$i$i$i$i$i$i38)) {
      __THREW__ = 0;
      invoke_v(89);
      $64 = __THREW__; __THREW__ = 0;
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      __THREW__ = 0;
      invoke_vi(145,($_4$i$i$i|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if (!($68)) {
       $personalityslot$sroa$0$015$i$i = $65;$personalityslot$sroa$6$016$i$i = $66;
       break;
      }
      $88 = ___cxa_find_matching_catch_2()|0;
      $89 = tempRet0;
      $personalityslot$sroa$0$015$i$i = $88;$personalityslot$sroa$6$016$i$i = $89;
      break;
     }
     HEAP8[$$pre$phi$i$i37Z2D>>0]=-1&255;HEAP8[$$pre$phi$i$i37Z2D+1>>0]=(-1>>8)&255;HEAP8[$$pre$phi$i$i37Z2D+2>>0]=(-1>>16)&255;HEAP8[$$pre$phi$i$i37Z2D+3>>0]=-1>>24;
     $71 = ((($36)) + 8|0);
     $phitmp$i$i$i$i = $71;
     $72 = $_22$0$in$pre$phi$i$iZZZ2D;
     $73 = $_10$i$i$i;
     $74 = $73;
     HEAP32[$74>>2] = $phitmp$i$i$i$i;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = $72;
     $77 = ((($36)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)==(0|0);
     if ($79) {
      ;HEAP32[$71>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$71+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
      $90 = ((($_10$i$i$i)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      HEAP8[$91>>0]=0&255;HEAP8[$91+1>>0]=(0>>8)&255;HEAP8[$91+2>>0]=(0>>16)&255;HEAP8[$91+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     $80 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($80-1)|0);
     $81 = ($80|0)==(1);
     if (!($81)) {
      ;HEAP32[$71>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$71+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
      $90 = ((($_10$i$i$i)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      HEAP8[$91>>0]=0&255;HEAP8[$91+1>>0]=(0>>8)&255;HEAP8[$91+2>>0]=(0>>16)&255;HEAP8[$91+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
     /* fence */;
     __THREW__ = 0;
     invoke_vi(90,($77|0));
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      $69 = ___cxa_find_matching_catch_2()|0;
      $70 = tempRet0;
      ;HEAP32[$71>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$71+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
      __ZN4core3ptr13drop_in_place17h34b7009619ef173bE($_10$i$i$i);
      $personalityslot$sroa$0$015$i$i = $69;$personalityslot$sroa$6$016$i$i = $70;
      break;
     } else {
      ;HEAP32[$71>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$71+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
      $90 = ((($_10$i$i$i)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      HEAP8[$91>>0]=0&255;HEAP8[$91+1>>0]=(0>>8)&255;HEAP8[$91+2>>0]=(0>>16)&255;HEAP8[$91+3>>0]=0>>24;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $eh$lpad$body54$index2Z2D = $personalityslot$sroa$6$016$i$i;$eh$lpad$body54$indexZ2D = $personalityslot$sroa$0$015$i$i;
   ___resumeException($eh$lpad$body54$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch_2()|0;
 $93 = tempRet0;
 __ZN4core3ptr13drop_in_place17hd10a86be7f072410E($thread);
 $eh$lpad$body54$index2Z2D = $93;$eh$lpad$body54$indexZ2D = $92;
 ___resumeException($eh$lpad$body54$indexZ2D|0);
 // unreachable;
}
function __ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h1396895156aa9eecE() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i3 = 0, $_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $_6$i$i$i$i = 0, $cond$i$i = 0, $cond$i$i1 = 0, $err$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $err$i$i$i = sp + 16|0;
 $_6$i$i$i$i = sp;
 $0 = HEAP32[568]|0;
 $cond$i$i = ($0|0)==(0);
 if ($cond$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2272)|0);
  $_0$0$i$i = $1;
 } else {
  $_0$0$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $10 = $$$i;
  STACKTOP = sp;return ($10|0);
 }
 $6 = (___rust_alloc(24,4,$err$i$i$i)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i);
  // unreachable;
 }
 HEAP32[$6>>2] = 2272;
 $_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($6)) + 4|0);
 HEAP32[$_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $8 = HEAP32[568]|0;
 $cond$i$i1 = ($8|0)==(0);
 if ($cond$i$i1) {
  $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E(2272)|0);
  $_0$0$i$i3 = $9;
 } else {
  $_0$0$i$i3 = $8;
 }
 (_pthread_setspecific(($_0$0$i$i3|0),($6|0))|0);
 $10 = $_19$i$sroa$0$sroa$0$0$_19$i$sroa$0$0$$sroa_raw_idx$sroa_idx;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr13drop_in_place17h618a56c257713fa0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_5$sroa$0$0$copyload2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $_5$sroa$0$0$copyload2$i$i$i$i$i = HEAP32[$1>>2]|0;
 $2 = HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2]|0;HEAP32[$_5$sroa$0$0$copyload2$i$i$i$i$i>>2] = (($2-1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E($1);
 return;
}
function _rust_begin_unwind($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $_13 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_13 = sp + 24|0;
 $msg = sp;
 ;HEAP32[$msg>>2]=HEAP32[$0>>2]|0;HEAP32[$msg+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$msg+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$msg+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$msg+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$msg+20>>2]=HEAP32[$0+20>>2]|0;
 HEAP32[$_13>>2] = $1;
 $5 = ((($_13)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($_13)) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($_13)) + 12|0);
 HEAP32[$7>>2] = $4;
 __ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E($msg,$_13);
 // unreachable;
}
function __ZN3std2rt10lang_start17hf12ee8202991cf74E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i$i$i$i$i$i$i$i$i = 0, $$lcssa$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre6$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $_12 = 0, $_17 = 0, $_17$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_38$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $_6$i$i$i$i$i = 0, $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i = 0, $any_data$i$i = 0, $any_vtable$i$i = 0, $args$i$i = 0, $cond2$i$i$i$i$i = 0, $data$i$i = 0, $eh$lpad$body15$i$i$i$i$i$index2Z2D = 0, $eh$lpad$body15$i$i$i$i$i$indexZ2D = 0, $err$i$i$i$i = 0, $err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $f$i$i = 0, $iter$i$sroa$0$075$i$i$i$i$i = 0;
 var $local_len$i$i$i$i$i$i = 0, $main = 0, $personalityslot$sroa$0$1$i$i$i$i$i$i = 0, $personalityslot$sroa$8$1$i$i$i$i$i$i = 0, $phitmp$i$i = 0, $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $ptr$0$i76$i$i$i$i$i = 0, $res = 0, $vector$i$i$i$i$i = 0, $vector$i$i$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $_17$i$i = sp + 168|0;
 $f$i$i = sp + 160|0;
 $data$i$i = sp + 152|0;
 $any_vtable$i$i = sp + 180|0;
 $any_data$i$i = sp + 176|0;
 $err$i$i$i$i = sp + 136|0;
 $_6$i$i$i$i$i = sp + 120|0;
 $err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = sp + 104|0;
 $_38$i$i$i$i$i$i$i$i$i$i$i$i$i$i = sp + 88|0;
 $vector$i$i$i$i$i$i$i$i$i$i$i = sp + 72|0;
 $local_len$i$i$i$i$i$i = sp + 64|0;
 $vector$i$i$i$i$i = sp + 48|0;
 $args$i$i = sp + 32|0;
 $res = sp + 24|0;
 $_17 = sp + 16|0;
 $_12 = sp;
 $main = sp + 172|0;
 HEAP32[$main>>2] = $0;
 __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h7ea54c5aa9847fc6E($_12,7300,4);
 $3 = (__ZN3std6thread6Thread3new17hf3c4d6d1510ff550E($_12)|0);
 $4 = $_17;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 __ZN3std10sys_common11thread_info3set17h58c0b420c88bfc5aE($_17,$3);
 HEAP32[$vector$i$i$i$i$i>>2] = 4;
 $$sroa_idx$i$i$i$i$i$i = ((($vector$i$i$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i$i$i>>2] = 0;
 $8 = ((($vector$i$i$i$i$i)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ($1|0)>(0);
 $$$i$i$i$i$i$i$i$i$i = $9 ? $1 : 0;
 __THREW__ = 0;
 invoke_vii(146,($vector$i$i$i$i$i|0),($$$i$i$i$i$i$i$i$i$i|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $52 = ___cxa_find_matching_catch_2()|0;
  $53 = tempRet0;
  $personalityslot$sroa$0$1$i$i$i$i$i$i = $52;$personalityslot$sroa$8$1$i$i$i$i$i$i = $53;
  __ZN4core3ptr13drop_in_place17h26d8f0910532aeb9E($vector$i$i$i$i$i);
  ___resumeException($personalityslot$sroa$0$1$i$i$i$i$i$i|0);
  // unreachable;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i>>2]|0;
 $16 = HEAP32[$8>>2]|0;
 HEAP32[$local_len$i$i$i$i$i$i>>2] = $8;
 $15 = ((($local_len$i$i$i$i$i$i)) + 4|0);
 HEAP32[$15>>2] = $16;
 L5: do {
  if ($9) {
   $17 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i) + (($16*12)|0)|0);
   $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 4|0);
   $18 = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 8|0);
   $14 = $16;$iter$i$sroa$0$075$i$i$i$i$i = 0;$ptr$0$i76$i$i$i$i$i = $17;
   while(1) {
    $19 = (($iter$i$sroa$0$075$i$i$i$i$i) + 1)|0;
    $20 = (($2) + ($iter$i$sroa$0$075$i$i$i$i$i<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_strlen($21)|0);
    $23 = ($22|0)==(-1);
    if ($23) {
     label = 7;
     break;
    }
    $25 = ($22|0)<(0);
    if ($25) {
     label = 9;
     break;
    }
    $27 = ($22|0)==(0);
    if ($27) {
     $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = (1);
    } else {
     $28 = (___rust_alloc($22,1,$err$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i)|0);
     $29 = ($28|0)==(0|0);
     if ($29) {
      label = 12;
      break;
     } else {
      $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i = $28;
     }
    }
    $30 = $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
    HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2] = $30;
    HEAP32[$$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i>>2] = $22;
    HEAP32[$18>>2] = 0;
    __THREW__ = 0;
    invoke_vii(115,($vector$i$i$i$i$i$i$i$i$i$i$i|0),($22|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 14;
     break;
    }
    $35 = HEAP32[$18>>2]|0;
    $36 = (($35) + ($22))|0;
    HEAP32[$18>>2] = $36;
    $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
    $37 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i) + ($35)|0);
    _memcpy(($37|0),($21|0),($22|0))|0;
    $38 = $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) + 4)|0;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = ($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i|0)==(0|0);
    if ($44) {
     $$lcssa$i$i$i$i$i = $14;
     break L5;
    }
    HEAP32[$ptr$0$i76$i$i$i$i$i>>2] = $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
    $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i = ((($ptr$0$i76$i$i$i$i$i)) + 4|0);
    $45 = $__next$i$sroa$5$0$$sroa_idx$i$i$i$i$i;
    $46 = $45;
    HEAP32[$46>>2] = $40;
    $47 = (($45) + 4)|0;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = ((($ptr$0$i76$i$i$i$i$i)) + 12|0);
    $50 = (($14) + 1)|0;
    $51 = ($19|0)<($1|0);
    if ($51) {
     $14 = $50;$iter$i$sroa$0$075$i$i$i$i$i = $19;$ptr$0$i76$i$i$i$i$i = $49;
    } else {
     $$lcssa$i$i$i$i$i = $50;
     break L5;
    }
   }
   if ((label|0) == 7) {
    __THREW__ = 0;
    invoke_vii(108,-1,0);
    $24 = __THREW__; __THREW__ = 0;
    label = 2;
   }
   else if ((label|0) == 9) {
    __THREW__ = 0;
    invoke_vi(91,(2824|0));
    $26 = __THREW__; __THREW__ = 0;
    label = 2;
   }
   else if ((label|0) == 12) {
    __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_38$i$i$i$i$i$i$i$i$i$i$i$i$i$i);
    // unreachable;
   }
   else if ((label|0) == 14) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    __ZN4core3ptr13drop_in_place17h033643b1e4c91baaE($vector$i$i$i$i$i$i$i$i$i$i$i);
    $eh$lpad$body15$i$i$i$i$i$index2Z2D = $34;$eh$lpad$body15$i$i$i$i$i$indexZ2D = $33;
   }
   if ((label|0) == 2) {
    $12 = ___cxa_find_matching_catch_2()|0;
    $13 = tempRet0;
    $eh$lpad$body15$i$i$i$i$i$index2Z2D = $13;$eh$lpad$body15$i$i$i$i$i$indexZ2D = $12;
   }
   HEAP32[$15>>2] = $14;
   __ZN4core3ptr13drop_in_place17hae0b36d05f9e11f0E($local_len$i$i$i$i$i$i);
   $personalityslot$sroa$0$1$i$i$i$i$i$i = $eh$lpad$body15$i$i$i$i$i$indexZ2D;$personalityslot$sroa$8$1$i$i$i$i$i$i = $eh$lpad$body15$i$i$i$i$i$index2Z2D;
   __ZN4core3ptr13drop_in_place17h26d8f0910532aeb9E($vector$i$i$i$i$i);
   ___resumeException($personalityslot$sroa$0$1$i$i$i$i$i$i|0);
   // unreachable;
  } else {
   $$lcssa$i$i$i$i$i = $16;
  }
 } while(0);
 HEAP32[$8>>2] = $$lcssa$i$i$i$i$i;
 ;HEAP32[$args$i$i>>2]=HEAP32[$vector$i$i$i$i$i>>2]|0;HEAP32[$args$i$i+4>>2]=HEAP32[$vector$i$i$i$i$i+4>>2]|0;HEAP32[$args$i$i+8>>2]=HEAP32[$vector$i$i$i$i$i+8>>2]|0;
 (_pthread_mutex_lock(((12840)|0))|0);
 $54 = HEAP32[3217]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  __THREW__ = 0;
  invoke_viii(95,(7304|0),34,(3232|0));
  $56 = __THREW__; __THREW__ = 0;
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  __ZN4core3ptr13drop_in_place17h26d8f0910532aeb9E($args$i$i);
  ___resumeException($57|0);
  // unreachable;
 }
 $59 = (___rust_alloc(12,4,$err$i$i$i$i)|0);
 $60 = ($59|0)==(0|0);
 if ($60) {
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E($_6$i$i$i$i$i);
  // unreachable;
 }
 ;HEAP32[$59>>2]=HEAP32[$args$i$i>>2]|0;HEAP32[$59+4>>2]=HEAP32[$args$i$i+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$args$i$i+8>>2]|0;
 HEAP32[3217] = $59;
 (_pthread_mutex_unlock(((12840)|0))|0);
 HEAP32[$any_data$i$i>>2] = 0;
 HEAP32[$any_vtable$i$i>>2] = 0;
 HEAP32[$data$i$i>>2] = $main;
 $61 = (___rust_maybe_catch_panic(147,$data$i$i,$any_data$i$i,$any_vtable$i$i)|0);
 $62 = ($61|0)==(0);
 if ($62) {
  HEAP32[$res>>2] = 0;
 } else {
  $63 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E()|0);
  $64 = ($63|0)==(0|0);
  if ($64) {
   __ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE();
   // unreachable;
  }
  $65 = HEAP32[$63>>2]|0;
  $cond2$i$i$i$i$i = ($65|0)==(0);
  if ($cond2$i$i$i$i$i) {
   $66 = $63;
   $67 = $66;
   HEAP8[$67>>0]=1&255;HEAP8[$67+1>>0]=(1>>8)&255;HEAP8[$67+2>>0]=(1>>16)&255;HEAP8[$67+3>>0]=1>>24;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP8[$69>>0]=0&255;HEAP8[$69+1>>0]=(0>>8)&255;HEAP8[$69+2>>0]=(0>>16)&255;HEAP8[$69+3>>0]=0>>24;
   $$pre6$i$i$i = ((($63)) + 4|0);
   $$pre$phi$i$i$iZ2D = $$pre6$i$i$i;$70 = -1;
  } else {
   $$sink$in$phi$trans$insert$i$i$i = ((($63)) + 4|0);
   $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i>>2]|0;
   $phitmp$i$i = (($$pre$i$i$i) + -1)|0;
   $$pre$phi$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i;$70 = $phitmp$i$i;
  }
  HEAP8[$$pre$phi$i$i$iZ2D>>0]=$70&255;HEAP8[$$pre$phi$i$i$iZ2D+1>>0]=($70>>8)&255;HEAP8[$$pre$phi$i$i$iZ2D+2>>0]=($70>>16)&255;HEAP8[$$pre$phi$i$i$iZ2D+3>>0]=$70>>24;
  $71 = HEAP32[$any_data$i$i>>2]|0;
  $72 = HEAP32[$any_vtable$i$i>>2]|0;
  HEAP32[$res>>2] = $71;
  $73 = ((($res)) + 4|0);
  HEAP32[$73>>2] = $72;
 }
 $74 = HEAP32[3226]|0;
 $75 = ($74|0)==(3);
 do {
  if (!($75)) {
   HEAP8[$f$i$i>>0] = 1;
   HEAP32[$_17$i$i>>2] = $f$i$i;
   __THREW__ = 0;
   invoke_viiii(148,(12904|0),0,($_17$i$i|0),(352|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $93 = ___cxa_find_matching_catch_2()|0;
    $94 = tempRet0;
    __ZN4core3ptr13drop_in_place17hcda8fc2e45ded79cE($res);
    ___resumeException($93|0);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $78 = HEAP32[$res>>2]|0;
 $79 = ($78|0)!=(0|0);
 $80 = ($78|0)==(0|0);
 if ($80) {
  $$ = $79 ? 101 : 0;
  STACKTOP = sp;return ($$|0);
 }
 $81 = ((($res)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$82>>2]|0;
 __THREW__ = 0;
 invoke_vi($83|0,($78|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = tempRet0;
  __ZN5alloc4heap8box_free17h9e51f905cf5cb162E($78,$82);
  ___resumeException($91|0);
  // unreachable;
 }
 $86 = ((($82)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  $$ = $79 ? 101 : 0;
  STACKTOP = sp;return ($$|0);
 }
 $89 = ((($82)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 ___rust_dealloc($78,$87,$90);
 $$ = $79 ? 101 : 0;
 STACKTOP = sp;return ($$|0);
}
function __ZN3std9panicking3try7do_call17h4824268eebf21fd4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $tmp$sroa$0$0$copyload17$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmp$sroa$0$0$copyload17$i = HEAP32[$0>>2]|0;
 $1 = $tmp$sroa$0$0$copyload17$i;
 $2 = HEAP32[$1>>2]|0;
 __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h66904d687f2e0a68E($2);
 return;
}
function __ZN4core3ptr13drop_in_place17hcda8fc2e45ded79cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  $18 = HEAP32[$3>>2]|0;
  __ZN5alloc4heap8box_free17h9e51f905cf5cb162E($17,$18);
  ___resumeException($15|0);
  // unreachable;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($8)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 ___rust_dealloc($12,$10,$14);
 return;
}
function __ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h66904d687f2e0a68E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[$0 & 255]();
 return;
}
function __ZN64__LT_alloc_system__System_u20_as_u20_alloc__allocator__Alloc_GT_3oom17hd72c4d7fee483941E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_7 = sp;
 ;HEAP32[$_7>>2]=HEAP32[$1>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$1+8>>2]|0;
 __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17h4d6acfed55fd624aE(0,$_7);
 // unreachable;
}
function __ZN12alloc_system8platform89__LT_impl_u20_alloc__allocator__Alloc_u20_for_u20__RF__u27_a_u20_alloc_system__System_GT_3oom17h4d6acfed55fd624aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_16 = 0, $_8 = 0, $_8$i = 0, $_9$sroa$4$0$$sroa_idx4 = 0, $_9$sroa$5$0$$sroa_idx6 = 0, $_9$sroa$69$0$$sroa_idx11 = 0, $_9$sroa$7$0$$sroa_idx13 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_8 = sp + 56|0;
 $_10$i = sp + 32|0;
 $_8$i = sp + 24|0;
 $_16 = sp + 16|0;
 $err = sp;
 ;HEAP32[$err>>2]=HEAP32[$1>>2]|0;HEAP32[$err+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = $err;
 HEAP32[$_16>>2] = $2;
 $3 = ((($_16)) + 4|0);
 HEAP32[$3>>2] = (149);
 HEAP32[$_8$i>>2] = $_8;
 HEAP32[$_10$i>>2] = 3248;
 $_9$sroa$4$0$$sroa_idx4 = ((($_10$i)) + 4|0);
 HEAP32[$_9$sroa$4$0$$sroa_idx4>>2] = 2;
 $_9$sroa$5$0$$sroa_idx6 = ((($_10$i)) + 8|0);
 HEAP32[$_9$sroa$5$0$$sroa_idx6>>2] = 0;
 $_9$sroa$69$0$$sroa_idx11 = ((($_10$i)) + 16|0);
 HEAP32[$_9$sroa$69$0$$sroa_idx11>>2] = $_16;
 $_9$sroa$7$0$$sroa_idx13 = ((($_10$i)) + 20|0);
 HEAP32[$_9$sroa$7$0$$sroa_idx13>>2] = 1;
 (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,376,$_10$i)|0);
 _llvm_trap();
 // unreachable;
}
function __ZN4core3ptr13drop_in_place17hccdb7f88103bdf48E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h400e4762f359b502E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_write(2,$1,$2)|0);
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hcb7111d8a8561d7eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$1$i$i = 0;
 var $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 HEAP32[$_12$i>>2] = 0;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = $1&255;
  HEAP8[$_12$i>>0] = $3;
  $len$2$i$i = 1;
  (_write(2,$_12$i,$len$2$i$i)|0);
  STACKTOP = sp;return 0;
 }
 $4 = ($1>>>0)<(2048);
 do {
  if ($4) {
   $5 = $1 >>> 6;
   $6 = $5 & 31;
   $7 = $6&255;
   $8 = $7 | -64;
   $$sink$i$i = $8;$$sink$sink$i$i = 1;$$sink15$i$i = $_12$i;$len$1$i$i = 2;
  } else {
   $9 = ($1>>>0)<(65536);
   if ($9) {
    $10 = $1 >>> 12;
    $11 = $10 & 15;
    $12 = $11&255;
    $13 = $12 | -32;
    HEAP8[$_12$i>>0] = $13;
    $14 = $1 >>> 6;
    $15 = $14 & 63;
    $16 = $15&255;
    $17 = ((($_12$i)) + 1|0);
    $18 = $16 | -128;
    $$sink$i$i = $18;$$sink$sink$i$i = 2;$$sink15$i$i = $17;$len$1$i$i = 3;
    break;
   } else {
    $19 = $1 >>> 18;
    $20 = $19 & 7;
    $21 = $20&255;
    $22 = $21 | -16;
    HEAP8[$_12$i>>0] = $22;
    $23 = $1 >>> 12;
    $24 = $23 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 1|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $28 = $1 >>> 6;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = ((($_12$i)) + 2|0);
    $32 = $30 | -128;
    $$sink$i$i = $32;$$sink$sink$i$i = 3;$$sink15$i$i = $31;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
 $33 = $1 & 63;
 $34 = $33&255;
 $35 = (($_12$i) + ($$sink$sink$i$i)|0);
 $36 = $34 | -128;
 HEAP8[$35>>0] = $36;
 $len$2$i$i = $len$1$i$i;
 (_write(2,$_12$i,$len$2$i$i)|0);
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h69d30e13deb50ba2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,376,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function _rust_eh_personality($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___gxx_personality_v0(($0|0),($1|0),($2|0),($3|0),($4|0),($5|0))|0);
 return ($6|0);
}
function ___rust_maybe_catch_panic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $tmp$sroa$0$0$copyload$i$i = 0, $tmp$sroa$5$0$$sroa_idx2$i$i = 0, $tmp$sroa$5$0$copyload$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi($0|0,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $_0$0 = 0;
  return ($_0$0|0);
 }
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 $8 = ($6|0)==(0|0);
 if ($8) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3264);
  // unreachable;
 }
 $tmp$sroa$0$0$copyload$i$i = HEAP32[$6>>2]|0;
 $tmp$sroa$5$0$$sroa_idx2$i$i = ((($6)) + 4|0);
 $tmp$sroa$5$0$copyload$i$i2 = HEAP32[$tmp$sroa$5$0$$sroa_idx2$i$i>>2]|0;
 ___cxa_free_exception(($6|0));
 $9 = $tmp$sroa$0$0$copyload$i$i;
 HEAP32[$2>>2] = $9;
 HEAP32[$3>>2] = $tmp$sroa$5$0$copyload$i$i2;
 $_0$0 = 1;
 return ($_0$0|0);
}
function ___rust_start_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $1;
 $4 = (___cxa_allocate_exception(8)|0);
 $5 = ($4|0)==(0|0);
 $6 = $0;
 $7 = $1;
 if (!($5)) {
  HEAP32[$4>>2] = $0;
  $19 = ((($4)) + 4|0);
  HEAP32[$19>>2] = $1;
  ___cxa_throw(($4|0),(0|0),(0|0));
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3288);
  // unreachable;
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_vi($9|0,($6|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  __ZN5alloc4heap8box_free17h89c7576ced380eccE($2,$3);
  ___resumeException($17|0);
  // unreachable;
 }
 $12 = ((($7)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  return 3;
 }
 $15 = ((($7)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 ___rust_dealloc($6,$13,$16);
 return 3;
}
function __ZN5alloc4heap8box_free17h89c7576ced380eccE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ___rust_dealloc($0,$3,$6);
 return;
}
function __ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h1f7cca65273349d9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$1$gep = 0, $$sink$i = 0, $$sink2$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_13 = 0, $_16 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_16 = sp + 32|0;
 $_13 = sp + 24|0;
 $_6 = sp;
 $2 = HEAP32[$0>>2]|0;
 $cond$i = ($2|0)==(0);
 $$sink2$i = $cond$i ? 7506 : 7532;
 $$sink$i = $cond$i ? 26 : 29;
 HEAP32[$_16>>2] = $$sink2$i;
 $$fca$1$gep = ((($_16)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$sink$i;
 $3 = $_16;
 HEAP32[$_13>>2] = $3;
 $4 = ((($_13)) + 4|0);
 HEAP32[$4>>2] = (150);
 HEAP32[$_6>>2] = 3312;
 $5 = ((($_6)) + 4|0);
 HEAP32[$5>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $6 = ((($_6)) + 16|0);
 HEAP32[$6>>2] = $_13;
 $7 = ((($_6)) + 20|0);
 HEAP32[$7>>2] = 1;
 $8 = (__ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE($1,$_6)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h2bd0c705cf3d223fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h509ce010b1cead94E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E_63($0) {
 $0 = $0|0;
 var $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $err = sp;
 ;HEAP32[$err>>2]=HEAP32[$0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$0+8>>2]|0;
 ___rust_oom($err);
 // unreachable;
}
function __ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h2d0a1d5225d4db3eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$arith = 0, $$overflow = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_36$sroa$0$0$copyload44$i = 0, $_50$i = 0, $cond4$i = 0, $e$sroa$4$0$$sroa_idx$i = 0, $err$i$i = 0, $err$i11$i = 0, $res$sroa$0$0$i = 0, $res$sroa$11$4$$sroa_idx$i = 0, $res$sroa$5$1$i = 0;
 var $res$sroa$5$2$i = 0, $res$sroa$5$4$copyload24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $err$i11$i = sp + 32|0;
 $err$i$i = sp + 16|0;
 $_50$i = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h299a35470dcb4d8eE(7561,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3320);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_alloc($_0$0$sroa$speculated$i$i$i$i,1,$err$i11$i)|0);
  $13 = ($12|0)==(0|0);
  $$$i = $13&1;
  $24 = 0;$27 = 0;$res$sroa$0$0$i = $$$i;$res$sroa$5$2$i = $12;
 } else {
  $_36$sroa$0$0$copyload44$i = HEAP32[$0>>2]|0;
  $14 = (___rust_realloc($_36$sroa$0$0$copyload44$i,$5,1,$_0$0$sroa$speculated$i$i$i$i,1,$err$i$i)|0);
  $15 = ($14|0)==(0|0);
  $res$sroa$5$4$copyload24$i = HEAP32[$err$i$i>>2]|0;
  $res$sroa$11$4$$sroa_idx$i = ((($err$i$i)) + 4|0);
  $16 = $res$sroa$11$4$$sroa_idx$i;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $res$sroa$5$1$i = $15 ? $res$sroa$5$4$copyload24$i : $14;
  $$sink$i$i = $15&1;
  $24 = $18;$27 = $21;$res$sroa$0$0$i = $$sink$i$i;$res$sroa$5$2$i = $res$sroa$5$1$i;
 }
 $cond4$i = ($res$sroa$0$0$i|0)==(0);
 if (!($cond4$i)) {
  HEAP32[$_50$i>>2] = $res$sroa$5$2$i;
  $e$sroa$4$0$$sroa_idx$i = ((($_50$i)) + 4|0);
  $22 = $e$sroa$4$0$$sroa_idx$i;
  $23 = $22;
  HEAP32[$23>>2] = $24;
  $25 = (($22) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $27;
  __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E_63($_50$i);
  // unreachable;
 }
 HEAP32[$0>>2] = $res$sroa$5$2$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h7ea54c5aa9847fc6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = 0, $_38$i$i$i$i$i$i = 0, $err$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i = 0, $vector$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $err$i$i$i$i$i$i$i = sp + 48|0;
 $_38$i$i$i$i$i$i = sp + 32|0;
 $vector$i$i$i = sp + 16|0;
 $_3 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3320);
  // unreachable;
 }
 $4 = ($2|0)==(0);
 if ($4) {
  $ptr$0$i$i$i$i$i$i = (1);
 } else {
  $5 = (___rust_alloc($2,1,$err$i$i$i$i$i$i$i)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZN61__LT_alloc__heap__Heap_u20_as_u20_alloc__allocator__Alloc_GT_3oom17h28fb525969c57bd8E_63($_38$i$i$i$i$i$i);
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i = $5;
  }
 }
 $7 = $ptr$0$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $7;
 $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i>>2] = $2;
 $8 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$8>>2] = 0;
 __THREW__ = 0;
 invoke_vii(151,($vector$i$i$i|0),($2|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  __ZN4core3ptr13drop_in_place17h7ac2348728d6a5e5E($vector$i$i$i);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $13 = HEAP32[$8>>2]|0;
  $14 = (($13) + ($2))|0;
  HEAP32[$8>>2] = $14;
  $_3$sroa$0$0$copyload2$i$i$i$i$i$i$i = HEAP32[$vector$i$i$i>>2]|0;
  $15 = (($_3$sroa$0$0$copyload2$i$i$i$i$i$i$i) + ($13)|0);
  _memcpy(($15|0),($1|0),($2|0))|0;
  ;HEAP32[$_3>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN4core3ptr13drop_in_place17h7ac2348728d6a5e5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_3$sroa$0$0$copyload2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $_3$sroa$0$0$copyload2$i$i$i$i = HEAP32[$0>>2]|0;
 ___rust_dealloc($_3$sroa$0$0$copyload2$i$i$i$i,$2,1);
 return;
}
function __ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h736590b09145a038E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5alloc3str56__LT_impl_u20_alloc__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h7ea54c5aa9847fc6E($0,$1,$2);
 return;
}
function __ZN5alloc6string104__LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__vec__Vec_LT_u8_GT__GT_4from17h2f31aea922f6b518E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN11std_unicode6tables16general_category1N17h243d5a2ec55a0fcfE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN11std_unicode6tables23trie_lookup_range_table17h76c26e18d489c8d6E($0,400)|0);
 return ($1|0);
}
function __ZN11std_unicode6tables23trie_lookup_range_table17h76c26e18d489c8d6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(2048);
 do {
  if ($2) {
   $3 = $0 >>> 6;
   $4 = (($1) + ($3<<3)|0);
   $$sink2 = $4;
  } else {
   $5 = ($0>>>0)<(65536);
   if ($5) {
    $6 = $0 >>> 6;
    $7 = (($6) + -32)|0;
    $8 = ($7>>>0)<(992);
    if (!($8)) {
     __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3344,$7,992);
     // unreachable;
    }
    $9 = (((($1)) + 280|0) + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = ((($1)) + 260|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $36 = ((($1)) + 256|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + ($11<<3)|0);
     $$sink2 = $38;
     break;
    } else {
     __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3360,$11,$13);
     // unreachable;
    }
   }
   $15 = $0 >>> 12;
   $16 = (($15) + -16)|0;
   $17 = ($16>>>0)<(256);
   if (!($17)) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3344,$16,256);
    // unreachable;
   }
   $18 = (((($1)) + 1272|0) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ((($1)) + 268|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $19&255;
   $23 = $22 << 6;
   $24 = $0 >>> 6;
   $25 = $24 & 63;
   $26 = $23 | $25;
   $27 = ($26>>>0)<($21>>>0);
   if (!($27)) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3344,$26,$21);
    // unreachable;
   }
   $28 = ((($1)) + 264|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ((($1)) + 276|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32>>>0)<($34>>>0);
   if ($35) {
    $39 = ((($1)) + 272|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($32<<3)|0);
    $$sink2 = $41;
    break;
   } else {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3376,$32,$34);
    // unreachable;
   }
  }
 } while(0);
 $42 = $$sink2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $0 & 63;
 $49 = (_bitshift64Shl(1,0,($48|0))|0);
 $50 = tempRet0;
 $51 = $44 & $49;
 $52 = $47 & $50;
 $53 = ($51|0)!=(0);
 $54 = ($52|0)!=(0);
 $55 = $53 | $54;
 return ($55|0);
}
function __ZN11std_unicode5lossy9Utf8Lossy10from_bytes17h94995685e007180dE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $1;
 return;
}
function __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb342f66a0acc747dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off374 = 0, $$off376 = 0, $$sink = 0, $$sink251 = 0, $$sink252 = 0, $$sink253 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $_232$sroa$4$0$$sroa_idx201 = 0, $_232$sroa$5$0$$sroa_idx203 = 0, $_232$sroa$6$0$$sroa_idx205 = 0, $cond = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $i$0$be = 0, $i$0418 = 0, $newret249$sink = 0, $or$cond256 = 0, $or$cond257 = 0, $or$cond258 = 0, $or$cond259 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond266 = 0, $or$cond267 = 0, $or$cond268 = 0, $or$cond269 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  return;
 }
 $5 = HEAP32[$1>>2]|0;
 $i$0418 = 0;
 L5: while(1) {
  $6 = (($5) + ($i$0418)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = (($i$0418) + 1)|0;
  $9 = ($7<<24>>24)>(-1);
  L7: do {
   if ($9) {
    $i$0$be = $8;
   } else {
    $10 = $7&255;
    $11 = (8427 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    switch ($12<<24>>24) {
    case 2:  {
     $13 = ($3>>>0)>($8>>>0);
     if (!($13)) {
      label = 18;
      break L5;
     }
     $14 = (($5) + ($8)|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15 & -64;
     $17 = ($16<<24>>24)==(-128);
     if (!($17)) {
      label = 18;
      break L5;
     }
     $39 = (($i$0418) + 2)|0;
     $i$0$be = $39;
     break L7;
     break;
    }
    case 3:  {
     $18 = ($3>>>0)>($8>>>0);
     if (!($18)) {
      label = 27;
      break L5;
     }
     $19 = (($5) + ($8)|0);
     $20 = HEAP8[$19>>0]|0;
     $cond22 = ($7<<24>>24)==(-32);
     $21 = ($20&255)<(192);
     $22 = $20 & -32;
     $23 = ($22<<24>>24)==(-96);
     $24 = $cond22 & $23;
     if (!($24)) {
      $$off376 = (($7) + 31)<<24>>24;
      $45 = ($$off376&255)<(12);
      $46 = ($20<<24>>24)<(0);
      $or$cond256 = $45 & $46;
      $or$cond257 = $21 & $or$cond256;
      if (!($or$cond257)) {
       $cond23 = ($7<<24>>24)==(-19);
       $or$cond258 = $cond23 & $46;
       $47 = ($20&255)<(160);
       $or$cond259 = $47 & $or$cond258;
       if (!($or$cond259)) {
        $48 = $7 & -2;
        $49 = ($48<<24>>24)==(-18);
        $or$cond261 = $49 & $46;
        $or$cond262 = $21 & $or$cond261;
        if (!($or$cond262)) {
         label = 27;
         break L5;
        }
       }
      }
     }
     $50 = (($i$0418) + 2)|0;
     $51 = ($3>>>0)>($50>>>0);
     if (!($51)) {
      label = 39;
      break L5;
     }
     $52 = (($5) + ($50)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 & -64;
     $55 = ($54<<24>>24)==(-128);
     if (!($55)) {
      label = 39;
      break L5;
     }
     $61 = (($i$0418) + 3)|0;
     $i$0$be = $61;
     break L7;
     break;
    }
    case 4:  {
     $25 = ($3>>>0)>($8>>>0);
     if (!($25)) {
      label = 47;
      break L5;
     }
     $26 = (($5) + ($8)|0);
     $27 = HEAP8[$26>>0]|0;
     $cond = ($7<<24>>24)==(-16);
     $$off = (($27) + 112)<<24>>24;
     $28 = ($$off&255)<(48);
     $29 = $cond & $28;
     if (!($29)) {
      $67 = ($27&255)<(192);
      $$off374 = (($7) + 15)<<24>>24;
      $68 = ($$off374&255)<(3);
      $69 = ($27<<24>>24)<(0);
      $or$cond266 = $68 & $69;
      $or$cond267 = $67 & $or$cond266;
      if (!($or$cond267)) {
       $cond21 = ($7<<24>>24)==(-12);
       $or$cond268 = $cond21 & $69;
       $70 = ($27&255)<(144);
       $or$cond269 = $70 & $or$cond268;
       if (!($or$cond269)) {
        label = 47;
        break L5;
       }
      }
     }
     $71 = (($i$0418) + 2)|0;
     $72 = ($3>>>0)>($71>>>0);
     if (!($72)) {
      label = 58;
      break L5;
     }
     $73 = (($5) + ($71)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 & -64;
     $76 = ($75<<24>>24)==(-128);
     if (!($76)) {
      label = 58;
      break L5;
     }
     $82 = (($i$0418) + 3)|0;
     $83 = ($3>>>0)>($82>>>0);
     if (!($83)) {
      label = 67;
      break L5;
     }
     $84 = (($5) + ($82)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85 & -64;
     $87 = ($86<<24>>24)==(-128);
     if (!($87)) {
      label = 67;
      break L5;
     }
     $93 = (($i$0418) + 4)|0;
     $i$0$be = $93;
     break L7;
     break;
    }
    default: {
     label = 13;
     break L5;
    }
    }
   }
  } while(0);
  $94 = ($i$0$be>>>0)<($3>>>0);
  if ($94) {
   $i$0418 = $i$0$be;
  } else {
   $$sink = 0;$$sink251 = 13480;$$sink252 = 0;$$sink253 = 13480;$newret249$sink = $3;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $30 = ($i$0418>>>0)>($3>>>0);
   if ($30) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $31 = ($3>>>0)<($8>>>0);
   if ($31) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($8,$3);
    // unreachable;
   } else {
    $32 = (($5) + ($8)|0);
    $33 = (($3) - ($8))|0;
    $$sink = 1;$$sink251 = $6;$$sink252 = $33;$$sink253 = $32;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 18) {
   $34 = ($i$0418>>>0)>($3>>>0);
   if ($34) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $35 = ($i$0418|0)==(-1);
   if ($35) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE(-1,$8);
    // unreachable;
   }
   $36 = ($3>>>0)<($8>>>0);
   if ($36) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($8,$3);
    // unreachable;
   } else {
    $37 = (($5) + ($8)|0);
    $38 = (($3) - ($8))|0;
    $$sink = 1;$$sink251 = $6;$$sink252 = $38;$$sink253 = $37;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 27) {
   $40 = ($i$0418>>>0)>($3>>>0);
   if ($40) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $41 = ($i$0418|0)==(-1);
   if ($41) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE(-1,$8);
    // unreachable;
   }
   $42 = ($3>>>0)<($8>>>0);
   if ($42) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($8,$3);
    // unreachable;
   } else {
    $43 = (($5) + ($8)|0);
    $44 = (($3) - ($8))|0;
    $$sink = 1;$$sink251 = $6;$$sink252 = $44;$$sink253 = $43;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 39) {
   $56 = ($i$0418>>>0)>($3>>>0);
   if ($56) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $57 = ($i$0418>>>0)>(4294967293);
   if ($57) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($i$0418,$50);
    // unreachable;
   }
   $58 = ($3>>>0)<($50>>>0);
   if ($58) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($50,$3);
    // unreachable;
   } else {
    $59 = (($5) + ($50)|0);
    $60 = (($3) - ($50))|0;
    $$sink = 2;$$sink251 = $6;$$sink252 = $60;$$sink253 = $59;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 47) {
   $62 = ($i$0418>>>0)>($3>>>0);
   if ($62) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $63 = ($i$0418|0)==(-1);
   if ($63) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE(-1,$8);
    // unreachable;
   }
   $64 = ($3>>>0)<($8>>>0);
   if ($64) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($8,$3);
    // unreachable;
   } else {
    $65 = (($5) + ($8)|0);
    $66 = (($3) - ($8))|0;
    $$sink = 1;$$sink251 = $6;$$sink252 = $66;$$sink253 = $65;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 58) {
   $77 = ($i$0418>>>0)>($3>>>0);
   if ($77) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $78 = ($i$0418>>>0)>(4294967293);
   if ($78) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($i$0418,$71);
    // unreachable;
   }
   $79 = ($3>>>0)<($71>>>0);
   if ($79) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($71,$3);
    // unreachable;
   } else {
    $80 = (($5) + ($71)|0);
    $81 = (($3) - ($71))|0;
    $$sink = 2;$$sink251 = $6;$$sink252 = $81;$$sink253 = $80;$newret249$sink = $i$0418;
    break;
   }
  }
  else if ((label|0) == 67) {
   $88 = ($i$0418>>>0)>($3>>>0);
   if ($88) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($i$0418,$3);
    // unreachable;
   }
   $89 = ($i$0418>>>0)>(4294967292);
   if ($89) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($i$0418,$82);
    // unreachable;
   }
   $90 = ($3>>>0)<($82>>>0);
   if ($90) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($82,$3);
    // unreachable;
   } else {
    $91 = (($5) + ($82)|0);
    $92 = (($3) - ($82))|0;
    $$sink = 3;$$sink251 = $6;$$sink252 = $92;$$sink253 = $91;$newret249$sink = $i$0418;
    break;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink253;
 HEAP32[$2>>2] = $$sink252;
 HEAP32[$0>>2] = $5;
 $_232$sroa$4$0$$sroa_idx201 = ((($0)) + 4|0);
 HEAP32[$_232$sroa$4$0$$sroa_idx201>>2] = $newret249$sink;
 $_232$sroa$5$0$$sroa_idx203 = ((($0)) + 8|0);
 HEAP32[$_232$sroa$5$0$$sroa_idx203>>2] = $$sink251;
 $_232$sroa$6$0$$sroa_idx205 = ((($0)) + 12|0);
 HEAP32[$_232$sroa$6$0$$sroa_idx205>>2] = $$sink;
 return;
}
function __ZN66__LT_std_unicode__lossy__Utf8Lossy_u20_as_u20_core__fmt__Debug_GT_3fmt17h68bc9bea5fb7af06E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$$$i$i = 0, $$$$i$i = 0, $$$i$i = 0, $$cast$i = 0, $$cast$i216 = 0, $$pre$i$i$i = 0, $$pre$phi$i$ph$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i$i = 0;
 var $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_11$i = 0, $_12$sroa$0$sroa$4$0$_12$sroa$0$0$$sroa_cast9$sroa_idx23$i$i = 0, $_12$sroa$0$sroa$5$0$_12$sroa$0$0$$sroa_cast9$sroa_idx$i$i = 0, $_136 = 0, $_143 = 0, $_19$i = 0, $_23 = 0, $_26$i = 0, $_5$i = 0, $_5$sroa$4$0$ph$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_78 = 0, $_8$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$4$0$$sroa_idx2$i = 0, $b = 0, $cond = 0, $cond21 = 0;
 var $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond26 = 0, $esc = 0, $from$0$lcssa250 = 0, $from$0$lcssa251 = 0, $from$0215 = 0, $from$1 = 0, $init_state$sroa$0$0$i$i = 0, $init_state$sroa$9$0$i$i = 0, $iter = 0, $iter1$sroa$0$0213 = 0, $iter1$sroa$6$0214 = 0, $iter1$sroa$6$1 = 0, $iter1$sroa$6$2 = 0, $iter1$sroa$6$3 = 0, $iter1$sroa$6$4 = 0, $iter2 = 0, $iter3$sroa$0$0$in = 0;
 var $left_val$i = 0, $or$cond$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i$i87 = 0, $or$cond$i3$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, $right_val$i = 0, $upper$i = 0, $val$sroa$5$0$$sroa_idx58 = 0, $val$sroa$5$0$copyload = 0, $val$sroa$6$0$$sroa_idx61 = 0, $val$sroa$6$0$copyload = 0, $val$sroa$7$0$$sroa_idx64 = 0, $val$sroa$7$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $_26$i = sp + 152|0;
 $_19$i = sp + 128|0;
 $right_val$i = sp + 172|0;
 $left_val$i = sp + 168|0;
 $_11$i = sp + 120|0;
 $_5$i = sp + 104|0;
 $upper$i = sp + 96|0;
 $_143 = sp + 88|0;
 $_136 = sp + 64|0;
 $b = sp + 176|0;
 $_78 = sp + 56|0;
 $iter2 = sp + 40|0;
 $esc = sp + 24|0;
 $_23 = sp + 8|0;
 $iter = sp;
 $3 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9ce5e71fb243cf53E($2,34)|0);
 $cond = ($3<<24>>24)==(0);
 if (!($cond)) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $4 = $0;
 $5 = $iter;
 $6 = $5;
 HEAP32[$6>>2] = $4;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb342f66a0acc747dE($_23,$iter);
 $9 = HEAP32[$_23>>2]|0;
 $10 = ($9|0)==(0|0);
 L4: do {
  if (!($10)) {
   $val$sroa$5$0$$sroa_idx58 = ((($_23)) + 4|0);
   $val$sroa$6$0$$sroa_idx61 = ((($_23)) + 8|0);
   $val$sroa$7$0$$sroa_idx64 = ((($_23)) + 12|0);
   $11 = $b;
   $12 = ((($_143)) + 4|0);
   $13 = ((($_136)) + 4|0);
   $_8$sroa$0$0$$sroa_idx$i = ((($_136)) + 8|0);
   $_8$sroa$4$0$$sroa_idx2$i = ((($_136)) + 12|0);
   $14 = ((($_136)) + 16|0);
   $15 = ((($_136)) + 20|0);
   $_12$sroa$0$sroa$4$0$_12$sroa$0$0$$sroa_cast9$sroa_idx23$i$i = ((($esc)) + 4|0);
   $_12$sroa$0$sroa$5$0$_12$sroa$0$0$$sroa_cast9$sroa_idx$i$i = ((($esc)) + 8|0);
   $16 = ((($_5$i)) + 4|0);
   $17 = ((($_11$i)) + 4|0);
   $18 = ((($_78)) + 4|0);
   $23 = $9;
   L6: while(1) {
    $val$sroa$5$0$copyload = HEAP32[$val$sroa$5$0$$sroa_idx58>>2]|0;
    $val$sroa$6$0$copyload = HEAP32[$val$sroa$6$0$$sroa_idx61>>2]|0;
    $val$sroa$7$0$copyload = HEAP32[$val$sroa$7$0$$sroa_idx64>>2]|0;
    $22 = (($23) + ($val$sroa$5$0$copyload)|0);
    $24 = ($val$sroa$5$0$copyload|0)==(0);
    if ($24) {
     $from$0$lcssa250 = 0;
     label = 21;
    } else {
     $25 = $23;
     $$cast$i216 = $23;$from$0215 = 0;$iter1$sroa$0$0213 = 0;$iter1$sroa$6$0214 = $25;
     while(1) {
      $28 = ((($$cast$i216)) + 1|0);
      $29 = $28;
      $27 = HEAP8[$$cast$i216>>0]|0;
      $30 = ($27<<24>>24)>(-1);
      if ($30) {
       $26 = $27&255;
       $_5$sroa$4$0$ph$i = $26;$iter1$sroa$6$4 = $29;
      } else {
       $31 = $27 & 31;
       $32 = $31&255;
       $33 = ($28|0)==($22|0);
       if ($33) {
        $41 = $22;$_0$0$i20$i$i$i = 0;$iter1$sroa$6$1 = $29;
       } else {
        $34 = ((($$cast$i216)) + 2|0);
        $35 = $34;
        $36 = HEAP8[$28>>0]|0;
        $phitmp$i$i$i = $36 & 63;
        $41 = $34;$_0$0$i20$i$i$i = $phitmp$i$i$i;$iter1$sroa$6$1 = $35;
       }
       $37 = $32 << 6;
       $38 = $_0$0$i20$i$i$i&255;
       $39 = $38 | $37;
       $40 = ($27&255)>(223);
       if ($40) {
        $42 = ($41|0)==($22|0);
        if ($42) {
         $52 = $22;$_0$0$i14$i$i$i = 0;$iter1$sroa$6$2 = $iter1$sroa$6$1;
        } else {
         $43 = ((($41)) + 1|0);
         $44 = $43;
         $45 = HEAP8[$41>>0]|0;
         $phitmp26$i$i$i = $45 & 63;
         $52 = $43;$_0$0$i14$i$i$i = $phitmp26$i$i$i;$iter1$sroa$6$2 = $44;
        }
        $46 = $38 << 6;
        $47 = $_0$0$i14$i$i$i&255;
        $48 = $47 | $46;
        $49 = $32 << 12;
        $50 = $48 | $49;
        $51 = ($27&255)>(239);
        if ($51) {
         $53 = ($52|0)==($22|0);
         if ($53) {
          $_0$0$i9$i$i$i = 0;$iter1$sroa$6$3 = $iter1$sroa$6$2;
         } else {
          $54 = ((($52)) + 1|0);
          $55 = $54;
          $56 = HEAP8[$52>>0]|0;
          $phitmp27$i$i$i = $56 & 63;
          $_0$0$i9$i$i$i = $phitmp27$i$i$i;$iter1$sroa$6$3 = $55;
         }
         $57 = $32 << 18;
         $58 = $57 & 1835008;
         $59 = $48 << 6;
         $60 = $_0$0$i9$i$i$i&255;
         $61 = $59 | $58;
         $62 = $61 | $60;
         $_5$sroa$4$0$ph$i = $62;$iter1$sroa$6$4 = $iter1$sroa$6$3;
        } else {
         $_5$sroa$4$0$ph$i = $50;$iter1$sroa$6$4 = $iter1$sroa$6$2;
        }
       } else {
        $_5$sroa$4$0$ph$i = $39;$iter1$sroa$6$4 = $iter1$sroa$6$1;
       }
      }
      $71 = (($iter1$sroa$0$0213) - ($iter1$sroa$6$0214))|0;
      $72 = (($71) + ($iter1$sroa$6$4))|0;
      switch ($_5$sroa$4$0$ph$i|0) {
      case 9:  {
       $80 = 0;$83 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 116;
       break;
      }
      case 13:  {
       $80 = 0;$83 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 114;
       break;
      }
      case 10:  {
       $80 = 0;$83 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = 110;
       break;
      }
      case 34: case 39: case 92:  {
       $80 = 0;$83 = 0;$init_state$sroa$0$0$i$i = 2;$init_state$sroa$9$0$i$i = $_5$sroa$4$0$ph$i;
       break;
      }
      default: {
       $73 = (__ZN4core12char_private12is_printable17h52944e80288c09d4E($_5$sroa$4$0$ph$i)|0);
       if ($73) {
        $80 = 0;$83 = 0;$init_state$sroa$0$0$i$i = 1;$init_state$sroa$9$0$i$i = $_5$sroa$4$0$ph$i;
       } else {
        $74 = $_5$sroa$4$0$ph$i | 1;
        $75 = (Math_clz32(($74|0))|0);
        $76 = $75 >>> 2;
        $77 = $76 ^ 7;
        $80 = $77;$83 = 5;$init_state$sroa$0$0$i$i = 3;$init_state$sroa$9$0$i$i = $_5$sroa$4$0$ph$i;
       }
      }
      }
      HEAP32[$esc>>2] = $init_state$sroa$0$0$i$i;
      HEAP32[$_12$sroa$0$sroa$4$0$_12$sroa$0$0$$sroa_cast9$sroa_idx23$i$i>>2] = $init_state$sroa$9$0$i$i;
      $78 = $_12$sroa$0$sroa$5$0$_12$sroa$0$0$$sroa_cast9$sroa_idx$i$i;
      $79 = $78;
      HEAP32[$79>>2] = $80;
      $81 = (($78) + 4)|0;
      $82 = $81;
      HEAP32[$82>>2] = $83;
      __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hd17b23de60407903E($_5$i,$esc);
      $84 = HEAP32[$_5$i>>2]|0;
      $85 = $16;
      $86 = $85;
      $87 = HEAP32[$86>>2]|0;
      $88 = (($85) + 4)|0;
      $89 = $88;
      $90 = HEAP32[$89>>2]|0;
      $91 = $upper$i;
      $92 = $91;
      HEAP32[$92>>2] = $87;
      $93 = (($91) + 4)|0;
      $94 = $93;
      HEAP32[$94>>2] = $90;
      HEAP32[$_11$i>>2] = 1;
      HEAP32[$17>>2] = $84;
      HEAP32[$left_val$i>>2] = $upper$i;
      HEAP32[$right_val$i>>2] = $_11$i;
      $95 = ($87|0)==(1);
      $96 = ($90|0)==($84|0);
      $or$cond$i = $95 & $96;
      if (!($or$cond$i)) {
       label = 33;
       break L6;
      }
      $105 = ($84|0)==(1);
      if ($105) {
       $from$1 = $from$0215;
      } else {
       $106 = ($iter1$sroa$0$0213>>>0)<($from$0215>>>0);
       if ($106) {
        label = 42;
        break L6;
       }
       $113 = ($from$0215|0)==(0);
       $114 = ($val$sroa$5$0$copyload|0)==($from$0215|0);
       $or$cond$i3$i$i$i = $113 | $114;
       if (!($or$cond$i3$i$i$i)) {
        $115 = ($val$sroa$5$0$copyload>>>0)>($from$0215>>>0);
        if (!($115)) {
         label = 42;
         break L6;
        }
        $116 = (($23) + ($from$0215)|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = ($117<<24>>24)>(-65);
        if (!($118)) {
         label = 42;
         break L6;
        }
       }
       $107 = ($iter1$sroa$0$0213|0)==(0);
       $108 = ($iter1$sroa$0$0213|0)==($val$sroa$5$0$copyload|0);
       $or$cond$i$i$i$i = $107 | $108;
       if (!($or$cond$i$i$i$i)) {
        $109 = ($iter1$sroa$0$0213>>>0)<($val$sroa$5$0$copyload>>>0);
        if (!($109)) {
         label = 42;
         break L6;
        }
        $110 = (($23) + ($iter1$sroa$0$0213)|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = ($111<<24>>24)>(-65);
        if (!($112)) {
         label = 42;
         break L6;
        }
       }
       $119 = (($23) + ($from$0215)|0);
       $120 = (($iter1$sroa$0$0213) - ($from$0215))|0;
       $121 = (__ZN4core3fmt9Formatter9write_str17h3fbd15666f3f1562E($2,$119,$120)|0);
       $cond21 = ($121<<24>>24)==(0);
       if (!($cond21)) {
        label = 45;
        break L6;
       }
       ;HEAP32[$iter2>>2]=HEAP32[$esc>>2]|0;HEAP32[$iter2+4>>2]=HEAP32[$esc+4>>2]|0;HEAP32[$iter2+8>>2]=HEAP32[$esc+8>>2]|0;HEAP32[$iter2+12>>2]=HEAP32[$esc+12>>2]|0;
       while(1) {
        __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5142b9746fd1804dE($_78,$iter2);
        $122 = HEAP32[$_78>>2]|0;
        $cond22 = ($122|0)==(0);
        if ($cond22) {
         break;
        }
        $127 = HEAP32[$18>>2]|0;
        $128 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9ce5e71fb243cf53E($2,$127)|0);
        $cond23 = ($128<<24>>24)==(0);
        if (!($cond23)) {
         label = 50;
         break L6;
        }
       }
       $123 = ($_5$sroa$4$0$ph$i>>>0)<(128);
       $124 = ($_5$sroa$4$0$ph$i>>>0)<(2048);
       $125 = ($_5$sroa$4$0$ph$i>>>0)<(65536);
       $$$i$i = $125 ? 3 : 4;
       $$$$i$i = $124 ? 2 : $$$i$i;
       $$$$$i$i = $123 ? 1 : $$$$i$i;
       $126 = (($$$$$i$i) + ($iter1$sroa$0$0213))|0;
       $from$1 = $126;
      }
      $$cast$i = $iter1$sroa$6$4;
      $129 = ($$cast$i|0)==($22|0);
      if ($129) {
       break;
      } else {
       $$cast$i216 = $$cast$i;$from$0215 = $from$1;$iter1$sroa$0$0213 = $72;$iter1$sroa$6$0214 = $iter1$sroa$6$4;
      }
     }
     $63 = ($from$1|0)==(0);
     $64 = ($val$sroa$5$0$copyload|0)==($from$1|0);
     $or$cond$i$i$i$i87 = $63 | $64;
     if ($or$cond$i$i$i$i87) {
      $from$0$lcssa250 = $from$1;
      label = 21;
     } else {
      $65 = ($val$sroa$5$0$copyload>>>0)>($from$1>>>0);
      if (!($65)) {
       label = 24;
       break;
      }
      $66 = (($23) + ($from$1)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = ($67<<24>>24)>(-65);
      if ($68) {
       $$pre$phi$i$ph$i$iZ2D = $66;$from$0$lcssa251 = $from$1;
      } else {
       label = 24;
       break;
      }
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $$pre$i$i$i = (($23) + ($from$0$lcssa250)|0);
     $$pre$phi$i$ph$i$iZ2D = $$pre$i$i$i;$from$0$lcssa251 = $from$0$lcssa250;
    }
    $69 = (($val$sroa$5$0$copyload) - ($from$0$lcssa251))|0;
    $70 = (__ZN4core3fmt9Formatter9write_str17h3fbd15666f3f1562E($2,$$pre$phi$i$ph$i$iZ2D,$69)|0);
    $cond24 = ($70<<24>>24)==(0);
    if (!($cond24)) {
     break;
    }
    $130 = (($val$sroa$6$0$copyload) + ($val$sroa$7$0$copyload)|0);
    $iter3$sroa$0$0$in = $val$sroa$6$0$copyload;
    while(1) {
     $131 = ($iter3$sroa$0$0$in|0)==($130|0);
     if ($131) {
      break;
     }
     $132 = ((($iter3$sroa$0$0$in)) + 1|0);
     $133 = HEAP8[$iter3$sroa$0$0$in>>0]|0;
     HEAP8[$b>>0] = $133;
     HEAP32[$_143>>2] = $11;
     HEAP32[$12>>2] = (153);
     HEAP32[$_136>>2] = 3432;
     HEAP32[$13>>2] = 1;
     HEAP32[$_8$sroa$0$0$$sroa_idx$i>>2] = 3440;
     HEAP32[$_8$sroa$4$0$$sroa_idx2$i>>2] = 1;
     HEAP32[$14>>2] = $_143;
     HEAP32[$15>>2] = 1;
     $134 = (__ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE($2,$_136)|0);
     $cond26 = ($134<<24>>24)==(0);
     if ($cond26) {
      $iter3$sroa$0$0$in = $132;
     } else {
      break L6;
     }
    }
    __ZN104__LT_std_unicode__lossy__Utf8LossyChunksIter_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb342f66a0acc747dE($_23,$iter);
    $19 = HEAP32[$_23>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break L4;
    } else {
     $23 = $19;
    }
   }
   if ((label|0) == 24) {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($23,$val$sroa$5$0$copyload,$from$1,$val$sroa$5$0$copyload);
    // unreachable;
   }
   else if ((label|0) == 33) {
    $97 = $left_val$i;
    $98 = $right_val$i;
    HEAP32[$_26$i>>2] = $97;
    $99 = ((($_26$i)) + 4|0);
    HEAP32[$99>>2] = (152);
    $100 = ((($_26$i)) + 8|0);
    HEAP32[$100>>2] = $98;
    $101 = ((($_26$i)) + 12|0);
    HEAP32[$101>>2] = (152);
    HEAP32[$_19$i>>2] = 3392;
    $102 = ((($_19$i)) + 4|0);
    HEAP32[$102>>2] = 3;
    $_6$sroa$0$0$$sroa_idx$i$i = ((($_19$i)) + 8|0);
    HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
    $103 = ((($_19$i)) + 16|0);
    HEAP32[$103>>2] = $_26$i;
    $104 = ((($_19$i)) + 20|0);
    HEAP32[$104>>2] = 2;
    __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_19$i,3416);
    // unreachable;
   }
   else if ((label|0) == 42) {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($23,$val$sroa$5$0$copyload,$from$0215,$iter1$sroa$0$0213);
    // unreachable;
   }
   else if ((label|0) == 50) {
    label = 45;
   }
   if ((label|0) == 45) {
   }
   $_0$sroa$0$0 = 1;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 } while(0);
 $21 = (__ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9ce5e71fb243cf53E($2,34)|0);
 $_0$sroa$0$0 = $21;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfff261e267016050E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0$sroa$0$0$i = 0, $_23$i = 0, $builder$i = 0, $builder1$i = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_23$i = sp + 28|0;
 $builder1$i = sp + 16|0;
 $builder$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $cond$i = ($3|0)==(0);
 if ($cond$i) {
  __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder$i,$1,8227,4);
  $4 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder$i)|0);
  $_0$sroa$0$0$i = $4;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 } else {
  $5 = ((($2)) + 4|0);
  __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder1$i,$1,8231,4);
  HEAP32[$_23$i>>2] = $5;
  (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder1$i,$_23$i,2136)|0);
  $6 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder1$i)|0);
  $_0$sroa$0$0$i = $6;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h7d9fe66ae5620156E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h2cb9e3d088584a8cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17he923db6f4f3df2c4E($2,$1)|0);
 return ($3|0);
}
function __ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h56ce4bcfe7181aeaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0;
 var $builder8 = 0, $builder9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $builder9 = sp + 144|0;
 $builder8 = sp + 128|0;
 $builder7 = sp + 112|0;
 $builder6 = sp + 96|0;
 $builder5 = sp + 80|0;
 $builder4 = sp + 64|0;
 $builder3 = sp + 48|0;
 $builder2 = sp + 32|0;
 $builder1 = sp + 16|0;
 $builder = sp;
 $2 = HEAP32[$0>>2]|0;
 $trunc = $2&255;
 $trunc$clear = $trunc & 15;
 do {
  switch ($trunc$clear<<24>>24) {
  case 0:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder,$1,8235,14);
   $3 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder)|0);
   $_0$sroa$0$0 = $3;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 1:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder1,$1,8249,29);
   $4 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder1)|0);
   $_0$sroa$0$0 = $4;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 2:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder2,$1,8278,23);
   $5 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder2)|0);
   $_0$sroa$0$0 = $5;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 3:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder3,$1,8301,23);
   $6 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder3)|0);
   $_0$sroa$0$0 = $6;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 4:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder4,$1,8324,16);
   $7 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder4)|0);
   $_0$sroa$0$0 = $7;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 5:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder5,$1,8340,17);
   $8 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder5)|0);
   $_0$sroa$0$0 = $8;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 6:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder6,$1,8357,18);
   $9 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder6)|0);
   $_0$sroa$0$0 = $9;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 7:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder7,$1,8375,20);
   $10 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder7)|0);
   $_0$sroa$0$0 = $10;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  case 8:  {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder8,$1,8395,20);
   $11 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder8)|0);
   $_0$sroa$0$0 = $11;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
   break;
  }
  default: {
   __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($builder9,$1,8415,12);
   $12 = (__ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($builder9)|0);
   $_0$sroa$0$0 = $12;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_12 = sp + 24|0;
 $_5 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $index;
 $3 = $len;
 HEAP32[$_12>>2] = $2;
 $4 = ((($_12)) + 4|0);
 HEAP32[$4>>2] = (119);
 $5 = ((($_12)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_12)) + 12|0);
 HEAP32[$6>>2] = (119);
 HEAP32[$_5>>2] = 3508;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_12;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,3524);
 // unreachable;
}
function __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_14 = sp + 24|0;
 $_7 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $1;
 HEAP32[$len>>2] = $2;
 $3 = $len;
 $4 = $index;
 HEAP32[$_14>>2] = $3;
 $5 = ((($_14)) + 4|0);
 HEAP32[$5>>2] = (119);
 $6 = ((($_14)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_14)) + 12|0);
 HEAP32[$7>>2] = (119);
 HEAP32[$_7>>2] = 3492;
 $8 = ((($_7)) + 4|0);
 HEAP32[$8>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_7)) + 16|0);
 HEAP32[$9>>2] = $_14;
 $10 = ((($_7)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_7,$0);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hd28470d82864d8cfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 39;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (8767 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (8767 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (8767 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (8767 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_8 = 0, $_8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_8$byval_copy = sp + 24|0;
 $_8 = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 ;HEAP32[$_8>>2]=HEAP32[$0>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$0+20>>2]|0;
 ;HEAP32[$_8$byval_copy>>2]=HEAP32[$_8>>2]|0;HEAP32[$_8$byval_copy+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$_8$byval_copy+8>>2]=HEAP32[$_8+8>>2]|0;HEAP32[$_8$byval_copy+12>>2]=HEAP32[$_8+12>>2]|0;HEAP32[$_8$byval_copy+16>>2]=HEAP32[$_8+16>>2]|0;HEAP32[$_8$byval_copy+20>>2]=HEAP32[$_8+20>>2]|0;
 _rust_begin_unwind($_8$byval_copy,$2,$4,$6,$8);
 // unreachable;
}
function __ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$arith = 0, $$arith10 = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow11 = 0, $$overflow3 = 0, $$overflow7 = 0, $$sink = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i$i51 = 0, $$sink$i42 = 0, $$sink$sink$i$i = 0, $$sink$sink$i$i52 = 0, $$sink15$i$i = 0, $$sink15$i$i50 = 0, $$sink19$i = 0, $$sink19$i41 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_0$sroa$0$1 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i39 = 0, $align$0$off0$i39$clear = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i37 = 0, $cond13 = 0, $cond14 = 0, $cond14$i = 0, $cond14$i63 = 0;
 var $cond15 = 0, $cond15$i = 0, $cond15$i62 = 0, $cond17$i = 0, $cond17$i72 = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$022$i = 0, $extract$t$i = 0, $extract$t$i38 = 0, $fill$i = 0, $fill$i36 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i58 = 0, $iter1$sroa$0$0$i = 0, $iter1$sroa$0$0$i68 = 0, $len$1$i$i = 0, $len$1$i$i53 = 0, $len$2$i$i = 0, $len$2$i$i55 = 0, $prefix = 0;
 var $prefixed = 0, $sign = 0, $width$0 = 0, $width$1 = 0, $write_prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $fill$i36 = sp + 32|0;
 $fill$i = sp + 28|0;
 $write_prefix = sp + 16|0;
 $prefixed = sp + 36|0;
 $sign = sp + 8|0;
 $prefix = sp;
 HEAP32[$prefix>>2] = $2;
 $6 = ((($prefix)) + 4|0);
 HEAP32[$6>>2] = $3;
 HEAP32[$sign>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 if ($1) {
  $8 = $7 & 1;
  $9 = ($8|0)==(0);
  if ($9) {
   $width$0 = $5;
  } else {
   $$sink = 43;
   label = 3;
  }
 } else {
  $$sink = 45;
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$sign>>2] = 1;
  $10 = ((($sign)) + 4|0);
  HEAP32[$10>>2] = $$sink;
  $11 = (($5) + 1)|0;
  $width$0 = $11;
 }
 HEAP8[$prefixed>>0] = 0;
 $12 = $7 & 4;
 $13 = ($12|0)==(0);
 if ($13) {
  $width$1 = $width$0;
 } else {
  HEAP8[$prefixed>>0] = 1;
  $14 = (($2) + ($3)|0);
  $15 = ($3|0)==(0);
  if ($15) {
   $cont_bytes$0$lcssa$i = 0;
  } else {
   $17 = $2;$cont_bytes$022$i = 0;
   while(1) {
    $16 = ((($17)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 & -64;
    $20 = ($19<<24>>24)==(-128);
    $21 = $20&1;
    $22 = (($21) + ($cont_bytes$022$i))|0;
    $23 = ($16|0)==($14|0);
    if ($23) {
     $cont_bytes$0$lcssa$i = $22;
     break;
    } else {
     $17 = $16;$cont_bytes$022$i = $22;
    }
   }
  }
  $24 = (($width$0) + ($3))|0;
  $25 = (($24) - ($cont_bytes$0$lcssa$i))|0;
  $width$1 = $25;
 }
 HEAP32[$write_prefix>>2] = $sign;
 $26 = ((($write_prefix)) + 4|0);
 HEAP32[$26>>2] = $prefixed;
 $27 = ((($write_prefix)) + 8|0);
 HEAP32[$27>>2] = $prefix;
 $28 = ((($0)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $cond = ($29|0)==(0);
 do {
  if ($cond) {
   $30 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h6acabc645f5ef2adE($write_prefix,$0)|0);
   $cond15 = ($30<<24>>24)==(0);
   if ($cond15) {
    $101 = ((($0)) + 24|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($0)) + 28|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iiii[$106 & 255]($102,$4,$5)|0);
    $_0$sroa$0$0 = $107;
    label = 38;
   } else {
    label = 41;
   }
  } else {
   $35 = ((($0)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36>>>0)>($width$1>>>0);
   if (!($37)) {
    $31 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h6acabc645f5ef2adE($write_prefix,$0)|0);
    $cond14 = ($31<<24>>24)==(0);
    if (!($cond14)) {
     label = 41;
     break;
    }
    $108 = ((($0)) + 24|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($0)) + 28|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($111)) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (FUNCTION_TABLE_iiii[$113 & 255]($109,$4,$5)|0);
    $_0$sroa$0$0 = $114;
    label = 38;
    break;
   }
   $38 = $7 & 8;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = (($36) - ($width$1))|0;
    $41 = ((($0)) + 48|0);
    $extract$t$i38 = HEAP8[$41>>0]|0;
    $cond$i37 = ($extract$t$i38<<24>>24)==(3);
    $align$0$off0$i39 = $cond$i37 ? 1 : $extract$t$i38;
    $align$0$off0$i39$clear = $align$0$off0$i39 & 3;
    switch ($align$0$off0$i39$clear<<24>>24) {
    case 0:  {
     $$sink$i42 = $40;$$sink19$i41 = 0;
     break;
    }
    case 2:  {
     $80 = $40 >>> 1;
     $81 = (($40) + 1)|0;
     $82 = $81 >>> 1;
     $$sink$i42 = $82;$$sink19$i41 = $80;
     break;
    }
    default: {
     $$sink$i42 = 0;$$sink19$i41 = $40;
    }
    }
    HEAP32[$fill$i36>>2] = 0;
    $42 = ((($0)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43>>>0)<(128);
    if ($44) {
     $45 = $43&255;
     HEAP8[$fill$i36>>0] = $45;
     $len$2$i$i55 = 1;
    } else {
     $46 = ($43>>>0)<(2048);
     do {
      if ($46) {
       $47 = $43 >>> 6;
       $48 = $47 & 31;
       $49 = $48&255;
       $50 = $49 | -64;
       $$sink$i$i51 = $50;$$sink$sink$i$i52 = 1;$$sink15$i$i50 = $fill$i36;$len$1$i$i53 = 2;
      } else {
       $51 = ($43>>>0)<(65536);
       if ($51) {
        $52 = $43 >>> 12;
        $53 = $52 & 15;
        $54 = $53&255;
        $55 = $54 | -32;
        HEAP8[$fill$i36>>0] = $55;
        $56 = $43 >>> 6;
        $57 = $56 & 63;
        $58 = $57&255;
        $59 = ((($fill$i36)) + 1|0);
        $60 = $58 | -128;
        $$sink$i$i51 = $60;$$sink$sink$i$i52 = 2;$$sink15$i$i50 = $59;$len$1$i$i53 = 3;
        break;
       } else {
        $61 = $43 >>> 18;
        $62 = $61&255;
        $63 = $62 | -16;
        HEAP8[$fill$i36>>0] = $63;
        $64 = $43 >>> 12;
        $65 = $64 & 63;
        $66 = $65&255;
        $67 = ((($fill$i36)) + 1|0);
        $68 = $66 | -128;
        HEAP8[$67>>0] = $68;
        $69 = $43 >>> 6;
        $70 = $69 & 63;
        $71 = $70&255;
        $72 = ((($fill$i36)) + 2|0);
        $73 = $71 | -128;
        $$sink$i$i51 = $73;$$sink$sink$i$i52 = 3;$$sink15$i$i50 = $72;$len$1$i$i53 = 4;
        break;
       }
      }
     } while(0);
     HEAP8[$$sink15$i$i50>>0] = $$sink$i$i51;
     $74 = $43 & 63;
     $75 = $74&255;
     $76 = (($fill$i36) + ($$sink$sink$i$i52)|0);
     $77 = $75 | -128;
     HEAP8[$76>>0] = $77;
     $len$2$i$i55 = $len$1$i$i53;
    }
    $78 = ((($0)) + 24|0);
    $79 = ((($0)) + 28|0);
    $iter$sroa$0$0$i58 = 0;
    while(1) {
     $83 = ($iter$sroa$0$0$i58>>>0)<($$sink19$i41>>>0);
     if (!($83)) {
      break;
     }
     $$arith10 = (($iter$sroa$0$0$i58) + 1)|0;
     $$overflow11 = ($iter$sroa$0$0$i58>>>0)>(4294967294);
     if ($$overflow11) {
      break;
     }
     $90 = HEAP32[$78>>2]|0;
     $91 = HEAP32[$79>>2]|0;
     $92 = ((($91)) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (FUNCTION_TABLE_iiii[$93 & 255]($90,$fill$i36,$len$2$i$i55)|0);
     $cond14$i63 = ($94<<24>>24)==(0);
     if ($cond14$i63) {
      $iter$sroa$0$0$i58 = $$arith10;
     } else {
      label = 31;
      break;
     }
    }
    if ((label|0) == 31) {
     $_0$sroa$0$0 = 1;
     label = 38;
     break;
    }
    $84 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h6acabc645f5ef2adE($write_prefix,$0)|0);
    $cond$i$i = ($84<<24>>24)==(0);
    if ($cond$i$i) {
     $85 = HEAP32[$78>>2]|0;
     $86 = HEAP32[$79>>2]|0;
     $87 = ((($86)) + 12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_iiii[$88 & 255]($85,$4,$5)|0);
     $cond15$i62 = ($89<<24>>24)==(0);
     if ($cond15$i62) {
      $iter1$sroa$0$0$i68 = 0;
      while(1) {
       $95 = ($iter1$sroa$0$0$i68>>>0)<($$sink$i42>>>0);
       if (!($95)) {
        label = 35;
        break;
       }
       $$arith6 = (($iter1$sroa$0$0$i68) + 1)|0;
       $$overflow7 = ($iter1$sroa$0$0$i68>>>0)>(4294967294);
       if ($$overflow7) {
        label = 35;
        break;
       }
       $96 = HEAP32[$78>>2]|0;
       $97 = HEAP32[$79>>2]|0;
       $98 = ((($97)) + 12|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (FUNCTION_TABLE_iiii[$99 & 255]($96,$fill$i36,$len$2$i$i55)|0);
       $cond17$i72 = ($100<<24>>24)==(0);
       if ($cond17$i72) {
        $iter1$sroa$0$0$i68 = $$arith6;
       } else {
        label = 37;
        break;
       }
      }
      if ((label|0) == 35) {
       $_0$sroa$0$0 = 0;
       label = 38;
       break;
      }
      else if ((label|0) == 37) {
       $_0$sroa$0$0 = 1;
       label = 38;
       break;
      }
     }
    }
    $_0$sroa$0$0 = 1;
    label = 38;
    break;
   } else {
    $32 = ((($0)) + 4|0);
    HEAP32[$32>>2] = 48;
    $33 = ((($0)) + 48|0);
    HEAP8[$33>>0] = 1;
    $34 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h6acabc645f5ef2adE($write_prefix,$0)|0);
    $cond13 = ($34<<24>>24)==(0);
    if (!($cond13)) {
     label = 41;
     break;
    }
    $115 = (($36) - ($width$1))|0;
    $extract$t$i = HEAP8[$33>>0]|0;
    $cond$i = ($extract$t$i<<24>>24)==(3);
    $align$0$off0$i = $cond$i ? 1 : $extract$t$i;
    $align$0$off0$i$clear = $align$0$off0$i & 3;
    switch ($align$0$off0$i$clear<<24>>24) {
    case 0:  {
     $$sink$i = $115;$$sink19$i = 0;
     break;
    }
    case 2:  {
     $153 = $115 >>> 1;
     $154 = (($115) + 1)|0;
     $155 = $154 >>> 1;
     $$sink$i = $155;$$sink19$i = $153;
     break;
    }
    default: {
     $$sink$i = 0;$$sink19$i = $115;
    }
    }
    HEAP32[$fill$i>>2] = 0;
    $116 = HEAP32[$32>>2]|0;
    $117 = ($116>>>0)<(128);
    if ($117) {
     $118 = $116&255;
     HEAP8[$fill$i>>0] = $118;
     $len$2$i$i = 1;
    } else {
     $119 = ($116>>>0)<(2048);
     do {
      if ($119) {
       $120 = $116 >>> 6;
       $121 = $120 & 31;
       $122 = $121&255;
       $123 = $122 | -64;
       $$sink$i$i = $123;$$sink$sink$i$i = 1;$$sink15$i$i = $fill$i;$len$1$i$i = 2;
      } else {
       $124 = ($116>>>0)<(65536);
       if ($124) {
        $125 = $116 >>> 12;
        $126 = $125 & 15;
        $127 = $126&255;
        $128 = $127 | -32;
        HEAP8[$fill$i>>0] = $128;
        $129 = $116 >>> 6;
        $130 = $129 & 63;
        $131 = $130&255;
        $132 = ((($fill$i)) + 1|0);
        $133 = $131 | -128;
        $$sink$i$i = $133;$$sink$sink$i$i = 2;$$sink15$i$i = $132;$len$1$i$i = 3;
        break;
       } else {
        $134 = $116 >>> 18;
        $135 = $134&255;
        $136 = $135 | -16;
        HEAP8[$fill$i>>0] = $136;
        $137 = $116 >>> 12;
        $138 = $137 & 63;
        $139 = $138&255;
        $140 = ((($fill$i)) + 1|0);
        $141 = $139 | -128;
        HEAP8[$140>>0] = $141;
        $142 = $116 >>> 6;
        $143 = $142 & 63;
        $144 = $143&255;
        $145 = ((($fill$i)) + 2|0);
        $146 = $144 | -128;
        $$sink$i$i = $146;$$sink$sink$i$i = 3;$$sink15$i$i = $145;$len$1$i$i = 4;
        break;
       }
      }
     } while(0);
     HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
     $147 = $116 & 63;
     $148 = $147&255;
     $149 = (($fill$i) + ($$sink$sink$i$i)|0);
     $150 = $148 | -128;
     HEAP8[$149>>0] = $150;
     $len$2$i$i = $len$1$i$i;
    }
    $151 = ((($0)) + 24|0);
    $152 = ((($0)) + 28|0);
    $iter$sroa$0$0$i = 0;
    while(1) {
     $156 = ($iter$sroa$0$0$i>>>0)<($$sink19$i>>>0);
     if (!($156)) {
      break;
     }
     $$arith2 = (($iter$sroa$0$0$i) + 1)|0;
     $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294);
     if ($$overflow3) {
      break;
     }
     $162 = HEAP32[$151>>2]|0;
     $163 = HEAP32[$152>>2]|0;
     $164 = ((($163)) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (FUNCTION_TABLE_iiii[$165 & 255]($162,$fill$i,$len$2$i$i)|0);
     $cond14$i = ($166<<24>>24)==(0);
     if ($cond14$i) {
      $iter$sroa$0$0$i = $$arith2;
     } else {
      label = 59;
      break;
     }
    }
    if ((label|0) == 59) {
     $_0$sroa$0$0 = 1;
     label = 38;
     break;
    }
    $157 = HEAP32[$151>>2]|0;
    $158 = HEAP32[$152>>2]|0;
    $159 = ((($158)) + 12|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (FUNCTION_TABLE_iiii[$160 & 255]($157,$4,$5)|0);
    $cond15$i = ($161<<24>>24)==(0);
    if ($cond15$i) {
     $iter1$sroa$0$0$i = 0;
    } else {
     $_0$sroa$0$0 = 1;
     label = 38;
     break;
    }
    while(1) {
     $167 = ($iter1$sroa$0$0$i>>>0)<($$sink$i>>>0);
     if (!($167)) {
      label = 63;
      break;
     }
     $$arith = (($iter1$sroa$0$0$i) + 1)|0;
     $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294);
     if ($$overflow) {
      label = 63;
      break;
     }
     $168 = HEAP32[$151>>2]|0;
     $169 = HEAP32[$152>>2]|0;
     $170 = ((($169)) + 12|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (FUNCTION_TABLE_iiii[$171 & 255]($168,$fill$i,$len$2$i$i)|0);
     $cond17$i = ($172<<24>>24)==(0);
     if ($cond17$i) {
      $iter1$sroa$0$0$i = $$arith;
     } else {
      label = 65;
      break;
     }
    }
    if ((label|0) == 63) {
     $_0$sroa$0$0 = 0;
     label = 38;
     break;
    }
    else if ((label|0) == 65) {
     $_0$sroa$0$0 = 1;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $_0$sroa$0$1 = $_0$sroa$0$0;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 else if ((label|0) == 41) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17h6acabc645f5ef2adE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_17 = 0, $cond = 0, $cond4 = 0, $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $cond = ($3|0)==(1);
 if ($cond) {
  $4 = ((($2)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($1)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($1)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$_17>>2] = 0;
  $10 = ($5>>>0)<(128);
  if ($10) {
   $11 = $5&255;
   HEAP8[$_17>>0] = $11;
   $len$2$i = 1;
  } else {
   $12 = ($5>>>0)<(2048);
   do {
    if ($12) {
     $13 = $5 >>> 6;
     $14 = $13 & 31;
     $15 = $14&255;
     $16 = $15 | -64;
     $$sink$i = $16;$$sink$sink$i = 1;$$sink15$i = $_17;$len$1$i = 2;
    } else {
     $17 = ($5>>>0)<(65536);
     if ($17) {
      $18 = $5 >>> 12;
      $19 = $18 & 15;
      $20 = $19&255;
      $21 = $20 | -32;
      HEAP8[$_17>>0] = $21;
      $22 = $5 >>> 6;
      $23 = $22 & 63;
      $24 = $23&255;
      $25 = ((($_17)) + 1|0);
      $26 = $24 | -128;
      $$sink$i = $26;$$sink$sink$i = 2;$$sink15$i = $25;$len$1$i = 3;
      break;
     } else {
      $27 = $5 >>> 18;
      $28 = $27&255;
      $29 = $28 | -16;
      HEAP8[$_17>>0] = $29;
      $30 = $5 >>> 12;
      $31 = $30 & 63;
      $32 = $31&255;
      $33 = ((($_17)) + 1|0);
      $34 = $32 | -128;
      HEAP8[$33>>0] = $34;
      $35 = $5 >>> 6;
      $36 = $35 & 63;
      $37 = $36&255;
      $38 = ((($_17)) + 2|0);
      $39 = $37 | -128;
      $$sink$i = $39;$$sink$sink$i = 3;$$sink15$i = $38;$len$1$i = 4;
      break;
     }
    }
   } while(0);
   HEAP8[$$sink15$i>>0] = $$sink$i;
   $40 = $5 & 63;
   $41 = $40&255;
   $42 = (($_17) + ($$sink$sink$i)|0);
   $43 = $41 | -128;
   HEAP8[$42>>0] = $43;
   $len$2$i = $len$1$i;
  }
  $44 = ((($9)) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_iiii[$45 & 255]($7,$_17,$len$2$i)|0);
  $cond4 = ($46<<24>>24)==(0);
  if (!($cond4)) {
   $_0$sroa$0$0 = 1;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $47 = ((($0)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $51 = ((($1)) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($1)) + 28|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($0)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($56)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($54)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_iiii[$61 & 255]($52,$57,$59)|0);
 $_0$sroa$0$0 = $62;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN4core9panicking5panic17h8ce57b1f932a0889E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_18 = 0;
 var $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_18 = sp + 32|0;
 $_11 = sp + 24|0;
 $_7 = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$_11>>2] = $1;
 $12 = ((($_11)) + 4|0);
 HEAP32[$12>>2] = $3;
 HEAP32[$_7>>2] = $_11;
 $13 = ((($_7)) + 4|0);
 HEAP32[$13>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $14 = ((($_7)) + 16|0);
 HEAP32[$14>>2] = 12908;
 $15 = ((($_7)) + 20|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$_18>>2] = $5;
 $16 = ((($_18)) + 4|0);
 HEAP32[$16>>2] = $7;
 $17 = ((($_18)) + 8|0);
 HEAP32[$17>>2] = $9;
 $18 = ((($_18)) + 12|0);
 HEAP32[$18>>2] = $11;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_7,$_18);
 // unreachable;
}
function __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $end = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_12 = sp + 24|0;
 $_5 = sp;
 $end = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = $index;
 $3 = $end;
 HEAP32[$_12>>2] = $2;
 $4 = ((($_12)) + 4|0);
 HEAP32[$4>>2] = (119);
 $5 = ((($_12)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_12)) + 12|0);
 HEAP32[$6>>2] = (119);
 HEAP32[$_5>>2] = 3540;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_12;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_5,3556);
 // unreachable;
}
function __ZN4core3fmt9Formatter3pad17h4be370917d619fddE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$arith2 = 0, $$cast$i$i$i$i = 0, $$cast$i$i20$i$i = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $$sink19$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_18$sroa$0$0 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $cond = 0, $cond$i = 0, $cond14$i = 0, $cond15$i = 0, $cond17$i = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$0$lcssa$i33 = 0, $cont_bytes$022$i = 0, $cont_bytes$022$i34 = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0, $iter1$sroa$0$0$i = 0, $len$1$i$i = 0;
 var $len$2$i$i = 0, $n$019$i$i = 0, $or$cond = 0, $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fill$i = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($0)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_iiii[$14 & 255]($10,$1,$2)|0);
   $_0$sroa$0$0 = $15;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  } else {
   label = 6;
  }
 } else {
  $cond = ($7|0)==(1);
  if ($cond) {
   label = 6;
  } else {
   $69 = $2;
  }
 }
 if ((label|0) == 6) {
  $16 = ((($0)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($1) + ($2)|0);
  $19 = ($17|0)==(0);
  $20 = ($2|0)==(0);
  $or$cond = $19 | $20;
  L8: do {
   if ($or$cond) {
    $61 = 0;
   } else {
    $21 = $1;
    $$cast$i$i20$i$i = $1;$23 = $21;$_18$sroa$0$0 = 0;$n$019$i$i = $17;
    while(1) {
     $28 = ((($$cast$i$i20$i$i)) + 1|0);
     $29 = HEAP8[$$cast$i$i20$i$i>>0]|0;
     $30 = ($29<<24>>24)>(-1);
     $31 = $28;
     if ($30) {
      $25 = $31;
     } else {
      $32 = ($28|0)==($18|0);
      $33 = ((($$cast$i$i20$i$i)) + 2|0);
      $34 = $33;
      $35 = $32 ? $31 : $34;
      $36 = $32 ? $18 : $33;
      $37 = ($29&255)>(223);
      if ($37) {
       $38 = ($36|0)==($18|0);
       $39 = ((($36)) + 1|0);
       $40 = $39;
       $41 = $38 ? $35 : $40;
       $42 = $38 ? $18 : $39;
       $43 = ($29&255)>(239);
       if ($43) {
        $44 = ($42|0)==($18|0);
        $45 = ((($42)) + 1|0);
        $46 = $45;
        $47 = $44 ? $41 : $46;
        $25 = $47;
       } else {
        $25 = $41;
       }
      } else {
       $25 = $35;
      }
     }
     $48 = ($n$019$i$i|0)==(0);
     if ($48) {
      break;
     }
     $22 = (($_18$sroa$0$0) - ($23))|0;
     $24 = (($22) + ($25))|0;
     $26 = (($n$019$i$i) + -1)|0;
     $$cast$i$i$i$i = $25;
     $27 = ($$cast$i$i$i$i|0)==($18|0);
     if ($27) {
      $61 = $2;
      break L8;
     } else {
      $$cast$i$i20$i$i = $$cast$i$i$i$i;$23 = $25;$_18$sroa$0$0 = $24;$n$019$i$i = $26;
     }
    }
    $49 = ($_18$sroa$0$0|0)==(0);
    $50 = ($_18$sroa$0$0|0)==($2|0);
    $or$cond$i$i$i$i = $49 | $50;
    if ($or$cond$i$i$i$i) {
     $61 = $_18$sroa$0$0;
    } else {
     $51 = ($_18$sroa$0$0>>>0)<($2>>>0);
     if (!($51)) {
      __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($1,$2,0,$_18$sroa$0$0);
      // unreachable;
     }
     $52 = (($1) + ($_18$sroa$0$0)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = ($53<<24>>24)>(-65);
     if ($54) {
      $61 = $_18$sroa$0$0;
     } else {
      __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($1,$2,0,$_18$sroa$0$0);
      // unreachable;
     }
    }
   }
  } while(0);
  if ($5) {
   $55 = ((($0)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($0)) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $62 = (FUNCTION_TABLE_iiii[$60 & 255]($56,$1,$61)|0);
   $_0$sroa$0$0 = $62;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  } else {
   $69 = $61;
  }
 }
 $71 = ((($0)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($1) + ($69)|0);
 $74 = ($69|0)==(0);
 if ($74) {
  $cont_bytes$0$lcssa$i33 = 0;
 } else {
  $76 = $1;$cont_bytes$022$i34 = 0;
  while(1) {
   $75 = ((($76)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 & -64;
   $79 = ($78<<24>>24)==(-128);
   $80 = $79&1;
   $81 = (($80) + ($cont_bytes$022$i34))|0;
   $82 = ($75|0)==($73|0);
   if ($82) {
    $cont_bytes$0$lcssa$i33 = $81;
    break;
   } else {
    $76 = $75;$cont_bytes$022$i34 = $81;
   }
  }
 }
 $83 = (($69) - ($cont_bytes$0$lcssa$i33))|0;
 $84 = ($83>>>0)<($72>>>0);
 if (!($84)) {
  $63 = ((($0)) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 28|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $70 = (FUNCTION_TABLE_iiii[$68 & 255]($64,$1,$69)|0);
  $_0$sroa$0$0 = $70;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 if ($74) {
  $cont_bytes$0$lcssa$i = 0;
 } else {
  $86 = $1;$cont_bytes$022$i = 0;
  while(1) {
   $85 = ((($86)) + 1|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87 & -64;
   $89 = ($88<<24>>24)==(-128);
   $90 = $89&1;
   $91 = (($90) + ($cont_bytes$022$i))|0;
   $92 = ($85|0)==($73|0);
   if ($92) {
    $cont_bytes$0$lcssa$i = $91;
    break;
   } else {
    $86 = $85;$cont_bytes$022$i = $91;
   }
  }
 }
 $93 = (($cont_bytes$0$lcssa$i) - ($69))|0;
 $94 = (($93) + ($72))|0;
 $95 = ((($0)) + 48|0);
 $extract$t$i = HEAP8[$95>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $$sink$i = $94;$$sink19$i = 0;
  break;
 }
 case 2:  {
  $134 = $94 >>> 1;
  $135 = (($94) + 1)|0;
  $136 = $135 >>> 1;
  $$sink$i = $136;$$sink19$i = $134;
  break;
 }
 default: {
  $$sink$i = 0;$$sink19$i = $94;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $96 = ((($0)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97>>>0)<(128);
 if ($98) {
  $99 = $97&255;
  HEAP8[$fill$i>>0] = $99;
  $len$2$i$i = 1;
 } else {
  $100 = ($97>>>0)<(2048);
  do {
   if ($100) {
    $101 = $97 >>> 6;
    $102 = $101 & 31;
    $103 = $102&255;
    $104 = $103 | -64;
    $$sink$i$i = $104;$$sink$sink$i$i = 1;$$sink15$i$i = $fill$i;$len$1$i$i = 2;
   } else {
    $105 = ($97>>>0)<(65536);
    if ($105) {
     $106 = $97 >>> 12;
     $107 = $106 & 15;
     $108 = $107&255;
     $109 = $108 | -32;
     HEAP8[$fill$i>>0] = $109;
     $110 = $97 >>> 6;
     $111 = $110 & 63;
     $112 = $111&255;
     $113 = ((($fill$i)) + 1|0);
     $114 = $112 | -128;
     $$sink$i$i = $114;$$sink$sink$i$i = 2;$$sink15$i$i = $113;$len$1$i$i = 3;
     break;
    } else {
     $115 = $97 >>> 18;
     $116 = $115&255;
     $117 = $116 | -16;
     HEAP8[$fill$i>>0] = $117;
     $118 = $97 >>> 12;
     $119 = $118 & 63;
     $120 = $119&255;
     $121 = ((($fill$i)) + 1|0);
     $122 = $120 | -128;
     HEAP8[$121>>0] = $122;
     $123 = $97 >>> 6;
     $124 = $123 & 63;
     $125 = $124&255;
     $126 = ((($fill$i)) + 2|0);
     $127 = $125 | -128;
     $$sink$i$i = $127;$$sink$sink$i$i = 3;$$sink15$i$i = $126;$len$1$i$i = 4;
     break;
    }
   }
  } while(0);
  HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
  $128 = $97 & 63;
  $129 = $128&255;
  $130 = (($fill$i) + ($$sink$sink$i$i)|0);
  $131 = $129 | -128;
  HEAP8[$130>>0] = $131;
  $len$2$i$i = $len$1$i$i;
 }
 $132 = ((($0)) + 24|0);
 $133 = ((($0)) + 28|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $137 = ($iter$sroa$0$0$i>>>0)<($$sink19$i>>>0);
  if (!($137)) {
   break;
  }
  $$arith2 = (($iter$sroa$0$0$i) + 1)|0;
  $$overflow3 = ($iter$sroa$0$0$i>>>0)>(4294967294);
  if ($$overflow3) {
   break;
  }
  $143 = HEAP32[$132>>2]|0;
  $144 = HEAP32[$133>>2]|0;
  $145 = ((($144)) + 12|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (FUNCTION_TABLE_iiii[$146 & 255]($143,$fill$i,$len$2$i$i)|0);
  $cond14$i = ($147<<24>>24)==(0);
  if ($cond14$i) {
   $iter$sroa$0$0$i = $$arith2;
  } else {
   label = 42;
   break;
  }
 }
 if ((label|0) == 42) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $138 = HEAP32[$132>>2]|0;
 $139 = HEAP32[$133>>2]|0;
 $140 = ((($139)) + 12|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (FUNCTION_TABLE_iiii[$141 & 255]($138,$1,$69)|0);
 $cond15$i = ($142<<24>>24)==(0);
 if ($cond15$i) {
  $iter1$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 while(1) {
  $148 = ($iter1$sroa$0$0$i>>>0)<($$sink$i>>>0);
  if (!($148)) {
   label = 46;
   break;
  }
  $$arith = (($iter1$sroa$0$0$i) + 1)|0;
  $$overflow = ($iter1$sroa$0$0$i>>>0)>(4294967294);
  if ($$overflow) {
   label = 46;
   break;
  }
  $149 = HEAP32[$132>>2]|0;
  $150 = HEAP32[$133>>2]|0;
  $151 = ((($150)) + 12|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (FUNCTION_TABLE_iiii[$152 & 255]($149,$fill$i,$len$2$i$i)|0);
  $cond17$i = ($153<<24>>24)==(0);
  if ($cond17$i) {
   $iter1$sroa$0$0$i = $$arith;
  } else {
   label = 48;
   break;
  }
 }
 if ((label|0) == 46) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 48) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$lcssa = 0, $$lcssa76$ph = 0, $$pre$i$i = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink$i = 0, $$sink13 = 0, $$sink6$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i = 0, $_0$0$i20$i$i = 0, $_0$0$i9$i$i = 0, $_109$sroa$4$0$ph = 0;
 var $_123 = 0, $_130 = 0, $_31 = 0, $_38 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i23 = 0, $_6$sroa$0$0$$sroa_idx$i24 = 0, $_62 = 0, $_69 = 0, $begin = 0, $ch = 0, $char_range = 0, $char_start$078 = 0, $ellipsis = 0, $end = 0, $index = 0, $max$0$i$lcssa$ph = 0, $max$0$i82 = 0, $oob_index = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i25 = 0, $or$cond$i2577 = 0, $phitmp$i$i = 0, $phitmp26$i$i = 0, $phitmp27$i$i = 0, $s_trunc = 0, $storemerge = 0, $storemerge22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_130 = sp + 152|0;
 $_123 = sp + 128|0;
 $char_range = sp + 120|0;
 $ch = sp + 208|0;
 $index = sp + 204|0;
 $_69 = sp + 88|0;
 $_62 = sp + 64|0;
 $_38 = sp + 40|0;
 $_31 = sp + 16|0;
 $oob_index = sp + 200|0;
 $ellipsis = sp + 8|0;
 $s_trunc = sp;
 $end = sp + 196|0;
 $begin = sp + 192|0;
 HEAP32[$begin>>2] = $2;
 HEAP32[$end>>2] = $3;
 $4 = ($1>>>0)<(257);
 if ($4) {
  $$sink$i = $1;$$sink6$i = 0;
 } else {
  $max$0$i82 = 256;
  while(1) {
   $5 = ($max$0$i82>>>0)<($1>>>0);
   if ($5) {
    $6 = (($0) + ($max$0$i82)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)>(-65);
    if ($8) {
     $$lcssa76$ph = 0;$max$0$i$lcssa$ph = $max$0$i82;
     break;
    }
   }
   $14 = (($max$0$i82) + -1)|0;
   $15 = ($14|0)==(0);
   $16 = ($14|0)==($1|0);
   $or$cond$i$i = $15 | $16;
   if ($or$cond$i$i) {
    $$lcssa76$ph = $15;$max$0$i$lcssa$ph = $14;
    break;
   } else {
    $max$0$i82 = $14;
   }
  }
  $9 = ($max$0$i$lcssa$ph|0)==($1|0);
  $or$cond$i$i$i$i = $$lcssa76$ph | $9;
  if ($or$cond$i$i$i$i) {
   $$sink$i = $max$0$i$lcssa$ph;$$sink6$i = 1;
  } else {
   $10 = ($max$0$i$lcssa$ph>>>0)<($1>>>0);
   if (!($10)) {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,0,$max$0$i$lcssa$ph);
    // unreachable;
   }
   $11 = (($0) + ($max$0$i$lcssa$ph)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)>(-65);
   if ($13) {
    $$sink$i = $max$0$i$lcssa$ph;$$sink6$i = 1;
   } else {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,0,$max$0$i$lcssa$ph);
    // unreachable;
   }
  }
 }
 $17 = $0;
 HEAP32[$s_trunc>>2] = $17;
 $18 = ((($s_trunc)) + 4|0);
 HEAP32[$18>>2] = $$sink$i;
 $$sink13 = $$sink6$i ? 9043 : 13480;
 $$sink = $$sink6$i ? 5 : 0;
 HEAP32[$ellipsis>>2] = $$sink13;
 $19 = ((($ellipsis)) + 4|0);
 HEAP32[$19>>2] = $$sink;
 $20 = ($2>>>0)>($1>>>0);
 $21 = ($3>>>0)>($1>>>0);
 $or$cond = $20 | $21;
 if ($or$cond) {
  $storemerge22 = $20 ? $2 : $3;
  HEAP32[$oob_index>>2] = $storemerge22;
  $22 = $oob_index;
  $23 = $s_trunc;
  $24 = $ellipsis;
  HEAP32[$_38>>2] = $22;
  $25 = ((($_38)) + 4|0);
  HEAP32[$25>>2] = (119);
  $26 = ((($_38)) + 8|0);
  HEAP32[$26>>2] = $23;
  $27 = ((($_38)) + 12|0);
  HEAP32[$27>>2] = (154);
  $28 = ((($_38)) + 16|0);
  HEAP32[$28>>2] = $24;
  $29 = ((($_38)) + 20|0);
  HEAP32[$29>>2] = (154);
  HEAP32[$_31>>2] = 3572;
  $30 = ((($_31)) + 4|0);
  HEAP32[$30>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i23 = ((($_31)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i23>>2] = 0;
  $31 = ((($_31)) + 16|0);
  HEAP32[$31>>2] = $_38;
  $32 = ((($_31)) + 20|0);
  HEAP32[$32>>2] = 3;
  __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_31,3596);
  // unreachable;
 }
 $33 = ($2>>>0)>($3>>>0);
 if ($33) {
  $34 = $begin;
  $35 = $end;
  $36 = $s_trunc;
  $37 = $ellipsis;
  HEAP32[$_69>>2] = $34;
  $38 = ((($_69)) + 4|0);
  HEAP32[$38>>2] = (119);
  $39 = ((($_69)) + 8|0);
  HEAP32[$39>>2] = $35;
  $40 = ((($_69)) + 12|0);
  HEAP32[$40>>2] = (119);
  $41 = ((($_69)) + 16|0);
  HEAP32[$41>>2] = $36;
  $42 = ((($_69)) + 20|0);
  HEAP32[$42>>2] = (154);
  $43 = ((($_69)) + 24|0);
  HEAP32[$43>>2] = $37;
  $44 = ((($_69)) + 28|0);
  HEAP32[$44>>2] = (154);
  HEAP32[$_62>>2] = 3612;
  $45 = ((($_62)) + 4|0);
  HEAP32[$45>>2] = 4;
  $_6$sroa$0$0$$sroa_idx$i24 = ((($_62)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i24>>2] = 0;
  $46 = ((($_62)) + 16|0);
  HEAP32[$46>>2] = $_69;
  $47 = ((($_62)) + 20|0);
  HEAP32[$47>>2] = 4;
  __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_62,3644);
  // unreachable;
 }
 $48 = ($2|0)==(0);
 $49 = ($2|0)==($1|0);
 $or$cond$i = $48 | $49;
 if ($or$cond$i) {
  label = 16;
 } else {
  $50 = ($2>>>0)<($1>>>0);
  if ($50) {
   $51 = (($0) + ($2)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = ($52<<24>>24)>(-65);
   if ($53) {
    label = 16;
   } else {
    $storemerge = $2;
   }
  } else {
   $storemerge = $2;
  }
 }
 if ((label|0) == 16) {
  $storemerge = $3;
 }
 HEAP32[$index>>2] = $storemerge;
 $54 = ($storemerge|0)==(0);
 $55 = ($storemerge|0)==($1|0);
 $or$cond$i2577 = $54 | $55;
 L26: do {
  if ($or$cond$i2577) {
   $$lcssa = $54;$60 = $storemerge;
  } else {
   $char_start$078 = $storemerge;
   while(1) {
    $56 = ($char_start$078>>>0)<($1>>>0);
    if ($56) {
     $57 = (($0) + ($char_start$078)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($58<<24>>24)>(-65);
     if ($59) {
      $$lcssa = 0;$60 = $char_start$078;
      break L26;
     }
    }
    $126 = (($char_start$078) + -1)|0;
    $127 = ($126|0)==(0);
    $128 = ($126|0)==($1|0);
    $or$cond$i25 = $127 | $128;
    if ($or$cond$i25) {
     $$lcssa = $127;$60 = $126;
     break;
    } else {
     $char_start$078 = $126;
    }
   }
  }
 } while(0);
 $61 = ($60|0)==($1|0);
 $or$cond$i$i$i = $$lcssa | $61;
 if ($or$cond$i$i$i) {
  $$pre$i$i = (($0) + ($60)|0);
  $$pre$phiZ2D = $$pre$i$i;
 } else {
  $62 = ($60>>>0)<($1>>>0);
  if (!($62)) {
   __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$60,$1);
   // unreachable;
  }
  $63 = (($0) + ($60)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)>(-65);
  if ($65) {
   $$pre$phiZ2D = $63;
  } else {
   __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$60,$1);
   // unreachable;
  }
 }
 $66 = (($0) + ($60)|0);
 $67 = (($1) - ($60))|0;
 $68 = (($66) + ($67)|0);
 $69 = ($$pre$phiZ2D|0)==($68|0);
 if ($69) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3660);
  // unreachable;
 }
 $72 = (($0) + ($60)|0);
 $73 = ((($72)) + 1|0);
 $71 = HEAP8[$$pre$phiZ2D>>0]|0;
 $74 = ($71<<24>>24)>(-1);
 if ($74) {
  $70 = $71&255;
  $_109$sroa$4$0$ph = $70;
 } else {
  $75 = $71 & 31;
  $76 = $75&255;
  $77 = ($73|0)==($68|0);
  if ($77) {
   $85 = $68;$_0$0$i20$i$i = 0;
  } else {
   $78 = (($0) + ($60)|0);
   $79 = ((($78)) + 2|0);
   $80 = HEAP8[$73>>0]|0;
   $phitmp$i$i = $80 & 63;
   $85 = $79;$_0$0$i20$i$i = $phitmp$i$i;
  }
  $81 = $76 << 6;
  $82 = $_0$0$i20$i$i&255;
  $83 = $82 | $81;
  $84 = ($71&255)>(223);
  if ($84) {
   $86 = ($85|0)==($68|0);
   if ($86) {
    $95 = $68;$_0$0$i14$i$i = 0;
   } else {
    $87 = ((($85)) + 1|0);
    $88 = HEAP8[$85>>0]|0;
    $phitmp26$i$i = $88 & 63;
    $95 = $87;$_0$0$i14$i$i = $phitmp26$i$i;
   }
   $89 = $82 << 6;
   $90 = $_0$0$i14$i$i&255;
   $91 = $90 | $89;
   $92 = $76 << 12;
   $93 = $91 | $92;
   $94 = ($71&255)>(239);
   if ($94) {
    $96 = ($95|0)==($68|0);
    if ($96) {
     $_0$0$i9$i$i = 0;
    } else {
     $97 = HEAP8[$95>>0]|0;
     $phitmp27$i$i = $97 & 63;
     $_0$0$i9$i$i = $phitmp27$i$i;
    }
    $98 = $76 << 18;
    $99 = $98 & 1835008;
    $100 = $91 << 6;
    $101 = $_0$0$i9$i$i&255;
    $102 = $100 | $99;
    $103 = $102 | $101;
    $_109$sroa$4$0$ph = $103;
   } else {
    $_109$sroa$4$0$ph = $93;
   }
  } else {
   $_109$sroa$4$0$ph = $83;
  }
 }
 HEAP32[$ch>>2] = $_109$sroa$4$0$ph;
 $104 = ($_109$sroa$4$0$ph>>>0)<(128);
 $105 = ($_109$sroa$4$0$ph>>>0)<(2048);
 $106 = ($_109$sroa$4$0$ph>>>0)<(65536);
 $$$i = $106 ? 3 : 4;
 $$$$i = $105 ? 2 : $$$i;
 $$$$$i = $104 ? 1 : $$$$i;
 $107 = (($$$$$i) + ($60))|0;
 HEAP32[$char_range>>2] = $60;
 $108 = ((($char_range)) + 4|0);
 HEAP32[$108>>2] = $107;
 $109 = $index;
 $110 = $ch;
 $111 = $char_range;
 $112 = $s_trunc;
 $113 = $ellipsis;
 HEAP32[$_130>>2] = $109;
 $114 = ((($_130)) + 4|0);
 HEAP32[$114>>2] = (119);
 $115 = ((($_130)) + 8|0);
 HEAP32[$115>>2] = $110;
 $116 = ((($_130)) + 12|0);
 HEAP32[$116>>2] = (155);
 $117 = ((($_130)) + 16|0);
 HEAP32[$117>>2] = $111;
 $118 = ((($_130)) + 20|0);
 HEAP32[$118>>2] = (156);
 $119 = ((($_130)) + 24|0);
 HEAP32[$119>>2] = $112;
 $120 = ((($_130)) + 28|0);
 HEAP32[$120>>2] = (154);
 $121 = ((($_130)) + 32|0);
 HEAP32[$121>>2] = $113;
 $122 = ((($_130)) + 36|0);
 HEAP32[$122>>2] = (154);
 HEAP32[$_123>>2] = 3684;
 $123 = ((($_123)) + 4|0);
 HEAP32[$123>>2] = 5;
 $_6$sroa$0$0$$sroa_idx$i = ((($_123)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $124 = ((($_123)) + 16|0);
 HEAP32[$124>>2] = $_130;
 $125 = ((($_123)) + 20|0);
 HEAP32[$125>>2] = 5;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_123,3724);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h5704e9dd15141a43E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4core3fmt9Formatter3pad17h4be370917d619fddE($1,$2,$4)|0);
 return ($5|0);
}
function __ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17hd274da0b09178fa2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off$i$i = 0, $$off10$i$i = 0, $$off6$i$i = 0, $$off8$i$i = 0, $$off9$i$i = 0, $$sink4$i$i$i$i = 0, $$sink4$v$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_23$sroa$13$1$ph = 0, $cond = 0, $cond8 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$1$ph = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond19$i$i = 0, $or$cond21$i$i = 0, $or$cond23$i$i = 0, $or$cond23$i$not$i = 0, $trunc = 0, $trunc$clear = 0;
 var $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 255]($3,39)|0);
 $cond = ($8<<24>>24)==(0);
 if (!($cond)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $trunc = HEAP32[$0>>2]|0;
 $trunc$clear = $trunc & 2097151;
 L4: do {
  switch ($trunc$clear|0) {
  case 9:  {
   $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
   break;
  }
  case 13:  {
   $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
   break;
  }
  case 10:  {
   $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
   break;
  }
  case 34: case 39: case 92:  {
   $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $trunc;
   break;
  }
  default: {
   $9 = $trunc&65535;
   $10 = ($trunc>>>0)<(65536);
   do {
    if ($10) {
     $11 = (__ZN4core12char_private5check17hba318baa7b27b367E($9,9177,42,9261,303,9564,333)|0);
     if ($11) {
      $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
      break L4;
     }
    } else {
     $12 = ($trunc>>>0)<(131072);
     if ($12) {
      $19 = (__ZN4core12char_private5check17hba318baa7b27b367E($9,9897,31,9959,146,10105,342)|0);
      if ($19) {
       $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
       break L4;
      } else {
       break;
      }
     } else {
      $$off$i$i = (($trunc) + -173783)|0;
      $13 = ($$off$i$i>>>0)<(41);
      $$off6$i$i = (($trunc) + -177973)|0;
      $14 = ($$off6$i$i>>>0)<(11);
      $or$cond$i$i = $13 | $14;
      $15 = $trunc & 2097150;
      $16 = ($15|0)==(178206);
      $or$cond19$i$i = $16 | $or$cond$i$i;
      $$off8$i$i = (($trunc) + -183970)|0;
      $17 = ($$off8$i$i>>>0)<(10590);
      $or$cond21$i$i = $17 | $or$cond19$i$i;
      $$off9$i$i = (($trunc) + -195102)|0;
      $18 = ($$off9$i$i>>>0)<(722658);
      $or$cond23$i$i = $18 | $or$cond21$i$i;
      $or$cond23$i$not$i = $or$cond23$i$i ^ 1;
      $$off10$i$i = (($trunc) + -918000)|0;
      $not$$i$i = ($$off10$i$i>>>0)>(196111);
      $or$cond$i = $not$$i$i & $or$cond23$i$not$i;
      if ($or$cond$i) {
       $54 = 0;$55 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
       break L4;
      } else {
       break;
      }
     }
    }
   } while(0);
   $20 = $trunc | 1;
   $21 = (Math_clz32(($20|0))|0);
   $22 = $21 >>> 2;
   $23 = $22 ^ 7;
   $54 = $23;$55 = 5;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $trunc;
  }
  }
 } while(0);
 $25 = $55;$33 = $54;$iter$sroa$0$0 = $init_state$sroa$0$0$i;
 L17: while(1) {
  $trunc$i$i = $iter$sroa$0$0&255;
  $trunc$i$i$clear = $trunc$i$i & 3;
  L19: do {
   switch ($trunc$i$i$clear<<24>>24) {
   case 0:  {
    break L17;
    break;
   }
   case 1:  {
    $56 = $33;$57 = $25;$_23$sroa$13$1$ph = $init_state$sroa$9$0$i;$iter$sroa$0$1$ph = 0;
    break;
   }
   case 2:  {
    $56 = $33;$57 = $25;$_23$sroa$13$1$ph = 92;$iter$sroa$0$1$ph = 1;
    break;
   }
   default: {
    $24 = $25&255;
    $trunc$i$i$i$clear = $24 & 7;
    switch ($trunc$i$i$i$clear<<24>>24) {
    case 0:  {
     break L17;
     break;
    }
    case 1:  {
     $40 = $25 & -256;
     $56 = $33;$57 = $40;$_23$sroa$13$1$ph = 125;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L19;
     break;
    }
    case 2:  {
     $32 = $33 << 2;
     $34 = $32 & 28;
     $35 = $init_state$sroa$9$0$i >>> $34;
     $36 = $35 & 15;
     $37 = $36&255;
     $38 = ($37&255)<(10);
     $$sink4$v$i$i$i$i = $38 ? 48 : 87;
     $$sink4$i$i$i$i = (($$sink4$v$i$i$i$i) + ($36))|0;
     $39 = ($33|0)==(0);
     if ($39) {
      $41 = $25 & -256;
      $42 = $41 | 1;
      $56 = $33;$57 = $42;$_23$sroa$13$1$ph = $$sink4$i$i$i$i;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L19;
     } else {
      $43 = (($33) + -1)|0;
      $56 = $43;$57 = $25;$_23$sroa$13$1$ph = $$sink4$i$i$i$i;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L19;
     }
     break;
    }
    case 3:  {
     $30 = $25 & -256;
     $31 = $30 | 2;
     $56 = $33;$57 = $31;$_23$sroa$13$1$ph = 123;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L19;
     break;
    }
    case 4:  {
     $28 = $25 & -256;
     $29 = $28 | 3;
     $56 = $33;$57 = $29;$_23$sroa$13$1$ph = 117;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L19;
     break;
    }
    default: {
     $26 = $25 & -256;
     $27 = $26 | 4;
     $56 = $33;$57 = $27;$_23$sroa$13$1$ph = 92;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L19;
    }
    }
   }
   }
  } while(0);
  $49 = HEAP32[$2>>2]|0;
  $50 = HEAP32[$4>>2]|0;
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_iii[$52 & 255]($49,$_23$sroa$13$1$ph)|0);
  $cond8 = ($53<<24>>24)==(0);
  if ($cond8) {
   $25 = $57;$33 = $56;$iter$sroa$0$0 = $iter$sroa$0$1$ph;
  } else {
   $_0$sroa$0$0 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($_0$sroa$0$0|0);
 }
 $44 = HEAP32[$2>>2]|0;
 $45 = HEAP32[$4>>2]|0;
 $46 = ((($45)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iii[$47 & 255]($44,39)|0);
 $_0$sroa$0$0 = $48;
 return ($_0$sroa$0$0|0);
}
function __ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h95ae8b11cb2be082E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_6$sroa$4$0$$sroa_idx6 = 0, $_6$sroa$5$0$$sroa_idx8 = 0, $_6$sroa$611$0$$sroa_idx13 = 0, $_6$sroa$7$0$$sroa_idx15 = 0, $_7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7$i = sp + 16|0;
 $_13 = sp;
 $2 = ((($0)) + 4|0);
 $3 = $0;
 $4 = $2;
 HEAP32[$_13>>2] = $3;
 $5 = ((($_13)) + 4|0);
 HEAP32[$5>>2] = (157);
 $6 = ((($_13)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_13)) + 12|0);
 HEAP32[$7>>2] = (157);
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$_7$i>>2] = 3740;
 $_6$sroa$4$0$$sroa_idx6 = ((($_7$i)) + 4|0);
 HEAP32[$_6$sroa$4$0$$sroa_idx6>>2] = 2;
 $_6$sroa$5$0$$sroa_idx8 = ((($_7$i)) + 8|0);
 HEAP32[$_6$sroa$5$0$$sroa_idx8>>2] = 0;
 $_6$sroa$611$0$$sroa_idx13 = ((($_7$i)) + 16|0);
 HEAP32[$_6$sroa$611$0$$sroa_idx13>>2] = $_13;
 $_6$sroa$7$0$$sroa_idx15 = ((($_7$i)) + 20|0);
 HEAP32[$_6$sroa$7$0$$sroa_idx15>>2] = 2;
 $12 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($9,$11,$_7$i)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17he923db6f4f3df2c4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hd28470d82864d8cfE($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt5write17h1b6d99dcd397fba4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink6$i = 0, $$sroa_idx = 0, $$sroa_idx64 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_12$sroa$7$2$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_7$sroa$0$0$$sroa_idx = 0, $_8$sroa$7$2$i = 0, $args$sroa$0$0$copyload = 0, $args$sroa$12$0$$sroa_idx45 = 0, $args$sroa$12$0$copyload = 0, $args$sroa$5$0$$sroa_idx30 = 0, $args$sroa$5$0$copyload = 0, $args$sroa$6$0$$sroa_idx33 = 0, $args$sroa$6$0$copyload = 0, $args$sroa$8$0$$sroa_idx37 = 0, $args$sroa$8$0$copyload = 0, $args$sroa$9$0$$sroa_idx40 = 0, $args$sroa$9$0$copyload = 0, $cond$i = 0;
 var $cond17 = 0, $cond18 = 0, $cond20 = 0, $cond22 = 0, $cond23 = 0, $formatter = 0, $iter$sroa$0$0 = 0, $iter1$sroa$0$0$in = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i11$i = 0, $trunc$i11$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $formatter = sp;
 $args$sroa$0$0$copyload = HEAP32[$2>>2]|0;
 $args$sroa$5$0$$sroa_idx30 = ((($2)) + 4|0);
 $args$sroa$5$0$copyload = HEAP32[$args$sroa$5$0$$sroa_idx30>>2]|0;
 $args$sroa$6$0$$sroa_idx33 = ((($2)) + 8|0);
 $args$sroa$6$0$copyload = HEAP32[$args$sroa$6$0$$sroa_idx33>>2]|0;
 $args$sroa$8$0$$sroa_idx37 = ((($2)) + 12|0);
 $args$sroa$8$0$copyload = HEAP32[$args$sroa$8$0$$sroa_idx37>>2]|0;
 $args$sroa$9$0$$sroa_idx40 = ((($2)) + 16|0);
 $args$sroa$9$0$copyload = HEAP32[$args$sroa$9$0$$sroa_idx40>>2]|0;
 $args$sroa$12$0$$sroa_idx45 = ((($2)) + 20|0);
 $args$sroa$12$0$copyload = HEAP32[$args$sroa$12$0$$sroa_idx45>>2]|0;
 $3 = (($args$sroa$9$0$copyload) + ($args$sroa$12$0$copyload<<3)|0);
 $4 = $args$sroa$9$0$copyload;
 $5 = $3;
 HEAP32[$formatter>>2] = 0;
 $6 = ((($formatter)) + 4|0);
 HEAP32[$6>>2] = 32;
 $7 = ((($formatter)) + 48|0);
 HEAP8[$7>>0] = 3;
 $_6$sroa$0$0$$sroa_idx = ((($formatter)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx>>2] = 0;
 $_7$sroa$0$0$$sroa_idx = ((($formatter)) + 16|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 $8 = ((($formatter)) + 24|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($formatter)) + 28|0);
 HEAP32[$9>>2] = $1;
 $$sroa_idx = ((($formatter)) + 32|0);
 HEAP32[$$sroa_idx>>2] = $4;
 $$sroa_idx64 = ((($formatter)) + 36|0);
 HEAP32[$$sroa_idx64>>2] = $5;
 $10 = ((($formatter)) + 40|0);
 HEAP32[$10>>2] = $args$sroa$9$0$copyload;
 $11 = ((($formatter)) + 44|0);
 HEAP32[$11>>2] = $args$sroa$12$0$copyload;
 $12 = (($args$sroa$0$0$copyload) + ($args$sroa$5$0$copyload<<3)|0);
 $13 = ($args$sroa$6$0$copyload|0)==(0|0);
 L1: do {
  if ($13) {
   $24 = $args$sroa$0$0$copyload;$iter$sroa$0$0 = $4;
   while(1) {
    $20 = $iter$sroa$0$0;
    $21 = ($20|0)==($3|0);
    if ($21) {
     $18 = $24;
     label = 3;
     break L1;
    }
    $22 = ((($20)) + 8|0);
    $23 = $22;
    $25 = ($24|0)==($12|0);
    if ($25) {
     $18 = $24;
     label = 3;
     break L1;
    }
    $26 = HEAP32[$8>>2]|0;
    $27 = HEAP32[$9>>2]|0;
    $28 = HEAP32[$24>>2]|0;
    $29 = ((($24)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($27)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 255]($26,$28,$30)|0);
    $cond22 = ($33<<24>>24)==(0);
    if (!($cond22)) {
     label = 9;
     break L1;
    }
    $34 = ((($24)) + 8|0);
    $35 = ((($20)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$20>>2]|0;
    $38 = (FUNCTION_TABLE_iii[$36 & 255]($37,$formatter)|0);
    $cond23 = ($38<<24>>24)==(0);
    if ($cond23) {
     $24 = $34;$iter$sroa$0$0 = $23;
    } else {
     label = 9;
     break;
    }
   }
  } else {
   $14 = (($args$sroa$6$0$copyload) + (($args$sroa$8$0$copyload*36)|0)|0);
   $15 = ((($formatter)) + 8|0);
   $16 = ((($formatter)) + 16|0);
   $17 = ((($formatter)) + 32|0);
   $41 = $args$sroa$0$0$copyload;$iter1$sroa$0$0$in = $args$sroa$6$0$copyload;
   L8: while(1) {
    $39 = ($iter1$sroa$0$0$in|0)==($14|0);
    if ($39) {
     $18 = $41;
     label = 3;
     break L1;
    }
    $40 = ((($iter1$sroa$0$0$in)) + 36|0);
    $42 = ($41|0)==($12|0);
    if ($42) {
     label = 40;
     break L1;
    }
    $43 = ((($41)) + 8|0);
    $44 = HEAP32[$8>>2]|0;
    $45 = HEAP32[$9>>2]|0;
    $46 = HEAP32[$41>>2]|0;
    $47 = ((($41)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_iiii[$50 & 255]($44,$46,$48)|0);
    $cond17 = ($51<<24>>24)==(0);
    if (!($cond17)) {
     label = 9;
     break L1;
    }
    $52 = ((($iter1$sroa$0$0$in)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$6>>2] = $53;
    $54 = ((($iter1$sroa$0$0$in)) + 32|0);
    $55 = HEAP8[$54>>0]|0;
    HEAP8[$7>>0] = $55;
    $56 = ((($iter1$sroa$0$0$in)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$formatter>>2] = $57;
    $58 = ((($iter1$sroa$0$0$in)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $trunc$i$i = $59&255;
    $trunc$i$i$clear = $trunc$i$i & 3;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $69 = ((($iter1$sroa$0$0$in)) + 28|0);
     $70 = HEAP32[$69>>2]|0;
     $83 = 0;$86 = 1;$_8$sroa$7$2$i = $70;
     break;
    }
    case 1:  {
     $71 = ((($iter1$sroa$0$0$in)) + 28|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = HEAP32[$11>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if (!($74)) {
      label = 21;
      break L8;
     }
     $75 = HEAP32[$10>>2]|0;
     $76 = (((($75) + ($72<<3)|0)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==((158)|0);
     if ($78) {
      $79 = (($75) + ($72<<3)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$80>>2]|0;
      $83 = 0;$86 = 1;$_8$sroa$7$2$i = $81;
     } else {
      $83 = 0;$86 = 0;$_8$sroa$7$2$i = 0;
     }
     break;
    }
    case 2:  {
     $60 = HEAP32[$17>>2]|0;
     $61 = HEAP32[$$sroa_idx64>>2]|0;
     $62 = ($60|0)==($61|0);
     if ($62) {
      $83 = 0;$86 = 0;$_8$sroa$7$2$i = 0;
     } else {
      $63 = ((($60)) + 8|0);
      HEAP32[$17>>2] = $63;
      $64 = ((($60)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==((158)|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = HEAP32[$67>>2]|0;
       $83 = 0;$86 = 1;$_8$sroa$7$2$i = $68;
      } else {
       $83 = 0;$86 = 0;$_8$sroa$7$2$i = 0;
      }
     }
     break;
    }
    default: {
     $83 = 0;$86 = 0;$_8$sroa$7$2$i = 0;
    }
    }
    $82 = $_8$sroa$7$2$i | $83;
    $84 = $15;
    $85 = $84;
    HEAP32[$85>>2] = $86;
    $87 = (($84) + 4)|0;
    $88 = $87;
    HEAP32[$88>>2] = $82;
    $89 = ((($iter1$sroa$0$0$in)) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $trunc$i11$i = $90&255;
    $trunc$i11$i$clear = $trunc$i11$i & 3;
    switch ($trunc$i11$i$clear<<24>>24) {
    case 0:  {
     $100 = ((($iter1$sroa$0$0$in)) + 20|0);
     $101 = HEAP32[$100>>2]|0;
     $114 = 0;$117 = 1;$_12$sroa$7$2$i = $101;
     break;
    }
    case 1:  {
     $102 = ((($iter1$sroa$0$0$in)) + 20|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$11>>2]|0;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      label = 30;
      break L8;
     }
     $106 = HEAP32[$10>>2]|0;
     $107 = (((($106) + ($103<<3)|0)) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==((158)|0);
     if ($109) {
      $110 = (($106) + ($103<<3)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = HEAP32[$111>>2]|0;
      $114 = 0;$117 = 1;$_12$sroa$7$2$i = $112;
     } else {
      $114 = 0;$117 = 0;$_12$sroa$7$2$i = 0;
     }
     break;
    }
    case 2:  {
     $91 = HEAP32[$17>>2]|0;
     $92 = HEAP32[$$sroa_idx64>>2]|0;
     $93 = ($91|0)==($92|0);
     if ($93) {
      $114 = 0;$117 = 0;$_12$sroa$7$2$i = 0;
     } else {
      $94 = ((($91)) + 8|0);
      HEAP32[$17>>2] = $94;
      $95 = ((($91)) + 4|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)==((158)|0);
      if ($97) {
       $98 = HEAP32[$91>>2]|0;
       $99 = HEAP32[$98>>2]|0;
       $114 = 0;$117 = 1;$_12$sroa$7$2$i = $99;
      } else {
       $114 = 0;$117 = 0;$_12$sroa$7$2$i = 0;
      }
     }
     break;
    }
    default: {
     $114 = 0;$117 = 0;$_12$sroa$7$2$i = 0;
    }
    }
    $113 = $_12$sroa$7$2$i | $114;
    $115 = $16;
    $116 = $115;
    HEAP32[$116>>2] = $117;
    $118 = (($115) + 4)|0;
    $119 = $118;
    HEAP32[$119>>2] = $113;
    $120 = HEAP32[$iter1$sroa$0$0$in>>2]|0;
    $cond$i = ($120|0)==(0);
    if ($cond$i) {
     $121 = HEAP32[$17>>2]|0;
     $122 = HEAP32[$$sroa_idx64>>2]|0;
     $123 = ($121|0)==($122|0);
     if ($123) {
      label = 33;
      break;
     }
     $124 = ((($121)) + 8|0);
     HEAP32[$17>>2] = $124;
     $$sink6$i = $121;
    } else {
     $125 = ((($iter1$sroa$0$0$in)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = HEAP32[$11>>2]|0;
     $128 = ($126>>>0)<($127>>>0);
     if (!($128)) {
      label = 37;
      break;
     }
     $129 = HEAP32[$10>>2]|0;
     $130 = (($129) + ($126<<3)|0);
     $$sink6$i = $130;
    }
    $131 = ((($$sink6$i)) + 4|0);
    $132 = HEAP32[$$sink6$i>>2]|0;
    $133 = HEAP32[$131>>2]|0;
    $134 = (FUNCTION_TABLE_iii[$133 & 255]($132,$formatter)|0);
    $cond18 = ($134<<24>>24)==(0);
    if ($cond18) {
     $41 = $43;$iter1$sroa$0$0$in = $40;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 21) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3756,$72,$73);
    // unreachable;
   }
   else if ((label|0) == 30) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3756,$103,$104);
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking5panic17h8ce57b1f932a0889E(3660);
    // unreachable;
   }
   else if ((label|0) == 37) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3772,$126,$127);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ($18|0)==($12|0);
  if ($19) {
   label = 40;
  } else {
   $135 = HEAP32[$8>>2]|0;
   $136 = HEAP32[$9>>2]|0;
   $137 = HEAP32[$18>>2]|0;
   $138 = ((($18)) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($136)) + 12|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (FUNCTION_TABLE_iiii[$141 & 255]($135,$137,$139)|0);
   $cond20 = ($142<<24>>24)==(0);
   if ($cond20) {
    label = 40;
   } else {
    label = 9;
   }
  }
 }
 if ((label|0) == 9) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 40) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110show_usize17h980a1bcb100419a4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hd28470d82864d8cfE($0,$1)|0);
 return ($2|0);
}
function __ZN4core12char_private5check17hba318baa7b27b367E($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$old = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$0$off0 = 0, $current$0$off0104 = 0, $iter1$sroa$0$0$in = 0, $len$0 = 0, $lowerstart$072 = 0, $normal$sroa$0$0$in102 = 0, $normal$sroa$0$3$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $x$0103 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($0&65535) >>> 8;
 $8 = $7&255;
 $9 = (($1) + ($2<<1)|0);
 $10 = ($2|0)==(0);
 L1: do {
  if (!($10)) {
   $11 = $0&255;
   $13 = $1;$lowerstart$072 = 0;
   L3: while(1) {
    $12 = ((($13)) + 2|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ((($13)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($17) + ($lowerstart$072))|0;
    $19 = ($8<<24>>24)==($14<<24>>24);
    if (!($19)) {
     $27 = ($8&255)<($14&255);
     $28 = ($12|0)==($9|0);
     $or$cond = $27 | $28;
     if ($or$cond) {
      break L1;
     } else {
      $13 = $12;$lowerstart$072 = $18;
      continue;
     }
    }
    $23 = ($18>>>0)<($lowerstart$072>>>0);
    if ($23) {
     label = 7;
     break;
    }
    $24 = ($18>>>0)>($4>>>0);
    if ($24) {
     label = 9;
     break;
    }
    $25 = (($3) + ($lowerstart$072)|0);
    $26 = (($25) + ($17)|0);
    $iter1$sroa$0$0$in = $25;
    while(1) {
     $29 = ($iter1$sroa$0$0$in|0)==($26|0);
     if ($29) {
      break;
     }
     $30 = ((($iter1$sroa$0$0$in)) + 1|0);
     $31 = HEAP8[$iter1$sroa$0$0$in>>0]|0;
     $32 = ($31<<24>>24)==($11<<24>>24);
     if ($32) {
      $_0$0$off0 = 0;
      label = 15;
      break L3;
     } else {
      $iter1$sroa$0$0$in = $30;
     }
    }
    $$old = ($12|0)==($9|0);
    if ($$old) {
     break L1;
    } else {
     $13 = $12;$lowerstart$072 = $18;
    }
   }
   if ((label|0) == 7) {
    __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($lowerstart$072,$18);
    // unreachable;
   }
   else if ((label|0) == 9) {
    __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($18,$4);
    // unreachable;
   }
   else if ((label|0) == 15) {
    return ($_0$0$off0|0);
   }
  }
 } while(0);
 $20 = (($5) + ($6)|0);
 $21 = ($6|0)==(0);
 if ($21) {
  $_0$0$off0 = 1;
  return ($_0$0$off0|0);
 }
 $22 = $0&65535;
 $current$0$off0104 = 1;$normal$sroa$0$0$in102 = $5;$x$0103 = $22;
 while(1) {
  $33 = ((($normal$sroa$0$0$in102)) + 1|0);
  $34 = HEAP8[$normal$sroa$0$0$in102>>0]|0;
  $35 = ($34<<24>>24)<(0);
  if ($35) {
   $36 = ($33|0)==($20|0);
   if ($36) {
    label = 18;
    break;
   }
   $37 = $34 & 127;
   $38 = $37&255;
   $39 = $38 << 8;
   $40 = ((($normal$sroa$0$0$in102)) + 2|0);
   $41 = HEAP8[$33>>0]|0;
   $phitmp$i$i$i = $41&255;
   $42 = $phitmp$i$i$i | $39;
   $len$0 = $42;$normal$sroa$0$3$in = $40;
  } else {
   $43 = $34&255;
   $len$0 = $43;$normal$sroa$0$3$in = $33;
  }
  $44 = (($x$0103) - ($len$0))|0;
  $45 = ($44|0)<(0);
  if ($45) {
   $_0$0$off0 = $current$0$off0104;
   label = 15;
   break;
  }
  $46 = $current$0$off0104 ^ 1;
  $47 = ($normal$sroa$0$3$in|0)==($20|0);
  if ($47) {
   $_0$0$off0 = $46;
   label = 15;
   break;
  } else {
   $current$0$off0104 = $46;$normal$sroa$0$0$in102 = $normal$sroa$0$3$in;$x$0103 = $44;
  }
 }
 if ((label|0) == 15) {
  return ($_0$0$off0|0);
 }
 else if ((label|0) == 18) {
  __ZN4core9panicking5panic17h8ce57b1f932a0889E(3660);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink$i$i = 0, $$sink12$i$i = 0, $$sink8$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i = 0;
 var $_15$i$i = 0, $_22$i$i = 0, $_38$sroa$4$0$$sroa_idx25$i$i = 0, $_38$sroa$5$0$$sroa_idx27$i$i = 0, $_38$sroa$630$0$$sroa_idx32$i$i = 0, $_38$sroa$7$0$$sroa_idx34$i$i = 0, $_45$i$i = 0, $_7$i$i$i = 0, $_7$sroa$0$0$$sroa_idx = 0, $_7$sroa$0$0$copyload = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $cond$i = 0, $prefix$i$i = 0, $space$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 96|0;
 $_45$i$i = sp + 72|0;
 $_22$i$i = sp + 56|0;
 $_15$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $space$i$i = sp + 16|0;
 $prefix$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_7$sroa$0$0$$sroa_idx = ((($0)) + 8|0);
 $_7$sroa$0$0$copyload = HEAP8[$_7$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $value;
 $cond$i = ($_7$sroa$0$0$copyload<<24>>24)==(0);
 $5 = ((($0)) + 4|0);
 if (!($cond$i)) {
  $_0$sroa$0$0$i = 1;
  HEAP8[$_7$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  $36 = HEAP32[$5>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$5>>2] = $37;
  STACKTOP = sp;return ($0|0);
 }
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $$sink12$i$i = $7 ? 5153 : 5144;
 $$sink8$i$i = $7 ? 10579 : 13480;
 $$sink$i$i = $7&1;
 HEAP32[$prefix$i$i>>2] = $$sink12$i$i;
 $8 = ((($prefix$i$i)) + 4|0);
 HEAP32[$8>>2] = 1;
 HEAP32[$space$i$i>>2] = $$sink8$i$i;
 $9 = ((($space$i$i)) + 4|0);
 HEAP32[$9>>2] = $$sink$i$i;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 4;
 $13 = ($12|0)==(0);
 if ($13) {
  $24 = $prefix$i$i;
  $25 = $space$i$i;
  HEAP32[$_45$i$i>>2] = $24;
  $26 = ((($_45$i$i)) + 4|0);
  HEAP32[$26>>2] = (154);
  $27 = ((($_45$i$i)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = ((($_45$i$i)) + 12|0);
  HEAP32[$28>>2] = (154);
  $29 = ((($_45$i$i)) + 16|0);
  HEAP32[$29>>2] = $4;
  $30 = ((($_45$i$i)) + 20|0);
  HEAP32[$30>>2] = (159);
  $31 = ((($10)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($10)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 3876;
  $_38$sroa$4$0$$sroa_idx25$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_38$sroa$4$0$$sroa_idx25$i$i>>2] = 3;
  $_38$sroa$5$0$$sroa_idx27$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_38$sroa$5$0$$sroa_idx27$i$i>>2] = 0;
  $_38$sroa$630$0$$sroa_idx32$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_38$sroa$630$0$$sroa_idx32$i$i>>2] = $_45$i$i;
  $_38$sroa$7$0$$sroa_idx34$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_38$sroa$7$0$$sroa_idx34$i$i>>2] = 3;
  $35 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($32,$34,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $35;
 } else {
  $14 = $10;
  HEAP32[$writer$i$i>>2] = $14;
  $15 = ((($writer$i$i)) + 4|0);
  HEAP8[$15>>0] = 0;
  $16 = $prefix$i$i;
  HEAP32[$_22$i$i>>2] = $16;
  $17 = ((($_22$i$i)) + 4|0);
  HEAP32[$17>>2] = (154);
  $18 = ((($_22$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_22$i$i)) + 12|0);
  HEAP32[$19>>2] = (159);
  HEAP32[$_15$i$i>>2] = 3788;
  $20 = ((($_15$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_15$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3804;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_15$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $21 = ((($_15$i$i)) + 16|0);
  HEAP32[$21>>2] = $_22$i$i;
  $22 = ((($_15$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($writer$i$i,2152,$_15$i$i)|0);
  $_0$sroa$0$0$i$i = $23;
 }
 $_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_7$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 $36 = HEAP32[$5>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$5>>2] = $37;
 STACKTOP = sp;return ($0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf66bb2efbd2e5973E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 255]($2,$1)|0);
 return ($7|0);
}
function __ZN4core3ptr13drop_in_place17h3ed8ceefb9f90bebE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$ph$iZ2D = 0, $$sink5$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $_0$0$i14$i$i$i$i$i$i$i = 0, $_0$0$i20$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i = 0, $_0$sroa$0$0 = 0, $_3$sroa$0$0$i$i$i = 0, $_3$sroa$6$0$i$i$i = 0, $_3$sroa$6$1$i$i$i = 0, $_5$sroa$4$0$ph$i$i$i$i$i = 0, $_7$sroa$6$0$i = 0, $_7$sroa$6$1$i = 0, $cond6 = 0, $cond7 = 0, $not$$i$i$i$i = 0, $or$cond$i$i$i$i32 = 0, $phitmp$i$i$i$i$i$i$i = 0;
 var $phitmp26$i$i$i$i$i$i$i = 0, $phitmp27$i$i$i$i$i$i$i = 0, $s$sroa$0$048 = 0, $s$sroa$10$047 = 0, $split$0 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $_0$sroa$0$0 = 0;
  return ($_0$sroa$0$0|0);
 }
 $4 = ((($0)) + 4|0);
 $s$sroa$0$048 = $1;$s$sroa$10$047 = $2;
 while(1) {
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 24|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($7)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,10580,4)|0);
   $cond7 = ($14<<24>>24)==(0);
   if (!($cond7)) {
    $_0$sroa$0$0 = 1;
    label = 5;
    break;
   }
  }
  $15 = (($s$sroa$0$048) + ($s$sroa$10$047)|0);
  $16 = $s$sroa$0$048;
  $17 = $16;$_3$sroa$6$0$i$i$i = 0;$_7$sroa$6$0$i = 0;
  L9: while(1) {
   $$cast$i$i$i$i$i = $17;
   $18 = ($$cast$i$i$i$i$i|0)==($15|0);
   if ($18) {
    $80 = $17;$_3$sroa$0$0$i$i$i = 2;$_3$sroa$6$1$i$i$i = $_3$sroa$6$0$i$i$i;$_7$sroa$6$1$i = $_7$sroa$6$0$i;
   } else {
    $21 = ((($$cast$i$i$i$i$i)) + 1|0);
    $20 = HEAP8[$$cast$i$i$i$i$i>>0]|0;
    $22 = ($20<<24>>24)>(-1);
    $23 = $21;
    if ($22) {
     $19 = $20&255;
     $58 = $23;$_5$sroa$4$0$ph$i$i$i$i$i = $19;
    } else {
     $24 = $20 & 31;
     $25 = $24&255;
     $26 = ($21|0)==($15|0);
     if ($26) {
      $34 = $15;$81 = $23;$_0$0$i20$i$i$i$i$i$i$i = 0;
     } else {
      $27 = ((($$cast$i$i$i$i$i)) + 2|0);
      $28 = HEAP8[$21>>0]|0;
      $phitmp$i$i$i$i$i$i$i = $28 & 63;
      $29 = $27;
      $34 = $27;$81 = $29;$_0$0$i20$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i;
     }
     $30 = $25 << 6;
     $31 = $_0$0$i20$i$i$i$i$i$i$i&255;
     $32 = $31 | $30;
     $33 = ($20&255)>(223);
     if ($33) {
      $35 = ($34|0)==($15|0);
      if ($35) {
       $45 = $15;$82 = $81;$_0$0$i14$i$i$i$i$i$i$i = 0;
      } else {
       $36 = ((($34)) + 1|0);
       $37 = HEAP8[$34>>0]|0;
       $phitmp26$i$i$i$i$i$i$i = $37 & 63;
       $38 = $36;
       $45 = $36;$82 = $38;$_0$0$i14$i$i$i$i$i$i$i = $phitmp26$i$i$i$i$i$i$i;
      }
      $39 = $31 << 6;
      $40 = $_0$0$i14$i$i$i$i$i$i$i&255;
      $41 = $40 | $39;
      $42 = $25 << 12;
      $43 = $41 | $42;
      $44 = ($20&255)>(239);
      if ($44) {
       $46 = ($45|0)==($15|0);
       if ($46) {
        $83 = $82;$_0$0$i9$i$i$i$i$i$i$i = 0;
       } else {
        $47 = ((($45)) + 1|0);
        $48 = HEAP8[$45>>0]|0;
        $phitmp27$i$i$i$i$i$i$i = $48 & 63;
        $49 = $47;
        $83 = $49;$_0$0$i9$i$i$i$i$i$i$i = $phitmp27$i$i$i$i$i$i$i;
       }
       $50 = $25 << 18;
       $51 = $50 & 1835008;
       $52 = $41 << 6;
       $53 = $_0$0$i9$i$i$i$i$i$i$i&255;
       $54 = $52 | $51;
       $55 = $54 | $53;
       $58 = $83;$_5$sroa$4$0$ph$i$i$i$i$i = $55;
      } else {
       $58 = $82;$_5$sroa$4$0$ph$i$i$i$i$i = $43;
      }
     } else {
      $58 = $81;$_5$sroa$4$0$ph$i$i$i$i$i = $32;
     }
    }
    $56 = (($_7$sroa$6$0$i) - ($17))|0;
    $57 = (($56) + ($58))|0;
    $not$$i$i$i$i = ($_5$sroa$4$0$ph$i$i$i$i$i|0)!=(10);
    $$sink5$i$i$i$i = $not$$i$i$i$i&1;
    $80 = $58;$_3$sroa$0$0$i$i$i = $$sink5$i$i$i$i;$_3$sroa$6$1$i$i$i = $_7$sroa$6$0$i;$_7$sroa$6$1$i = $57;
   }
   $trunc$i$i$i = $_3$sroa$0$0$i$i$i&255;
   $trunc$i$i$i$clear = $trunc$i$i$i & 3;
   switch ($trunc$i$i$i$clear<<24>>24) {
   case 0:  {
    label = 22;
    break L9;
    break;
   }
   case 2:  {
    label = 21;
    break L9;
    break;
   }
   default: {
    $17 = $80;$_3$sroa$6$0$i$i$i = $_3$sroa$6$1$i$i$i;$_7$sroa$6$0$i = $_7$sroa$6$1$i;
   }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   HEAP8[$4>>0] = 0;
   $split$0 = $s$sroa$10$047;
  }
  else if ((label|0) == 22) {
   label = 0;
   HEAP8[$4>>0] = 1;
   $59 = (($_3$sroa$6$1$i$i$i) + 1)|0;
   $split$0 = $59;
  }
  $60 = HEAP32[$0>>2]|0;
  $61 = ($split$0|0)==(0);
  $62 = ($s$sroa$10$047|0)==($split$0|0);
  $or$cond$i$i$i$i32 = $61 | $62;
  if (!($or$cond$i$i$i$i32)) {
   $63 = ($s$sroa$10$047>>>0)>($split$0>>>0);
   if (!($63)) {
    label = 26;
    break;
   }
   $64 = (($s$sroa$0$048) + ($split$0)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = ($65<<24>>24)>(-65);
   if (!($66)) {
    label = 26;
    break;
   }
  }
  $67 = ((($60)) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($60)) + 28|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (FUNCTION_TABLE_iiii[$72 & 255]($68,$s$sroa$0$048,$split$0)|0);
  $cond6 = ($73<<24>>24)==(0);
  if (!($cond6)) {
   $_0$sroa$0$0 = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i$i$i32) {
   $$pre$i$i$i = (($s$sroa$0$048) + ($split$0)|0);
   $$pre$phi$i$i$ph$iZ2D = $$pre$i$i$i;
  } else {
   $74 = ($s$sroa$10$047>>>0)>($split$0>>>0);
   if (!($74)) {
    label = 32;
    break;
   }
   $75 = (($s$sroa$0$048) + ($split$0)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = ($76<<24>>24)>(-65);
   if ($77) {
    $$pre$phi$i$i$ph$iZ2D = $75;
   } else {
    label = 32;
    break;
   }
  }
  $78 = (($s$sroa$10$047) - ($split$0))|0;
  $79 = ($78|0)==(0);
  if ($79) {
   $_0$sroa$0$0 = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$048 = $$pre$phi$i$i$ph$iZ2D;$s$sroa$10$047 = $78;
  }
 }
 if ((label|0) == 5) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 26) {
  __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($s$sroa$0$048,$s$sroa$10$047,0,$split$0);
  // unreachable;
 }
 else if ((label|0) == 32) {
  __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($s$sroa$0$048,$s$sroa$10$047,$split$0,$s$sroa$10$047);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17hd4d352b5daecb36fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $$sink15$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $len$1$i = 0, $len$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12 = sp;
 HEAP32[$_12>>2] = 0;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = $1&255;
  HEAP8[$_12>>0] = $3;
  $len$2$i = 1;
  $37 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($0,$_12,$len$2$i)|0);
  STACKTOP = sp;return ($37|0);
 }
 $4 = ($1>>>0)<(2048);
 do {
  if ($4) {
   $5 = $1 >>> 6;
   $6 = $5 & 31;
   $7 = $6&255;
   $8 = $7 | -64;
   $$sink$i = $8;$$sink$sink$i = 1;$$sink15$i = $_12;$len$1$i = 2;
  } else {
   $9 = ($1>>>0)<(65536);
   if ($9) {
    $10 = $1 >>> 12;
    $11 = $10 & 15;
    $12 = $11&255;
    $13 = $12 | -32;
    HEAP8[$_12>>0] = $13;
    $14 = $1 >>> 6;
    $15 = $14 & 63;
    $16 = $15&255;
    $17 = ((($_12)) + 1|0);
    $18 = $16 | -128;
    $$sink$i = $18;$$sink$sink$i = 2;$$sink15$i = $17;$len$1$i = 3;
    break;
   } else {
    $19 = $1 >>> 18;
    $20 = $19 & 7;
    $21 = $20&255;
    $22 = $21 | -16;
    HEAP8[$_12>>0] = $22;
    $23 = $1 >>> 12;
    $24 = $23 & 63;
    $25 = $24&255;
    $26 = ((($_12)) + 1|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $28 = $1 >>> 6;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = ((($_12)) + 2|0);
    $32 = $30 | -128;
    $$sink$i = $32;$$sink$sink$i = 3;$$sink15$i = $31;$len$1$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i>>0] = $$sink$i;
 $33 = $1 & 63;
 $34 = $33&255;
 $35 = (($_12) + ($$sink$sink$i)|0);
 $36 = $34 | -128;
 HEAP8[$35>>0] = $36;
 $len$2$i = $len$1$i;
 $37 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($0,$_12,$len$2$i)|0);
 STACKTOP = sp;return ($37|0);
}
function __ZN4core3fmt5Write9write_fmt17h80d74c6f6bde0202E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8,2176,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr13drop_in_place17hbf4c6463023aaee1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h567d4565cabdb80aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h32dd55d407cef4c3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i = 0, $$sink$sink$i$i = 0, $$sink15$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_12$i = 0, $len$1$i$i = 0, $len$2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 if ($3) {
  $4 = $1&255;
  HEAP8[$_12$i>>0] = $4;
  $len$2$i$i = 1;
  $38 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($2,$_12$i,$len$2$i$i)|0);
  STACKTOP = sp;return ($38|0);
 }
 $5 = ($1>>>0)<(2048);
 do {
  if ($5) {
   $6 = $1 >>> 6;
   $7 = $6 & 31;
   $8 = $7&255;
   $9 = $8 | -64;
   $$sink$i$i = $9;$$sink$sink$i$i = 1;$$sink15$i$i = $_12$i;$len$1$i$i = 2;
  } else {
   $10 = ($1>>>0)<(65536);
   if ($10) {
    $11 = $1 >>> 12;
    $12 = $11 & 15;
    $13 = $12&255;
    $14 = $13 | -32;
    HEAP8[$_12$i>>0] = $14;
    $15 = $1 >>> 6;
    $16 = $15 & 63;
    $17 = $16&255;
    $18 = ((($_12$i)) + 1|0);
    $19 = $17 | -128;
    $$sink$i$i = $19;$$sink$sink$i$i = 2;$$sink15$i$i = $18;$len$1$i$i = 3;
    break;
   } else {
    $20 = $1 >>> 18;
    $21 = $20 & 7;
    $22 = $21&255;
    $23 = $22 | -16;
    HEAP8[$_12$i>>0] = $23;
    $24 = $1 >>> 12;
    $25 = $24 & 63;
    $26 = $25&255;
    $27 = ((($_12$i)) + 1|0);
    $28 = $26 | -128;
    HEAP8[$27>>0] = $28;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30&255;
    $32 = ((($_12$i)) + 2|0);
    $33 = $31 | -128;
    $$sink$i$i = $33;$$sink$sink$i$i = 3;$$sink15$i$i = $32;$len$1$i$i = 4;
    break;
   }
  }
 } while(0);
 HEAP8[$$sink15$i$i>>0] = $$sink$i$i;
 $34 = $1 & 63;
 $35 = $34&255;
 $36 = (($_12$i) + ($$sink$sink$i$i)|0);
 $37 = $35 | -128;
 HEAP8[$36>>0] = $37;
 $len$2$i$i = $len$1$i$i;
 $38 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E($2,$_12$i,$len$2$i$i)|0);
 STACKTOP = sp;return ($38|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h24ae4ed11da70660E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($_8$i,2176,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17hf4ea064060c767d6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 255]($3,10584,11)|0);
 return ($8|0);
}
function __ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h9f190385fed1f8c9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 255]($3,10595,14)|0);
 return ($8|0);
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5142b9746fd1804dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink4$i$i$i = 0, $$sink4$v$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $trunc$i = $2&255;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  HEAP32[$0>>2] = 0;
  return;
  break;
 }
 case 1:  {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$1>>2] = 0;
  HEAP32[$0>>2] = 1;
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $4;
  return;
  break;
 }
 case 2:  {
  HEAP32[$1>>2] = 1;
  HEAP32[$0>>2] = 1;
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = 92;
  return;
  break;
 }
 default: {
  $7 = ((($1)) + 12|0);
  $trunc$i$i = HEAP8[$7>>0]|0;
  $trunc$i$i$clear = $trunc$i$i & 7;
  switch ($trunc$i$i$clear<<24>>24) {
  case 0:  {
   HEAP32[$0>>2] = 0;
   return;
   break;
  }
  case 1:  {
   HEAP8[$7>>0] = 0;
   HEAP32[$0>>2] = 1;
   $22 = ((($0)) + 4|0);
   HEAP32[$22>>2] = 125;
   return;
   break;
  }
  case 2:  {
   $11 = ((($1)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($1)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 << 2;
   $16 = $15 & 28;
   $17 = $12 >>> $16;
   $18 = $17 & 15;
   $19 = $18&255;
   $20 = ($19&255)<(10);
   $$sink4$v$i$i$i = $20 ? 48 : 87;
   $$sink4$i$i$i = (($$sink4$v$i$i$i) + ($18))|0;
   $21 = ($14|0)==(0);
   if ($21) {
    HEAP8[$7>>0] = 1;
   } else {
    $23 = (($14) + -1)|0;
    HEAP32[$13>>2] = $23;
   }
   HEAP32[$0>>2] = 1;
   $24 = ((($0)) + 4|0);
   HEAP32[$24>>2] = $$sink4$i$i$i;
   return;
   break;
  }
  case 3:  {
   HEAP8[$7>>0] = 2;
   HEAP32[$0>>2] = 1;
   $10 = ((($0)) + 4|0);
   HEAP32[$10>>2] = 123;
   return;
   break;
  }
  case 4:  {
   HEAP8[$7>>0] = 3;
   HEAP32[$0>>2] = 1;
   $9 = ((($0)) + 4|0);
   HEAP32[$9>>2] = 117;
   return;
   break;
  }
  default: {
   HEAP8[$7>>0] = 4;
   HEAP32[$0>>2] = 1;
   $8 = ((($0)) + 4|0);
   HEAP32[$8>>2] = 92;
   return;
  }
  }
 }
 }
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hd17b23de60407903E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0$0$i$i = 0, $_4$0$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$4$0$$sroa_idx2$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $trunc$i$i = $2&255;
 $trunc$i$i$clear = $trunc$i$i & 3;
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  $_0$0$i$i = 0;
  break;
 }
 case 1:  {
  $_0$0$i$i = 1;
  break;
 }
 case 2:  {
  $_0$0$i$i = 2;
  break;
 }
 default: {
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1)) + 12|0);
  $trunc$i$i$i = HEAP8[$5>>0]|0;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 0:  {
   $_4$0$i$i$i = 0;
   break;
  }
  case 1:  {
   $_4$0$i$i$i = 1;
   break;
  }
  case 2:  {
   $_4$0$i$i$i = 2;
   break;
  }
  case 3:  {
   $_4$0$i$i$i = 3;
   break;
  }
  case 4:  {
   $_4$0$i$i$i = 4;
   break;
  }
  default: {
   $_4$0$i$i$i = 5;
  }
  }
  $6 = (($_4$0$i$i$i) + ($4))|0;
  $_0$0$i$i = $6;
 }
 }
 HEAP32[$0>>2] = $_0$0$i$i;
 $_6$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 1;
 $_6$sroa$4$0$$sroa_idx2$i = ((($0)) + 8|0);
 HEAP32[$_6$sroa$4$0$$sroa_idx2$i>>2] = $_0$0$i$i;
 return;
}
function __ZN4core6option13expect_failed17h299a35470dcb4d8eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_10 = 0, $_3 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 HEAP32[$_10>>2] = $3;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (154);
 HEAP32[$_3>>2] = 3900;
 $5 = ((($_3)) + 4|0);
 HEAP32[$5>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $6 = ((($_3)) + 16|0);
 HEAP32[$6>>2] = $_10;
 $7 = ((($_3)) + 20|0);
 HEAP32[$7>>2] = 1;
 __ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E($_3,3908);
 // unreachable;
}
function __ZN4core3str7pattern11StrSearcher3new17hc86c75e217a0025cE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$21$$i$i = 0, $$21$$i70$i = 0, $$21$i$i = 0, $$21$i68$i = 0, $$22$i$i = 0, $$22$i40$i = 0, $$neg$i$i = 0, $$neg$i59$i = 0, $$neg25$i$i = 0, $$neg25$i60$i = 0, $$neg26$i$i = 0, $$neg27$i$i = 0, $$neg27$i63$i = 0, $$not$not$i35$i = 0, $$not$not$i66$i = 0, $$right$0$$i$i = 0, $$right$0$$i72$i = 0, $$right$0$$v$i$i = 0, $$right$0$$v$i71$i = 0, $$right$0$i$i = 0;
 var $$right$0$i41$i = 0, $$sink$i = 0, $$sink13$i = 0, $$sink15$i = 0, $$sink3$i = 0, $$sink5$i = 0, $$sink7$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$sroa$speculated$i$i$i = 0, $_0$0$sroa$speculated$i$i88$i = 0, $_15$sroa$4$0$$sroa_idx = 0, $_15$sroa$4$sroa$10$0$_15$sroa$4$0$$sroa_cast$sroa_idx54 = 0, $_15$sroa$4$sroa$3$0$_15$sroa$4$0$$sroa_cast$sroa_idx43 = 0;
 var $_15$sroa$4$sroa$4$0$_15$sroa$4$0$$sroa_cast$sroa_idx45 = 0, $_15$sroa$4$sroa$5$0$_15$sroa$4$0$$sroa_cast$sroa_cast = 0, $_15$sroa$4$sroa$6$0$_15$sroa$4$0$$sroa_cast$sroa_idx48 = 0, $_15$sroa$4$sroa$7$0$_15$sroa$4$0$$sroa_cast$sroa_cast = 0, $_15$sroa$4$sroa$8$0$_15$sroa$4$0$$sroa_cast$sroa_idx51 = 0, $_15$sroa$4$sroa$9$0$_15$sroa$4$0$$sroa_cast$sroa_cast = 0, $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx = 0, $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx17 = 0, $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx = 0, $_9$sroa$4$sroa$6$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx = 0, $left$0$i$i = 0, $left$0$i56$i = 0, $left$0$ph$ph$lcssa34$i$i = 0, $left$0$ph$ph$lcssa34$i29$i = 0, $left$0$ph$ph$lcssa34$i93$i = 0, $left$0$ph$ph50$i$i = 0, $left$0$ph$ph50$i25$i = 0, $left$0$right$0$i$i = 0, $left$0$right$0$i73$i = 0, $left$1$i$i = 0;
 var $left$1$i58$i = 0, $left$2$i$i = 0, $left$2$i79$i = 0, $not$$i$i = 0, $not$$i42$i = 0, $not$35$i$i = 0, $not$35$i38$i = 0, $not$3541$i$i = 0, $not$3541$i44$i = 0, $offset$0$i$i = 0, $offset$0$i54$i = 0, $offset$036$i$i = 0, $offset$036$i32$i = 0, $offset$1$i$i = 0, $offset$1$i77$i = 0, $period$0$$i$i = 0, $period$0$$i69$i = 0, $period$0$i$i = 0, $period$0$i53$i = 0, $period$0$ph$lcssa33$i$i = 0;
 var $period$0$ph$lcssa33$i30$i = 0, $period$0$ph$lcssa33$i94$i = 0, $period$0$ph42$i$i = 0, $period$0$ph42$i27$i = 0, $period$1$i$i = 0, $period$1$i76$i = 0, $right$0$i$i = 0, $right$0$i55$i = 0, $right$037$i$i = 0, $right$037$i31$i = 0, $right$1$i$i = 0, $right$1$i78$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($4|0) {
 case 0:  {
  $5 = ((($0)) + 48|0);
  HEAP32[$5>>2] = $1;
  $6 = ((($0)) + 52|0);
  HEAP32[$6>>2] = $2;
  $7 = ((($0)) + 56|0);
  HEAP32[$7>>2] = $3;
  $8 = ((($0)) + 60|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$0>>2] = 0;
  $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx = ((($0)) + 4|0);
  HEAP32[$_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx>>2] = 0;
  $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx17 = ((($0)) + 8|0);
  HEAP32[$_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx17>>2] = $2;
  $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx = ((($0)) + 12|0);
  HEAP8[$_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx>>0] = 1;
  $_9$sroa$4$sroa$6$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx = ((($0)) + 13|0);
  HEAP8[$_9$sroa$4$sroa$6$0$_9$sroa$4$0$$sroa_cast$sroa_raw_idx>>0] = 1;
  return;
  break;
 }
 case 1:  {
  $left$0$ph$ph$lcssa34$i29$i = 0;$left$0$ph$ph$lcssa34$i93$i = 0;$period$0$ph$lcssa33$i30$i = 1;$period$0$ph$lcssa33$i94$i = 1;
  break;
 }
 default: {
  $129 = 1;$left$0$ph$ph50$i$i = 0;
  label = 3;
 }
 }
 L4: do {
  if ((label|0) == 3) {
   L5: while(1) {
    label = 0;
    $130 = $129;$period$0$ph42$i$i = 1;
    L7: while(1) {
     $10 = $130;$offset$036$i$i = 0;$right$037$i$i = $130;
     while(1) {
      $9 = (($3) + ($10)|0);
      $11 = HEAP8[$9>>0]|0;
      $12 = (($offset$036$i$i) + ($left$0$ph$ph50$i$i))|0;
      $13 = ($12>>>0)<($4>>>0);
      if (!($13)) {
       label = 6;
       break L5;
      }
      $14 = (($3) + ($12)|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = ($11&255)<($15&255);
      if ($16) {
       break;
      }
      $17 = ($11<<24>>24)==($15<<24>>24);
      if (!($17)) {
       break L7;
      }
      $21 = (($offset$036$i$i) + 1)|0;
      $22 = ($21|0)==($period$0$ph42$i$i|0);
      $$22$i$i = $22 ? 0 : $21;
      $23 = $22 ? $21 : 0;
      $$right$0$i$i = (($23) + ($right$037$i$i))|0;
      $24 = (($$right$0$i$i) + ($$22$i$i))|0;
      $not$$i$i = ($24>>>0)<($4>>>0);
      if ($not$$i$i) {
       $10 = $24;$offset$036$i$i = $$22$i$i;$right$037$i$i = $$right$0$i$i;
      } else {
       $left$0$ph$ph$lcssa34$i$i = $left$0$ph$ph50$i$i;$period$0$ph$lcssa33$i$i = $period$0$ph42$i$i;
       break L5;
      }
     }
     $18 = (($right$037$i$i) + 1)|0;
     $19 = (($18) + ($offset$036$i$i))|0;
     $20 = (($19) - ($left$0$ph$ph50$i$i))|0;
     $not$35$i$i = ($19>>>0)<($4>>>0);
     if ($not$35$i$i) {
      $130 = $19;$period$0$ph42$i$i = $20;
     } else {
      $left$0$ph$ph$lcssa34$i$i = $left$0$ph$ph50$i$i;$period$0$ph$lcssa33$i$i = $20;
      break L5;
     }
    }
    $25 = (($right$037$i$i) + 1)|0;
    $not$3541$i$i = ($25>>>0)<($4>>>0);
    if ($not$3541$i$i) {
     $129 = $25;$left$0$ph$ph50$i$i = $right$037$i$i;
     label = 3;
    } else {
     $left$0$ph$ph$lcssa34$i$i = $right$037$i$i;$period$0$ph$lcssa33$i$i = 1;
     break;
    }
   }
   if ((label|0) == 6) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$12,$4);
    // unreachable;
   }
   $131 = 1;$left$0$ph$ph50$i25$i = 0;
   L19: while(1) {
    $132 = $131;$period$0$ph42$i27$i = 1;
    L21: while(1) {
     $27 = $132;$offset$036$i32$i = 0;$right$037$i31$i = $132;
     while(1) {
      $26 = (($3) + ($27)|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = (($offset$036$i32$i) + ($left$0$ph$ph50$i25$i))|0;
      $30 = ($29>>>0)<($4>>>0);
      if (!($30)) {
       break L19;
      }
      $31 = (($3) + ($29)|0);
      $32 = HEAP8[$31>>0]|0;
      $$not$not$i35$i = ($28&255)>($32&255);
      if ($$not$not$i35$i) {
       break;
      }
      $33 = ($28<<24>>24)==($32<<24>>24);
      if (!($33)) {
       break L21;
      }
      $37 = (($offset$036$i32$i) + 1)|0;
      $38 = ($37|0)==($period$0$ph42$i27$i|0);
      $$22$i40$i = $38 ? 0 : $37;
      $39 = $38 ? $37 : 0;
      $$right$0$i41$i = (($39) + ($right$037$i31$i))|0;
      $40 = (($$right$0$i41$i) + ($$22$i40$i))|0;
      $not$$i42$i = ($40>>>0)<($4>>>0);
      if ($not$$i42$i) {
       $27 = $40;$offset$036$i32$i = $$22$i40$i;$right$037$i31$i = $$right$0$i41$i;
      } else {
       $left$0$ph$ph$lcssa34$i29$i = $left$0$ph$ph50$i25$i;$left$0$ph$ph$lcssa34$i93$i = $left$0$ph$ph$lcssa34$i$i;$period$0$ph$lcssa33$i30$i = $period$0$ph42$i27$i;$period$0$ph$lcssa33$i94$i = $period$0$ph$lcssa33$i$i;
       break L4;
      }
     }
     $34 = (($right$037$i31$i) + 1)|0;
     $35 = (($34) + ($offset$036$i32$i))|0;
     $36 = (($35) - ($left$0$ph$ph50$i25$i))|0;
     $not$35$i38$i = ($35>>>0)<($4>>>0);
     if ($not$35$i38$i) {
      $132 = $35;$period$0$ph42$i27$i = $36;
     } else {
      $left$0$ph$ph$lcssa34$i29$i = $left$0$ph$ph50$i25$i;$left$0$ph$ph$lcssa34$i93$i = $left$0$ph$ph$lcssa34$i$i;$period$0$ph$lcssa33$i30$i = $36;$period$0$ph$lcssa33$i94$i = $period$0$ph$lcssa33$i$i;
      break L4;
     }
    }
    $41 = (($right$037$i31$i) + 1)|0;
    $not$3541$i44$i = ($41>>>0)<($4>>>0);
    if ($not$3541$i44$i) {
     $131 = $41;$left$0$ph$ph50$i25$i = $right$037$i31$i;
    } else {
     $left$0$ph$ph$lcssa34$i29$i = $right$037$i31$i;$left$0$ph$ph$lcssa34$i93$i = $left$0$ph$ph$lcssa34$i$i;$period$0$ph$lcssa33$i30$i = 1;$period$0$ph$lcssa33$i94$i = $period$0$ph$lcssa33$i$i;
     break L4;
    }
   }
   __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$29,$4);
   // unreachable;
  }
 } while(0);
 $42 = ($left$0$ph$ph$lcssa34$i93$i>>>0)>($left$0$ph$ph$lcssa34$i29$i>>>0);
 $$sink3$i = $42 ? $left$0$ph$ph$lcssa34$i93$i : $left$0$ph$ph$lcssa34$i29$i;
 $$sink$i = $42 ? $period$0$ph$lcssa33$i94$i : $period$0$ph$lcssa33$i30$i;
 $43 = ($$sink3$i>>>0)>($4>>>0);
 if ($43) {
  __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($$sink3$i,$4);
  // unreachable;
 }
 $44 = (($$sink$i) + ($$sink3$i))|0;
 $45 = ($44>>>0)<($$sink$i>>>0);
 if ($45) {
  __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($$sink$i,$44);
  // unreachable;
 }
 $46 = ($44>>>0)>($4>>>0);
 if ($46) {
  __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($44,$4);
  // unreachable;
 }
 $47 = (($3) + ($$sink$i)|0);
 $48 = ($$sink$i|0)==(0);
 if ($48) {
  label = 30;
 } else {
  $49 = (_memcmp($3,$47,$$sink3$i)|0);
  $50 = ($49|0)==(0);
  if ($50) {
   label = 30;
  } else {
   $103 = (($4) - ($$sink3$i))|0;
   $104 = ($103>>>0)>=($$sink3$i>>>0);
   $_0$0$sroa$speculated$i$i88$i = $104 ? $103 : $$sink3$i;
   $105 = (($3) + ($4)|0);
   $107 = $3;$114 = 0;$116 = 0;
   while(1) {
    $106 = ((($107)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108 & 63;
    $110 = $109&255;
    $111 = (_bitshift64Shl(1,0,($110|0))|0);
    $112 = tempRet0;
    $113 = $111 | $114;
    $115 = $112 | $116;
    $117 = ($106|0)==($105|0);
    if ($117) {
     break;
    } else {
     $107 = $106;$114 = $113;$116 = $115;
    }
   }
   $118 = (($_0$0$sroa$speculated$i$i88$i) + 1)|0;
   $$sink13$i = $118;$$sink15$i = $$sink3$i;$$sink5$i = -1;$$sink7$i = -1;$125 = $113;$128 = $115;
  }
 }
 do {
  if ((label|0) == 30) {
   $$neg26$i$i = (($4) + -1)|0;
   $left$0$i$i = 0;$offset$0$i$i = 0;$period$0$i$i = 1;$right$0$i$i = 1;
   while(1) {
    $51 = (($right$0$i$i) + ($offset$0$i$i))|0;
    $52 = ($51>>>0)<($4>>>0);
    if (!($52)) {
     $left$1$i$i = $left$0$i$i;
     label = 40;
     break;
    }
    $$neg$i$i = $right$0$i$i ^ -1;
    $$neg25$i$i = (($4) - ($offset$0$i$i))|0;
    $53 = (($$neg25$i$i) + ($$neg$i$i))|0;
    $54 = ($53>>>0)<($4>>>0);
    if (!($54)) {
     label = 33;
     break;
    }
    $55 = (($3) + ($53)|0);
    $56 = HEAP8[$55>>0]|0;
    $$neg27$i$i = (($$neg26$i$i) - ($offset$0$i$i))|0;
    $57 = (($$neg27$i$i) - ($left$0$i$i))|0;
    $58 = ($57>>>0)<($4>>>0);
    if (!($58)) {
     label = 35;
     break;
    }
    $59 = (($3) + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = ($56&255)<($60&255);
    if ($61) {
     $66 = (($offset$0$i$i) + 1)|0;
     $67 = (($66) + ($right$0$i$i))|0;
     $68 = (($67) - ($left$0$i$i))|0;
     $left$2$i$i = $left$0$i$i;$offset$1$i$i = 0;$period$1$i$i = $68;$right$1$i$i = $67;
    } else {
     $62 = ($56<<24>>24)==($60<<24>>24);
     $63 = (($offset$0$i$i) + 1)|0;
     $64 = ($63|0)==($period$0$i$i|0);
     $$21$i$i = $64 ? 0 : $63;
     $65 = $64 ? $63 : 0;
     $period$0$$i$i = $62 ? $period$0$i$i : 1;
     $$21$$i$i = $62 ? $$21$i$i : 0;
     $$right$0$$v$i$i = $62 ? $65 : 1;
     $$right$0$$i$i = (($$right$0$$v$i$i) + ($right$0$i$i))|0;
     $left$0$right$0$i$i = $62 ? $left$0$i$i : $right$0$i$i;
     $left$2$i$i = $left$0$right$0$i$i;$offset$1$i$i = $$21$$i$i;$period$1$i$i = $period$0$$i$i;$right$1$i$i = $$right$0$$i$i;
    }
    $69 = ($period$1$i$i|0)==($$sink$i|0);
    if ($69) {
     $left$1$i$i = $left$2$i$i;
     label = 40;
     break;
    } else {
     $left$0$i$i = $left$2$i$i;$offset$0$i$i = $offset$1$i$i;$period$0$i$i = $period$1$i$i;$right$0$i$i = $right$1$i$i;
    }
   }
   if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$53,$4);
    // unreachable;
   }
   else if ((label|0) == 35) {
    __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$57,$4);
    // unreachable;
   }
   else if ((label|0) == 40) {
    $left$0$i56$i = 0;$offset$0$i54$i = 0;$period$0$i53$i = 1;$right$0$i55$i = 1;
    while(1) {
     $70 = (($right$0$i55$i) + ($offset$0$i54$i))|0;
     $71 = ($70>>>0)<($4>>>0);
     if (!($71)) {
      $left$1$i58$i = $left$0$i56$i;
      label = 50;
      break;
     }
     $$neg$i59$i = $right$0$i55$i ^ -1;
     $$neg25$i60$i = (($4) - ($offset$0$i54$i))|0;
     $72 = (($$neg25$i60$i) + ($$neg$i59$i))|0;
     $73 = ($72>>>0)<($4>>>0);
     if (!($73)) {
      label = 43;
      break;
     }
     $74 = (($3) + ($72)|0);
     $75 = HEAP8[$74>>0]|0;
     $$neg27$i63$i = (($$neg26$i$i) - ($offset$0$i54$i))|0;
     $76 = (($$neg27$i63$i) - ($left$0$i56$i))|0;
     $77 = ($76>>>0)<($4>>>0);
     if (!($77)) {
      label = 45;
      break;
     }
     $78 = (($3) + ($76)|0);
     $79 = HEAP8[$78>>0]|0;
     $$not$not$i66$i = ($75&255)>($79&255);
     if ($$not$not$i66$i) {
      $84 = (($offset$0$i54$i) + 1)|0;
      $85 = (($84) + ($right$0$i55$i))|0;
      $86 = (($85) - ($left$0$i56$i))|0;
      $left$2$i79$i = $left$0$i56$i;$offset$1$i77$i = 0;$period$1$i76$i = $86;$right$1$i78$i = $85;
     } else {
      $80 = ($75<<24>>24)==($79<<24>>24);
      $81 = (($offset$0$i54$i) + 1)|0;
      $82 = ($81|0)==($period$0$i53$i|0);
      $$21$i68$i = $82 ? 0 : $81;
      $83 = $82 ? $81 : 0;
      $period$0$$i69$i = $80 ? $period$0$i53$i : 1;
      $$21$$i70$i = $80 ? $$21$i68$i : 0;
      $$right$0$$v$i71$i = $80 ? $83 : 1;
      $$right$0$$i72$i = (($$right$0$$v$i71$i) + ($right$0$i55$i))|0;
      $left$0$right$0$i73$i = $80 ? $left$0$i56$i : $right$0$i55$i;
      $left$2$i79$i = $left$0$right$0$i73$i;$offset$1$i77$i = $$21$$i70$i;$period$1$i76$i = $period$0$$i69$i;$right$1$i78$i = $$right$0$$i72$i;
     }
     $87 = ($period$1$i76$i|0)==($$sink$i|0);
     if ($87) {
      $left$1$i58$i = $left$2$i79$i;
      label = 50;
      break;
     } else {
      $left$0$i56$i = $left$2$i79$i;$offset$0$i54$i = $offset$1$i77$i;$period$0$i53$i = $period$1$i76$i;$right$0$i55$i = $right$1$i78$i;
     }
    }
    if ((label|0) == 43) {
     __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$72,$4);
     // unreachable;
    }
    else if ((label|0) == 45) {
     __ZN4core9panicking18panic_bounds_check17h00738207f5476c9aE(3476,$76,$4);
     // unreachable;
    }
    else if ((label|0) == 50) {
     $88 = ($left$1$i58$i>>>0)>=($left$1$i$i>>>0);
     $_0$0$sroa$speculated$i$i$i = $88 ? $left$1$i58$i : $left$1$i$i;
     $89 = (($4) - ($_0$0$sroa$speculated$i$i$i))|0;
     $90 = ($$sink$i>>>0)>($4>>>0);
     if ($90) {
      __ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E($$sink$i,$4);
      // unreachable;
     }
     if ($48) {
      $$sink13$i = 0;$$sink15$i = $89;$$sink5$i = $4;$$sink7$i = 0;$125 = 0;$128 = 0;
      break;
     } else {
      $101 = 0;$92 = $3;$99 = 0;
     }
     while(1) {
      $91 = ((($92)) + 1|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = $93 & 63;
      $95 = $94&255;
      $96 = (_bitshift64Shl(1,0,($95|0))|0);
      $97 = tempRet0;
      $98 = $96 | $99;
      $100 = $97 | $101;
      $102 = ($91|0)==($47|0);
      if ($102) {
       $$sink13$i = $$sink$i;$$sink15$i = $89;$$sink5$i = $4;$$sink7$i = 0;$125 = $98;$128 = $100;
       break;
      } else {
       $101 = $100;$92 = $91;$99 = $98;
      }
     }
    }
   }
  }
 } while(0);
 $119 = ((($0)) + 48|0);
 HEAP32[$119>>2] = $1;
 $120 = ((($0)) + 52|0);
 HEAP32[$120>>2] = $2;
 $121 = ((($0)) + 56|0);
 HEAP32[$121>>2] = $3;
 $122 = ((($0)) + 60|0);
 HEAP32[$122>>2] = $4;
 HEAP32[$0>>2] = 1;
 $_15$sroa$4$0$$sroa_idx = ((($0)) + 4|0);
 $_15$sroa$4$sroa$3$0$_15$sroa$4$0$$sroa_cast$sroa_idx43 = ((($0)) + 8|0);
 $123 = $_15$sroa$4$sroa$3$0$_15$sroa$4$0$$sroa_cast$sroa_idx43;
 $124 = $123;
 HEAP32[$124>>2] = $125;
 $126 = (($123) + 4)|0;
 $127 = $126;
 HEAP32[$127>>2] = $128;
 $_15$sroa$4$sroa$4$0$_15$sroa$4$0$$sroa_cast$sroa_idx45 = ((($0)) + 16|0);
 HEAP32[$_15$sroa$4$sroa$4$0$_15$sroa$4$0$$sroa_cast$sroa_idx45>>2] = $$sink3$i;
 $_15$sroa$4$sroa$5$0$_15$sroa$4$0$$sroa_cast$sroa_cast = ((($_15$sroa$4$0$$sroa_idx)) + 16|0);
 HEAP32[$_15$sroa$4$sroa$5$0$_15$sroa$4$0$$sroa_cast$sroa_cast>>2] = $$sink15$i;
 $_15$sroa$4$sroa$6$0$_15$sroa$4$0$$sroa_cast$sroa_idx48 = ((($0)) + 24|0);
 HEAP32[$_15$sroa$4$sroa$6$0$_15$sroa$4$0$$sroa_cast$sroa_idx48>>2] = $$sink13$i;
 $_15$sroa$4$sroa$7$0$_15$sroa$4$0$$sroa_cast$sroa_cast = ((($_15$sroa$4$0$$sroa_idx)) + 24|0);
 HEAP32[$_15$sroa$4$sroa$7$0$_15$sroa$4$0$$sroa_cast$sroa_cast>>2] = 0;
 $_15$sroa$4$sroa$8$0$_15$sroa$4$0$$sroa_cast$sroa_idx51 = ((($0)) + 32|0);
 HEAP32[$_15$sroa$4$sroa$8$0$_15$sroa$4$0$$sroa_cast$sroa_idx51>>2] = $2;
 $_15$sroa$4$sroa$9$0$_15$sroa$4$0$$sroa_cast$sroa_cast = ((($_15$sroa$4$0$$sroa_idx)) + 32|0);
 HEAP32[$_15$sroa$4$sroa$9$0$_15$sroa$4$0$$sroa_cast$sroa_cast>>2] = $$sink7$i;
 $_15$sroa$4$sroa$10$0$_15$sroa$4$0$$sroa_cast$sroa_idx54 = ((($0)) + 40|0);
 HEAP32[$_15$sroa$4$sroa$10$0$_15$sroa$4$0$$sroa_cast$sroa_idx54>>2] = $$sink5$i;
 return;
}
function __ZN4core3str9from_utf817h7d85691fcaee98e9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$sroa$0$0$copyload = 0, $_4$sroa$5$0$$sroa_idx10 = 0, $_5 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 __ZN4core3str19run_utf8_validation17h6a1ec9b17fe6bdd5E($_5,$1,$2);
 $_4$sroa$0$0$copyload = HEAP32[$_5>>2]|0;
 $_4$sroa$5$0$$sroa_idx10 = ((($_5)) + 4|0);
 $3 = $_4$sroa$5$0$$sroa_idx10;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $cond = ($_4$sroa$0$0$copyload|0)==(0);
 if ($cond) {
  HEAP32[$0>>2] = 0;
  $9 = ((($0)) + 4|0);
  HEAP32[$9>>2] = $1;
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $2;
  STACKTOP = sp;return;
 } else {
  HEAP32[$0>>2] = 1;
  $11 = ((($0)) + 4|0);
  $12 = $11;
  $13 = $12;
  HEAP32[$13>>2] = $5;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZN4core3str19run_utf8_validation17h6a1ec9b17fe6bdd5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$off = 0, $$off211 = 0, $$off213 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $_100$sroa$4$sroa$0$0$_100$sroa$4$0$$sroa_idx$sroa_idx = 0, $_100$sroa$4$sroa$4$0$_100$sroa$4$0$$sroa_idx$sroa_idx = 0, $_111$sroa$4$sroa$0$0$_111$sroa$4$0$$sroa_idx$sroa_idx = 0, $_126$sroa$4$sroa$0$0$_126$sroa$4$0$$sroa_idx$sroa_idx = 0, $_126$sroa$4$sroa$4$0$_126$sroa$4$0$$sroa_idx$sroa_idx = 0;
 var $_137$sroa$4$sroa$0$0$_137$sroa$4$0$$sroa_idx$sroa_idx = 0, $_145$sroa$4$sroa$0$0$_145$sroa$4$0$$sroa_idx$sroa_idx = 0, $_145$sroa$4$sroa$4$0$_145$sroa$4$0$$sroa_idx$sroa_idx = 0, $_155$sroa$4$sroa$0$0$_155$sroa$4$0$$sroa_idx$sroa_idx = 0, $_163$sroa$4$sroa$0$0$_163$sroa$4$0$$sroa_idx$sroa_idx = 0, $_163$sroa$4$sroa$4$0$_163$sroa$4$0$$sroa_idx$sroa_idx = 0, $_166$sroa$4$sroa$0$0$_166$sroa$4$0$$sroa_idx$sroa_idx = 0, $_166$sroa$4$sroa$4$0$_166$sroa$4$0$$sroa_idx$sroa_idx = 0, $_44$sroa$4$sroa$0$0$_44$sroa$4$0$$sroa_idx$sroa_idx = 0, $_52$sroa$4$sroa$0$0$_52$sroa$4$0$$sroa_idx$sroa_idx = 0, $_52$sroa$4$sroa$4$0$_52$sroa$4$0$$sroa_idx$sroa_idx = 0, $_63$sroa$4$sroa$0$0$_63$sroa$4$0$$sroa_idx$sroa_idx = 0, $_82$sroa$4$sroa$0$0$_82$sroa$4$0$$sroa_idx$sroa_idx = 0, $_82$sroa$4$sroa$4$0$_82$sroa$4$0$$sroa_idx$sroa_idx = 0, $_92$sroa$4$sroa$0$0$_92$sroa$4$0$$sroa_idx$sroa_idx = 0, $cond = 0, $cond10 = 0, $cond11 = 0, $cond9 = 0, $index$0$be = 0;
 var $index$0233 = 0, $index$1 = 0, $index$2$lcssa = 0, $index$2228 = 0, $index$3230 = 0, $or$cond184 = 0, $or$cond185 = 0, $or$cond186 = 0, $or$cond187 = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or$cond195 = 0, $or$cond196 = 0, $or$cond197 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(7);
 $4 = (($2) + -7)|0;
 $$ = $3 ? $4 : 0;
 $5 = ($2|0)==(0);
 L1: do {
  if (!($5)) {
   $index$0233 = 0;
   L2: while(1) {
    $6 = (($1) + ($index$0233)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)<(0);
    L4: do {
     if ($8) {
      $13 = $7&255;
      $14 = (8427 + ($13)|0);
      $15 = HEAP8[$14>>0]|0;
      switch ($15<<24>>24) {
      case 2:  {
       $16 = (($index$0233) + 1)|0;
       $17 = ($16>>>0)<($2>>>0);
       if (!($17)) {
        label = 12;
        break L2;
       }
       $25 = (($1) + ($16)|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26 & -64;
       $28 = ($27<<24>>24)==(-128);
       if ($28) {
        $index$1 = $16;
       } else {
        label = 15;
        break L2;
       }
       break;
      }
      case 3:  {
       $18 = (($index$0233) + 1)|0;
       $19 = ($18>>>0)<($2>>>0);
       if (!($19)) {
        label = 16;
        break L2;
       }
       $31 = (($1) + ($18)|0);
       $32 = HEAP8[$31>>0]|0;
       $cond10 = ($7<<24>>24)==(-32);
       $33 = ($32&255)<(192);
       $34 = $32 & -32;
       $35 = ($34<<24>>24)==(-96);
       $36 = $cond10 & $35;
       if (!($36)) {
        $$off213 = (($7) + 31)<<24>>24;
        $40 = ($$off213&255)<(12);
        $41 = ($32<<24>>24)<(0);
        $or$cond184 = $40 & $41;
        $or$cond185 = $33 & $or$cond184;
        if (!($or$cond185)) {
         $cond11 = ($7<<24>>24)==(-19);
         $or$cond186 = $cond11 & $41;
         $42 = ($32&255)<(160);
         $or$cond187 = $42 & $or$cond186;
         if (!($or$cond187)) {
          $43 = $7 & -2;
          $44 = ($43<<24>>24)==(-18);
          $or$cond189 = $44 & $41;
          $or$cond190 = $33 & $or$cond189;
          if (!($or$cond190)) {
           label = 19;
           break L2;
          }
         }
        }
       }
       $37 = (($index$0233) + 2)|0;
       $38 = ($37>>>0)<($2>>>0);
       if (!($38)) {
        label = 23;
        break L2;
       }
       $46 = (($1) + ($37)|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = $47 & -64;
       $49 = ($48<<24>>24)==(-128);
       if ($49) {
        $index$1 = $37;
       } else {
        label = 25;
        break L2;
       }
       break;
      }
      case 4:  {
       $20 = (($index$0233) + 1)|0;
       $21 = ($20>>>0)<($2>>>0);
       if (!($21)) {
        label = 26;
        break L2;
       }
       $52 = (($1) + ($20)|0);
       $53 = HEAP8[$52>>0]|0;
       $cond = ($7<<24>>24)==(-16);
       $$off = (($53) + 112)<<24>>24;
       $54 = ($$off&255)<(48);
       $55 = $cond & $54;
       if (!($55)) {
        $59 = ($53&255)<(192);
        $$off211 = (($7) + 15)<<24>>24;
        $60 = ($$off211&255)<(3);
        $61 = ($53<<24>>24)<(0);
        $or$cond194 = $60 & $61;
        $or$cond195 = $59 & $or$cond194;
        if (!($or$cond195)) {
         $cond9 = ($7<<24>>24)==(-12);
         $or$cond196 = $cond9 & $61;
         $62 = ($53&255)<(144);
         $or$cond197 = $62 & $or$cond196;
         if (!($or$cond197)) {
          label = 29;
          break L2;
         }
        }
       }
       $56 = (($index$0233) + 2)|0;
       $57 = ($56>>>0)<($2>>>0);
       if (!($57)) {
        label = 32;
        break L2;
       }
       $64 = (($1) + ($56)|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65 & -64;
       $67 = ($66<<24>>24)==(-128);
       if (!($67)) {
        label = 34;
        break L2;
       }
       $69 = (($index$0233) + 3)|0;
       $70 = ($69>>>0)<($2>>>0);
       if (!($70)) {
        label = 36;
        break L2;
       }
       $72 = (($1) + ($69)|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73 & -64;
       $75 = ($74<<24>>24)==(-128);
       if ($75) {
        $index$1 = $69;
       } else {
        label = 38;
        break L2;
       }
       break;
      }
      default: {
       label = 10;
       break L2;
      }
      }
      $23 = (($index$1) + 1)|0;
      $index$0$be = $23;
     } else {
      $9 = $6;
      $10 = $9 & 3;
      $11 = ($10|0)==(0);
      if (!($11)) {
       $77 = (($index$0233) + 1)|0;
       $index$0$be = $77;
       break;
      }
      $12 = ($index$0233>>>0)<($$>>>0);
      L31: do {
       if ($12) {
        $index$2228 = $index$0233;
        while(1) {
         $79 = (($1) + ($index$2228)|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = ((($79)) + 4|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = $82 | $80;
         $84 = $83 & -2139062144;
         $85 = ($84|0)==(0);
         if (!($85)) {
          $index$2$lcssa = $index$2228;
          break L31;
         }
         $87 = (($index$2228) + 8)|0;
         $88 = ($87>>>0)<($$>>>0);
         if ($88) {
          $index$2228 = $87;
         } else {
          $index$2$lcssa = $87;
          break;
         }
        }
       } else {
        $index$2$lcssa = $index$0233;
       }
      } while(0);
      $86 = ($index$2$lcssa>>>0)<($2>>>0);
      if ($86) {
       $index$3230 = $index$2$lcssa;
       while(1) {
        $89 = (($1) + ($index$3230)|0);
        $90 = HEAP8[$89>>0]|0;
        $91 = ($90<<24>>24)>(-1);
        if (!($91)) {
         $index$0$be = $index$3230;
         break L4;
        }
        $92 = (($index$3230) + 1)|0;
        $93 = ($92>>>0)<($2>>>0);
        if ($93) {
         $index$3230 = $92;
        } else {
         $index$0$be = $92;
         break;
        }
       }
      } else {
       $index$0$be = $index$2$lcssa;
      }
     }
    } while(0);
    $78 = ($index$0$be>>>0)<($2>>>0);
    if ($78) {
     $index$0233 = $index$0$be;
    } else {
     break L1;
    }
   }
   switch (label|0) {
    case 10: {
     HEAP32[$0>>2] = 1;
     $22 = ((($0)) + 4|0);
     HEAP32[$22>>2] = $index$0233;
     $_166$sroa$4$sroa$0$0$_166$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_166$sroa$4$sroa$0$0$_166$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_166$sroa$4$sroa$4$0$_166$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_166$sroa$4$sroa$4$0$_166$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 12: {
     HEAP32[$0>>2] = 1;
     $24 = ((($0)) + 4|0);
     HEAP32[$24>>2] = $index$0233;
     $_44$sroa$4$sroa$0$0$_44$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_44$sroa$4$sroa$0$0$_44$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 15: {
     HEAP32[$0>>2] = 1;
     $29 = ((($0)) + 4|0);
     HEAP32[$29>>2] = $index$0233;
     $_52$sroa$4$sroa$0$0$_52$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_52$sroa$4$sroa$0$0$_52$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_52$sroa$4$sroa$4$0$_52$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_52$sroa$4$sroa$4$0$_52$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 16: {
     HEAP32[$0>>2] = 1;
     $30 = ((($0)) + 4|0);
     HEAP32[$30>>2] = $index$0233;
     $_63$sroa$4$sroa$0$0$_63$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_63$sroa$4$sroa$0$0$_63$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 19: {
     HEAP32[$0>>2] = 1;
     $39 = ((($0)) + 4|0);
     HEAP32[$39>>2] = $index$0233;
     $_82$sroa$4$sroa$0$0$_82$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_82$sroa$4$sroa$0$0$_82$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_82$sroa$4$sroa$4$0$_82$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_82$sroa$4$sroa$4$0$_82$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 23: {
     HEAP32[$0>>2] = 1;
     $45 = ((($0)) + 4|0);
     HEAP32[$45>>2] = $index$0233;
     $_92$sroa$4$sroa$0$0$_92$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_92$sroa$4$sroa$0$0$_92$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 25: {
     HEAP32[$0>>2] = 1;
     $50 = ((($0)) + 4|0);
     HEAP32[$50>>2] = $index$0233;
     $_100$sroa$4$sroa$0$0$_100$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_100$sroa$4$sroa$0$0$_100$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_100$sroa$4$sroa$4$0$_100$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_100$sroa$4$sroa$4$0$_100$sroa$4$0$$sroa_idx$sroa_idx>>0] = 2;
     return;
     break;
    }
    case 26: {
     HEAP32[$0>>2] = 1;
     $51 = ((($0)) + 4|0);
     HEAP32[$51>>2] = $index$0233;
     $_111$sroa$4$sroa$0$0$_111$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_111$sroa$4$sroa$0$0$_111$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 29: {
     HEAP32[$0>>2] = 1;
     $58 = ((($0)) + 4|0);
     HEAP32[$58>>2] = $index$0233;
     $_126$sroa$4$sroa$0$0$_126$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_126$sroa$4$sroa$0$0$_126$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_126$sroa$4$sroa$4$0$_126$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_126$sroa$4$sroa$4$0$_126$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     return;
     break;
    }
    case 32: {
     HEAP32[$0>>2] = 1;
     $63 = ((($0)) + 4|0);
     HEAP32[$63>>2] = $index$0233;
     $_137$sroa$4$sroa$0$0$_137$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_137$sroa$4$sroa$0$0$_137$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 34: {
     HEAP32[$0>>2] = 1;
     $68 = ((($0)) + 4|0);
     HEAP32[$68>>2] = $index$0233;
     $_145$sroa$4$sroa$0$0$_145$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_145$sroa$4$sroa$0$0$_145$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_145$sroa$4$sroa$4$0$_145$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_145$sroa$4$sroa$4$0$_145$sroa$4$0$$sroa_idx$sroa_idx>>0] = 2;
     return;
     break;
    }
    case 36: {
     HEAP32[$0>>2] = 1;
     $71 = ((($0)) + 4|0);
     HEAP32[$71>>2] = $index$0233;
     $_155$sroa$4$sroa$0$0$_155$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_155$sroa$4$sroa$0$0$_155$sroa$4$0$$sroa_idx$sroa_idx>>0] = 0;
     return;
     break;
    }
    case 38: {
     HEAP32[$0>>2] = 1;
     $76 = ((($0)) + 4|0);
     HEAP32[$76>>2] = $index$0233;
     $_163$sroa$4$sroa$0$0$_163$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 8|0);
     HEAP8[$_163$sroa$4$sroa$0$0$_163$sroa$4$0$$sroa_idx$sroa_idx>>0] = 1;
     $_163$sroa$4$sroa$4$0$_163$sroa$4$0$$sroa_idx$sroa_idx = ((($0)) + 9|0);
     HEAP8[$_163$sroa$4$sroa$4$0$_163$sroa$4$0$$sroa_idx$sroa_idx>>0] = 3;
     return;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN4core3fmt8builders11DebugStruct5field17h0bd982571ab7b467E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink8$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $_0$sroa$0$0$i$i = 0, $_13$i$i = 0, $_20$i$i = 0, $_41$sroa$4$0$$sroa_idx18$i$i = 0, $_41$sroa$5$0$$sroa_idx20$i$i = 0, $_41$sroa$623$0$$sroa_idx25$i$i = 0, $_41$sroa$7$0$$sroa_idx27$i$i = 0, $_48$i$i = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $_9$sroa$0$0$$sroa_idx = 0, $_9$sroa$0$0$copyload = 0, $cond$i = 0, $name = 0, $prefix$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 104|0;
 $_48$i$i = sp + 80|0;
 $_20$i$i = sp + 56|0;
 $_13$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $value = sp + 8|0;
 $name = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $_9$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_9$sroa$0$0$copyload = HEAP8[$_9$sroa$0$0$$sroa_idx>>0]|0;
 $7 = $name;
 $8 = $value;
 $cond$i = ($_9$sroa$0$0$copyload<<24>>24)==(0);
 if (!($cond$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_9$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return ($0|0);
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 $$sink8$i$i = $11 ? 5153 : 10609;
 $$sink$i$i = $11 ? 1 : 2;
 HEAP32[$prefix$i$i>>2] = $$sink8$i$i;
 $12 = ((($prefix$i$i)) + 4|0);
 HEAP32[$12>>2] = $$sink$i$i;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = $prefix$i$i;
  HEAP32[$_48$i$i>>2] = $29;
  $30 = ((($_48$i$i)) + 4|0);
  HEAP32[$30>>2] = (154);
  $31 = ((($_48$i$i)) + 8|0);
  HEAP32[$31>>2] = $7;
  $32 = ((($_48$i$i)) + 12|0);
  HEAP32[$32>>2] = (154);
  $33 = ((($_48$i$i)) + 16|0);
  HEAP32[$33>>2] = $8;
  $34 = ((($_48$i$i)) + 20|0);
  HEAP32[$34>>2] = (159);
  $35 = ((($13)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($13)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 4056;
  $_41$sroa$4$0$$sroa_idx18$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_41$sroa$4$0$$sroa_idx18$i$i>>2] = 3;
  $_41$sroa$5$0$$sroa_idx20$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_41$sroa$5$0$$sroa_idx20$i$i>>2] = 0;
  $_41$sroa$623$0$$sroa_idx25$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_41$sroa$623$0$$sroa_idx25$i$i>>2] = $_48$i$i;
  $_41$sroa$7$0$$sroa_idx27$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_41$sroa$7$0$$sroa_idx27$i$i>>2] = 3;
  $39 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($36,$38,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $39;
 } else {
  $17 = $13;
  HEAP32[$writer$i$i>>2] = $17;
  $18 = ((($writer$i$i)) + 4|0);
  HEAP8[$18>>0] = 0;
  $19 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $19;
  $20 = ((($_20$i$i)) + 4|0);
  HEAP32[$20>>2] = (154);
  $21 = ((($_20$i$i)) + 8|0);
  HEAP32[$21>>2] = $7;
  $22 = ((($_20$i$i)) + 12|0);
  HEAP32[$22>>2] = (154);
  $23 = ((($_20$i$i)) + 16|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($_20$i$i)) + 20|0);
  HEAP32[$24>>2] = (159);
  HEAP32[$_13$i$i>>2] = 3924;
  $25 = ((($_13$i$i)) + 4|0);
  HEAP32[$25>>2] = 3;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_13$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3948;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_13$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 3;
  $26 = ((($_13$i$i)) + 16|0);
  HEAP32[$26>>2] = $_20$i$i;
  $27 = ((($_13$i$i)) + 20|0);
  HEAP32[$27>>2] = 3;
  $28 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($writer$i$i,2152,$_13$i$i)|0);
  $_0$sroa$0$0$i$i = $28;
 }
 $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_9$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 HEAP8[$$pre$phiZ2D>>0] = 1;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3fmt8builders11DebugStruct6finish17hf5f00ad81e214bfcE($0) {
 $0 = $0|0;
 var $$sink$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_9$sroa$0$0$$sroa_idx$phi$trans$insert = 0, $_9$sroa$0$0$copyload = 0, $_9$sroa$0$0$copyload$pre = 0, $cond$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $_9$sroa$0$0$$sroa_idx$phi$trans$insert = ((($0)) + 4|0);
 $_9$sroa$0$0$copyload$pre = HEAP8[$_9$sroa$0$0$$sroa_idx$phi$trans$insert>>0]|0;
 if ($3) {
  $_9$sroa$0$0$copyload = $_9$sroa$0$0$copyload$pre;
  return ($_9$sroa$0$0$copyload|0);
 }
 $cond$i = ($_9$sroa$0$0$copyload$pre<<24>>24)==(0);
 if ($cond$i) {
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 4;
  $7 = ($6|0)!=(0);
  $$sink$i$i = $7 ? 10613 : 10615;
  $8 = ((($4)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($4)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,$$sink$i$i,2)|0);
  $_0$sroa$0$0$i = $14;
 } else {
  $_0$sroa$0$0$i = 1;
 }
 HEAP8[$_9$sroa$0$0$$sroa_idx$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $_9$sroa$0$0$copyload = $_0$sroa$0$0$i;
 return ($_9$sroa$0$0$copyload|0);
}
function __ZN4core3fmt8builders10DebugTuple6finish17haa0c913abe0c89c7E($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_10$sroa$0$0$$sroa_idx$phi$trans$insert = 0, $_10$sroa$0$0$copyload = 0, $_10$sroa$0$0$copyload$pre = 0;
 var $cond$i = 0, $cond$i$i = 0, $cond8$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $_10$sroa$0$0$$sroa_idx$phi$trans$insert = ((($0)) + 8|0);
 $_10$sroa$0$0$copyload$pre = HEAP8[$_10$sroa$0$0$$sroa_idx$phi$trans$insert>>0]|0;
 if ($3) {
  $_10$sroa$0$0$copyload = $_10$sroa$0$0$copyload$pre;
  return ($_10$sroa$0$0$copyload|0);
 }
 $cond$i = ($_10$sroa$0$0$copyload$pre<<24>>24)==(0);
 do {
  if ($cond$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   if ($7) {
    $15 = $2;
   } else {
    $8 = ((($4)) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($4)) + 28|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,10577,1)|0);
    $cond8$i$i = ($14<<24>>24)==(0);
    if (!($cond8$i$i)) {
     $_0$sroa$0$0$i = 1;
     break;
    }
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
   }
   $16 = ($15|0)==(1);
   if ($16) {
    $17 = ((($0)) + 9|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $20 = HEAP32[$0>>2]|0;
     $21 = ((($20)) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($20)) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_iiii[$26 & 255]($22,5153,1)|0);
     $cond$i$i = ($27<<24>>24)==(0);
     if (!($cond$i$i)) {
      $_0$sroa$0$0$i = 1;
      break;
     }
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiii[$34 & 255]($30,10578,1)|0);
   $_0$sroa$0$0$i = $35;
  } else {
   $_0$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$_10$sroa$0$0$$sroa_idx$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $_10$sroa$0$0$copyload = $_0$sroa$0$0$i;
 return ($_10$sroa$0$0$copyload|0);
}
function __ZN4core3fmt8builders10DebugInner5entry17h335c9bbe7143c8b8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink11$i$i = 0, $$sink7$i$i = 0, $$sink9$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_13$i$i = 0, $_20$i$i = 0;
 var $_39$sroa$4$0$$sroa_idx19$i$i = 0, $_39$sroa$5$0$$sroa_idx21$i$i = 0, $_39$sroa$624$0$$sroa_idx26$i$i = 0, $_39$sroa$7$0$$sroa_idx28$i$i = 0, $_46$i$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$0$0$copyload = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $cond$i = 0, $entry = 0, $prefix$i$i = 0, $prefix1$i$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_7$i$i$i = sp + 88|0;
 $_46$i$i = sp + 72|0;
 $prefix1$i$i = sp + 64|0;
 $_20$i$i = sp + 48|0;
 $_13$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $writer$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_6$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_6$sroa$0$0$copyload = HEAP8[$_6$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $entry;
 $cond$i = ($_6$sroa$0$0$copyload<<24>>24)==(0);
 if (!($cond$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 if ($8) {
  $24 = ($10<<24>>24)!=(0);
  $$sink11$i$i = $24 ? 10617 : 13480;
  $$sink9$i$i = $24 ? 2 : 0;
  HEAP32[$prefix1$i$i>>2] = $$sink11$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$sink9$i$i;
  $26 = $prefix1$i$i;
  HEAP32[$_46$i$i>>2] = $26;
  $27 = ((($_46$i$i)) + 4|0);
  HEAP32[$27>>2] = (154);
  $28 = ((($_46$i$i)) + 8|0);
  HEAP32[$28>>2] = $4;
  $29 = ((($_46$i$i)) + 12|0);
  HEAP32[$29>>2] = (159);
  $30 = ((($5)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 4080;
  $_39$sroa$4$0$$sroa_idx19$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_39$sroa$4$0$$sroa_idx19$i$i>>2] = 2;
  $_39$sroa$5$0$$sroa_idx21$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_39$sroa$5$0$$sroa_idx21$i$i>>2] = 0;
  $_39$sroa$624$0$$sroa_idx26$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_39$sroa$624$0$$sroa_idx26$i$i>>2] = $_46$i$i;
  $_39$sroa$7$0$$sroa_idx28$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_39$sroa$7$0$$sroa_idx28$i$i>>2] = 2;
  $34 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($31,$33,$_7$i$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $34;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $11 = $5;
  HEAP32[$writer$i$i>>2] = $11;
  $12 = ((($writer$i$i)) + 4|0);
  HEAP8[$12>>0] = 0;
  $13 = ($10<<24>>24)!=(0);
  $$sink7$i$i = $13 ? 5153 : 13480;
  $14 = $10&255;
  HEAP32[$prefix$i$i>>2] = $$sink7$i$i;
  $15 = ((($prefix$i$i)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $16;
  $17 = ((($_20$i$i)) + 4|0);
  HEAP32[$17>>2] = (154);
  $18 = ((($_20$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_20$i$i)) + 12|0);
  HEAP32[$19>>2] = (159);
  HEAP32[$_13$i$i>>2] = 3788;
  $20 = ((($_13$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_13$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3804;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_13$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $21 = ((($_13$i$i)) + 16|0);
  HEAP32[$21>>2] = $_20$i$i;
  $22 = ((($_13$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($writer$i$i,2152,$_13$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $23;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
}
function __ZN4core3fmt8builders9DebugList5entry17h72a333a8d23408c0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17h335c9bbe7143c8b8E($0,$1,$2);
 return ($0|0);
}
function __ZN4core3fmt8builders9DebugList6finish17h99f83a18b1d8b20bE($0) {
 $0 = $0|0;
 var $$sink$i = 0, $$sink2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_10$sroa$0$0$$sroa_idx$i = 0, $_10$sroa$0$0$copyload$i = 0, $_4$0$off0$i = 0, $cond$i = 0, $cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 2;
 } else {
  $5 = ((($0)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 2;
  } else {
   $_4$0$off0$i = 1;
  }
 }
 if ((label|0) == 2) {
  $_4$0$off0$i = 0;
 }
 $_10$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 $_10$sroa$0$0$copyload$i = HEAP8[$_10$sroa$0$0$$sroa_idx$i>>0]|0;
 $cond$i$i = ($_10$sroa$0$0$copyload$i<<24>>24)==(0);
 if (!($cond$i$i)) {
  HEAP8[$_10$sroa$0$0$$sroa_idx$i>>0] = 1;
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $$sink$i = $_4$0$off0$i&1;
 $$sink2$i = $_4$0$off0$i ? 10577 : 13480;
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 255]($9,$$sink2$i,$$sink$i)|0);
 HEAP8[$_10$sroa$0$0$$sroa_idx$i>>0] = $14;
 $cond$i = ($14<<24>>24)==(0);
 if (!($cond$i)) {
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iiii[$21 & 255]($17,5183,1)|0);
 $_0$sroa$0$0$i = $22;
 return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt10ArgumentV110from_usize17h895a547c719e18d7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 158;
 return;
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h6a7d6b51b432c926E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$0>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$0+20>>2]|0;
 $6 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9write_str17h3fbd15666f3f1562E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 255]($4,$1,$2)|0);
 return ($9|0);
}
function __ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$1>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$1+20>>2]|0;
 $6 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9alternate17h411f6d5fa0415fb5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZN4core3fmt9Formatter12debug_struct17h7f7bbbf8a1914645E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_9$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiii[$9 & 255]($5,$2,$3)|0);
 HEAP32[$0>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = $10;
 $11 = ((($0)) + 5|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZN4core3fmt9Formatter11debug_tuple17hdb0d47181a82b560E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_9$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiii[$9 & 255]($5,$2,$3)|0);
 $11 = ($3|0)==(0);
 HEAP32[$0>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i = ((($0)) + 8|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = $10;
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 9|0);
 $14 = $11&1;
 HEAP8[$13>>0] = $14;
 return;
}
function __ZN4core3fmt9Formatter10debug_list17h8a79fc8ff848a03cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_13$sroa$4$0$$sroa_idx$i = 0, $_13$sroa$5$0$$sroa_idx$i = 0, $_5$sroa$4$0$$sroa_idx9$i = 0, $_5$sroa$5$0$$sroa_idx11$i = 0, $_5$sroa$614$0$$sroa_idx16$i = 0, $_5$sroa$7$0$$sroa_idx18$i = 0, $_7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7$i$i = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$_7$i$i>>2] = 4096;
 $_5$sroa$4$0$$sroa_idx9$i = ((($_7$i$i)) + 4|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx9$i>>2] = 1;
 $_5$sroa$5$0$$sroa_idx11$i = ((($_7$i$i)) + 8|0);
 HEAP32[$_5$sroa$5$0$$sroa_idx11$i>>2] = 0;
 $_5$sroa$614$0$$sroa_idx16$i = ((($_7$i$i)) + 16|0);
 HEAP32[$_5$sroa$614$0$$sroa_idx16$i>>2] = 12908;
 $_5$sroa$7$0$$sroa_idx18$i = ((($_7$i$i)) + 20|0);
 HEAP32[$_5$sroa$7$0$$sroa_idx18$i>>2] = 0;
 $6 = (__ZN4core3fmt5write17h1b6d99dcd397fba4E($3,$5,$_7$i$i)|0);
 HEAP32[$0>>2] = $1;
 $_13$sroa$4$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP8[$_13$sroa$4$0$$sroa_idx$i>>0] = $6;
 $_13$sroa$5$0$$sroa_idx$i = ((($0)) + 5|0);
 HEAP8[$_13$sroa$5$0$$sroa_idx$i>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN71__LT_core__fmt__Formatter_LT__u27_a_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9ce5e71fb243cf53E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 255]($3,$1)|0);
 return ($8|0);
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h4d77fdb82a6fd7deE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$$$i = 0, $$$$i = 0, $$$i = 0, $$cast$i = 0, $$cast$i148 = 0, $$cast$i148158 = 0, $$cast$i151 = 0, $$off$i$i = 0, $$off10$i$i = 0, $$off6$i$i = 0, $$off8$i$i = 0, $$off9$i$i = 0, $$pre$i$i$i = 0, $$pre$phi$i$i$ph$iZ2D = 0, $$sink4$i$i$i$i = 0, $$sink4$v$i$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i14$i$i$i = 0, $_0$0$i20$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_4$0$i$i$i$i$i = 0;
 var $_5$sroa$4$0$ph$i = 0, $_61$sroa$13$2$ph = 0, $cond = 0, $cond15 = 0, $cond17 = 0, $cond18 = 0, $from$0$ph$lcssa147 = 0, $from$0$ph$lcssa147178 = 0, $from$0$ph$lcssa147179 = 0, $from$0$ph156 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0$ph154 = 0, $iter$sroa$0$0150 = 0, $iter$sroa$6$0$ph153 = 0, $iter$sroa$6$0149 = 0, $iter$sroa$6$1 = 0, $iter$sroa$6$2 = 0, $iter$sroa$6$3 = 0, $iter$sroa$6$4 = 0;
 var $iter1$sroa$0$0 = 0, $iter1$sroa$0$1$ph = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i$i47 = 0, $or$cond$i3$i$i$i = 0, $or$cond19$i$i = 0, $or$cond21$i$i = 0, $or$cond23$i$i = 0, $or$cond23$i$not$i = 0, $phitmp$i$i$i = 0, $phitmp26$i$i$i = 0, $phitmp27$i$i$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$clear = 0, $trunc$i$i$i$i = 0, $trunc$i$i$i$i$clear = 0;
 var $trunc$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 255]($4,34)|0);
 $cond = ($9<<24>>24)==(0);
 if (!($cond)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $10 = (($0) + ($1)|0);
 $11 = ($1|0)==(0);
 do {
  if ($11) {
   $from$0$ph$lcssa147179 = 0;
   label = 17;
  } else {
   $12 = $0;
   $$cast$i148158 = $0;$from$0$ph156 = 0;$iter$sroa$0$0$ph154 = 0;$iter$sroa$6$0$ph153 = $12;
   L6: while(1) {
    $$cast$i151 = $$cast$i148158;$iter$sroa$0$0150 = $iter$sroa$0$0$ph154;$iter$sroa$6$0149 = $iter$sroa$6$0$ph153;
    L8: while(1) {
     $15 = ((($$cast$i151)) + 1|0);
     $16 = $15;
     $14 = HEAP8[$$cast$i151>>0]|0;
     $17 = ($14<<24>>24)>(-1);
     if ($17) {
      $13 = $14&255;
      $_5$sroa$4$0$ph$i = $13;$iter$sroa$6$4 = $16;
     } else {
      $18 = $14 & 31;
      $19 = $18&255;
      $20 = ($15|0)==($10|0);
      if ($20) {
       $28 = $10;$_0$0$i20$i$i$i = 0;$iter$sroa$6$1 = $16;
      } else {
       $21 = ((($$cast$i151)) + 2|0);
       $22 = $21;
       $23 = HEAP8[$15>>0]|0;
       $phitmp$i$i$i = $23 & 63;
       $28 = $21;$_0$0$i20$i$i$i = $phitmp$i$i$i;$iter$sroa$6$1 = $22;
      }
      $24 = $19 << 6;
      $25 = $_0$0$i20$i$i$i&255;
      $26 = $25 | $24;
      $27 = ($14&255)>(223);
      if ($27) {
       $29 = ($28|0)==($10|0);
       if ($29) {
        $39 = $10;$_0$0$i14$i$i$i = 0;$iter$sroa$6$2 = $iter$sroa$6$1;
       } else {
        $30 = ((($28)) + 1|0);
        $31 = $30;
        $32 = HEAP8[$28>>0]|0;
        $phitmp26$i$i$i = $32 & 63;
        $39 = $30;$_0$0$i14$i$i$i = $phitmp26$i$i$i;$iter$sroa$6$2 = $31;
       }
       $33 = $25 << 6;
       $34 = $_0$0$i14$i$i$i&255;
       $35 = $34 | $33;
       $36 = $19 << 12;
       $37 = $35 | $36;
       $38 = ($14&255)>(239);
       if ($38) {
        $40 = ($39|0)==($10|0);
        if ($40) {
         $_0$0$i9$i$i$i = 0;$iter$sroa$6$3 = $iter$sroa$6$2;
        } else {
         $41 = ((($39)) + 1|0);
         $42 = $41;
         $43 = HEAP8[$39>>0]|0;
         $phitmp27$i$i$i = $43 & 63;
         $_0$0$i9$i$i$i = $phitmp27$i$i$i;$iter$sroa$6$3 = $42;
        }
        $44 = $19 << 18;
        $45 = $44 & 1835008;
        $46 = $35 << 6;
        $47 = $_0$0$i9$i$i$i&255;
        $48 = $46 | $45;
        $49 = $48 | $47;
        $_5$sroa$4$0$ph$i = $49;$iter$sroa$6$4 = $iter$sroa$6$3;
       } else {
        $_5$sroa$4$0$ph$i = $37;$iter$sroa$6$4 = $iter$sroa$6$2;
       }
      } else {
       $_5$sroa$4$0$ph$i = $26;$iter$sroa$6$4 = $iter$sroa$6$1;
      }
     }
     $62 = (($iter$sroa$0$0150) - ($iter$sroa$6$0149))|0;
     $63 = (($62) + ($iter$sroa$6$4))|0;
     L25: do {
      switch ($_5$sroa$4$0$ph$i|0) {
      case 9:  {
       $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
       break;
      }
      case 13:  {
       $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
       break;
      }
      case 10:  {
       $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
       break;
      }
      case 34: case 39: case 92:  {
       $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
       break;
      }
      default: {
       $64 = $_5$sroa$4$0$ph$i&65535;
       $65 = ($_5$sroa$4$0$ph$i>>>0)<(65536);
       do {
        if ($65) {
         $66 = (__ZN4core12char_private5check17hba318baa7b27b367E($64,9177,42,9261,303,9564,333)|0);
         if ($66) {
          $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
          break L25;
         }
        } else {
         $67 = ($_5$sroa$4$0$ph$i>>>0)<(131072);
         if ($67) {
          $74 = (__ZN4core12char_private5check17hba318baa7b27b367E($64,9897,31,9959,146,10105,342)|0);
          if ($74) {
           $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
           break L25;
          } else {
           break;
          }
         } else {
          $$off$i$i = (($_5$sroa$4$0$ph$i) + -173783)|0;
          $68 = ($$off$i$i>>>0)<(41);
          $$off6$i$i = (($_5$sroa$4$0$ph$i) + -177973)|0;
          $69 = ($$off6$i$i>>>0)<(11);
          $or$cond$i$i = $68 | $69;
          $70 = $_5$sroa$4$0$ph$i & -2;
          $71 = ($70|0)==(178206);
          $or$cond19$i$i = $71 | $or$cond$i$i;
          $$off8$i$i = (($_5$sroa$4$0$ph$i) + -183970)|0;
          $72 = ($$off8$i$i>>>0)<(10590);
          $or$cond21$i$i = $72 | $or$cond19$i$i;
          $$off9$i$i = (($_5$sroa$4$0$ph$i) + -195102)|0;
          $73 = ($$off9$i$i>>>0)<(722658);
          $or$cond23$i$i = $73 | $or$cond21$i$i;
          $or$cond23$i$not$i = $or$cond23$i$i ^ 1;
          $$off10$i$i = (($_5$sroa$4$0$ph$i) + -918000)|0;
          $not$$i$i = ($$off10$i$i>>>0)>(196111);
          $or$cond$i = $not$$i$i & $or$cond23$i$not$i;
          if ($or$cond$i) {
           $80 = 0;$82 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
           break L25;
          } else {
           break;
          }
         }
        }
       } while(0);
       $75 = $_5$sroa$4$0$ph$i | 1;
       $76 = (Math_clz32(($75|0))|0);
       $77 = $76 >>> 2;
       $78 = $77 ^ 7;
       $80 = 5;$82 = $78;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
      }
      }
     } while(0);
     $trunc$i$i$i$i = $init_state$sroa$0$0$i&255;
     $trunc$i$i$i$i$clear = $trunc$i$i$i$i & 3;
     switch ($trunc$i$i$i$i$clear<<24>>24) {
     case 2: case 0:  {
      break L8;
      break;
     }
     case 1:  {
      break;
     }
     default: {
      $79 = $80&255;
      $trunc$i$i$i$i$i$clear = $79 & 7;
      switch ($trunc$i$i$i$i$i$clear<<24>>24) {
      case 0:  {
       $_4$0$i$i$i$i$i = 0;
       break;
      }
      case 1:  {
       $_4$0$i$i$i$i$i = 1;
       break;
      }
      case 2:  {
       $_4$0$i$i$i$i$i = 2;
       break;
      }
      case 3:  {
       $_4$0$i$i$i$i$i = 3;
       break;
      }
      case 4:  {
       $_4$0$i$i$i$i$i = 4;
       break;
      }
      default: {
       $_4$0$i$i$i$i$i = 5;
      }
      }
      $81 = (($_4$0$i$i$i$i$i) + ($82))|0;
      $83 = ($81|0)==(1);
      if (!($83)) {
       break L8;
      }
     }
     }
     $$cast$i = $iter$sroa$6$4;
     $84 = ($$cast$i|0)==($10|0);
     if ($84) {
      $from$0$ph$lcssa147 = $from$0$ph156;
      label = 16;
      break L6;
     } else {
      $$cast$i151 = $$cast$i;$iter$sroa$0$0150 = $63;$iter$sroa$6$0149 = $iter$sroa$6$4;
     }
    }
    $85 = ($iter$sroa$0$0150>>>0)<($from$0$ph156>>>0);
    if ($85) {
     label = 48;
     break;
    }
    $92 = ($from$0$ph156|0)==(0);
    $93 = ($from$0$ph156|0)==($1|0);
    $or$cond$i3$i$i$i = $92 | $93;
    if (!($or$cond$i3$i$i$i)) {
     $94 = ($from$0$ph156>>>0)<($1>>>0);
     if (!($94)) {
      label = 48;
      break;
     }
     $95 = (($0) + ($from$0$ph156)|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = ($96<<24>>24)>(-65);
     if (!($97)) {
      label = 48;
      break;
     }
    }
    $86 = ($iter$sroa$0$0150|0)==(0);
    $87 = ($iter$sroa$0$0150|0)==($1|0);
    $or$cond$i$i$i$i = $86 | $87;
    if (!($or$cond$i$i$i$i)) {
     $88 = ($iter$sroa$0$0150>>>0)<($1>>>0);
     if (!($88)) {
      label = 48;
      break;
     }
     $89 = (($0) + ($iter$sroa$0$0150)|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = ($90<<24>>24)>(-65);
     if (!($91)) {
      label = 48;
      break;
     }
    }
    $98 = (($0) + ($from$0$ph156)|0);
    $99 = (($iter$sroa$0$0150) - ($from$0$ph156))|0;
    $100 = HEAP32[$3>>2]|0;
    $101 = HEAP32[$5>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 255]($100,$98,$99)|0);
    $cond15 = ($104<<24>>24)==(0);
    if ($cond15) {
     $106 = $80;$114 = $82;$iter1$sroa$0$0 = $init_state$sroa$0$0$i;
    } else {
     $_0$sroa$0$0 = 1;
     label = 4;
     break;
    }
    L58: while(1) {
     $trunc$i$i = $iter1$sroa$0$0&255;
     $trunc$i$i$clear = $trunc$i$i & 3;
     L60: do {
      switch ($trunc$i$i$clear<<24>>24) {
      case 0:  {
       break L58;
       break;
      }
      case 1:  {
       $140 = $114;$141 = $106;$_61$sroa$13$2$ph = $init_state$sroa$9$0$i;$iter1$sroa$0$1$ph = 0;
       break;
      }
      case 2:  {
       $140 = $114;$141 = $106;$_61$sroa$13$2$ph = 92;$iter1$sroa$0$1$ph = 1;
       break;
      }
      default: {
       $105 = $106&255;
       $trunc$i$i$i$clear = $105 & 7;
       switch ($trunc$i$i$i$clear<<24>>24) {
       case 0:  {
        break L58;
        break;
       }
       case 1:  {
        $121 = $106 & -256;
        $140 = $114;$141 = $121;$_61$sroa$13$2$ph = 125;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L60;
        break;
       }
       case 2:  {
        $113 = $114 << 2;
        $115 = $113 & 28;
        $116 = $init_state$sroa$9$0$i >>> $115;
        $117 = $116 & 15;
        $118 = $117&255;
        $119 = ($118&255)<(10);
        $$sink4$v$i$i$i$i = $119 ? 48 : 87;
        $$sink4$i$i$i$i = (($$sink4$v$i$i$i$i) + ($117))|0;
        $120 = ($114|0)==(0);
        if ($120) {
         $122 = $106 & -256;
         $123 = $122 | 1;
         $140 = $114;$141 = $123;$_61$sroa$13$2$ph = $$sink4$i$i$i$i;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
         break L60;
        } else {
         $124 = (($114) + -1)|0;
         $140 = $124;$141 = $106;$_61$sroa$13$2$ph = $$sink4$i$i$i$i;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
         break L60;
        }
        break;
       }
       case 3:  {
        $111 = $106 & -256;
        $112 = $111 | 2;
        $140 = $114;$141 = $112;$_61$sroa$13$2$ph = 123;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L60;
        break;
       }
       case 4:  {
        $109 = $106 & -256;
        $110 = $109 | 3;
        $140 = $114;$141 = $110;$_61$sroa$13$2$ph = 117;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L60;
        break;
       }
       default: {
        $107 = $106 & -256;
        $108 = $107 | 4;
        $140 = $114;$141 = $108;$_61$sroa$13$2$ph = 92;$iter1$sroa$0$1$ph = $iter1$sroa$0$0;
        break L60;
       }
       }
      }
      }
     } while(0);
     $130 = HEAP32[$3>>2]|0;
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (FUNCTION_TABLE_iii[$133 & 255]($130,$_61$sroa$13$2$ph)|0);
     $cond17 = ($134<<24>>24)==(0);
     if ($cond17) {
      $106 = $141;$114 = $140;$iter1$sroa$0$0 = $iter1$sroa$0$1$ph;
     } else {
      $_0$sroa$0$0 = 1;
      label = 4;
      break L6;
     }
    }
    $125 = ($_5$sroa$4$0$ph$i>>>0)<(128);
    $126 = ($_5$sroa$4$0$ph$i>>>0)<(2048);
    $127 = ($_5$sroa$4$0$ph$i>>>0)<(65536);
    $$$i = $127 ? 3 : 4;
    $$$$i = $126 ? 2 : $$$i;
    $$$$$i = $125 ? 1 : $$$$i;
    $128 = (($$$$$i) + ($iter$sroa$0$0150))|0;
    $$cast$i148 = $iter$sroa$6$4;
    $129 = ($$cast$i148|0)==($10|0);
    if ($129) {
     $from$0$ph$lcssa147 = $128;
     label = 16;
     break;
    } else {
     $$cast$i148158 = $$cast$i148;$from$0$ph156 = $128;$iter$sroa$0$0$ph154 = $63;$iter$sroa$6$0$ph153 = $iter$sroa$6$4;
    }
   }
   if ((label|0) == 4) {
    return ($_0$sroa$0$0|0);
   }
   else if ((label|0) == 16) {
    $50 = ($from$0$ph$lcssa147|0)==(0);
    $51 = ($from$0$ph$lcssa147|0)==($1|0);
    $or$cond$i$i$i$i47 = $50 | $51;
    if ($or$cond$i$i$i$i47) {
     $from$0$ph$lcssa147179 = $from$0$ph$lcssa147;
     label = 17;
     break;
    }
    $52 = ($from$0$ph$lcssa147>>>0)<($1>>>0);
    if (!($52)) {
     __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$from$0$ph$lcssa147,$1);
     // unreachable;
    }
    $53 = (($0) + ($from$0$ph$lcssa147)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = ($54<<24>>24)>(-65);
    if ($55) {
     $$pre$phi$i$i$ph$iZ2D = $53;$from$0$ph$lcssa147178 = $from$0$ph$lcssa147;
     break;
    }
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$from$0$ph$lcssa147,$1);
    // unreachable;
   }
   else if ((label|0) == 48) {
    __ZN4core3str16slice_error_fail17h52e7ac9adcf1947aE($0,$1,$from$0$ph156,$iter$sroa$0$0150);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i$i$i = (($0) + ($from$0$ph$lcssa147179)|0);
  $$pre$phi$i$i$ph$iZ2D = $$pre$i$i$i;$from$0$ph$lcssa147178 = $from$0$ph$lcssa147179;
 }
 $56 = (($1) - ($from$0$ph$lcssa147178))|0;
 $57 = HEAP32[$3>>2]|0;
 $58 = HEAP32[$5>>2]|0;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (FUNCTION_TABLE_iiii[$60 & 255]($57,$$pre$phi$i$i$ph$iZ2D,$56)|0);
 $cond18 = ($61<<24>>24)==(0);
 if (!($cond18)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $135 = HEAP32[$3>>2]|0;
 $136 = HEAP32[$5>>2]|0;
 $137 = ((($136)) + 16|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (FUNCTION_TABLE_iii[$138 & 255]($135,34)|0);
 $_0$sroa$0$0 = $139;
 return ($_0$sroa$0$0|0);
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h509ce010b1cead94E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN4core3fmt9Formatter3pad17h4be370917d619fddE($2,$0,$1)|0);
 return ($3|0);
}
function __ZN4core12char_private12is_printable17h52944e80288c09d4E($0) {
 $0 = $0|0;
 var $$off = 0, $$off10 = 0, $$off6 = 0, $$off8 = 0, $$off9 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $not$ = 0, $or$cond = 0, $or$cond19 = 0;
 var $or$cond21 = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = ($0>>>0)<(65536);
 if ($2) {
  $3 = (__ZN4core12char_private5check17hba318baa7b27b367E($1,9177,42,9261,303,9564,333)|0);
  $_0$0$shrunk = $3;
  return ($_0$0$shrunk|0);
 }
 $4 = ($0>>>0)<(131072);
 if ($4) {
  $5 = (__ZN4core12char_private5check17hba318baa7b27b367E($1,9897,31,9959,146,10105,342)|0);
  $_0$0$shrunk = $5;
  return ($_0$0$shrunk|0);
 }
 $$off = (($0) + -173783)|0;
 $6 = ($$off>>>0)<(41);
 $$off6 = (($0) + -177973)|0;
 $7 = ($$off6>>>0)<(11);
 $or$cond = $6 | $7;
 $8 = $0 & -2;
 $9 = ($8|0)==(178206);
 $or$cond19 = $9 | $or$cond;
 $$off8 = (($0) + -183970)|0;
 $10 = ($$off8>>>0)<(10590);
 $or$cond21 = $10 | $or$cond19;
 $$off9 = (($0) + -195102)|0;
 $11 = ($$off9>>>0)<(722658);
 $or$cond23 = $11 | $or$cond21;
 if ($or$cond23) {
  $_0$0$shrunk = 0;
  return ($_0$0$shrunk|0);
 } else {
  $$off10 = (($0) + -918000)|0;
  $not$ = ($$off10>>>0)>(196111);
  return ($not$|0);
 }
 return (0)|0;
}
function __ZN4core3ptr13drop_in_place17h58cdafdcb194c76bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1ef281c6b68fe8cdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf31$i$i = 0, $curr$232$i$i = 0, $curr$3$i$i = 0, $div$i$i = 0, $n1$033$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($3&255)>(99);
 if ($5) {
  $6 = (($3&255) % 100)&-1;
  $7 = ($6 << 1)&255;
  $8 = $7&255;
  $div$i$i = (($3&255) / 100)&-1;
  $9 = $div$i$i&255;
  $10 = (8767 + ($8)|0);
  $11 = ((($buf31$i$i)) + 37|0);
  $12 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8);
  HEAP8[$11>>0]=$12&255;HEAP8[$11+1>>0]=$12>>8;
  $curr$232$i$i = 36;$n1$033$i$i = $9;
  label = 4;
 } else {
  $13 = ($3&255)<(10);
  if ($13) {
   $curr$232$i$i = 38;$n1$033$i$i = $4;
   label = 4;
  } else {
   $17 = $4 << 1;
   $18 = (8767 + ($17)|0);
   $19 = ((($buf31$i$i)) + 37|0);
   $20 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8);
   HEAP8[$19>>0]=$20&255;HEAP8[$19+1>>0]=$20>>8;
   $curr$3$i$i = 37;
  }
 }
 if ((label|0) == 4) {
  $14 = $n1$033$i$i&255;
  $15 = (($buf31$i$i) + ($curr$232$i$i)|0);
  $16 = (($14) + 48)<<24>>24;
  HEAP8[$15>>0] = $16;
  $curr$3$i$i = $curr$232$i$i;
 }
 $21 = (($buf31$i$i) + ($curr$3$i$i)|0);
 $22 = (39 - ($curr$3$i$i))|0;
 $23 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZN4core3ptr13drop_in_place17hffbcfa995c66dc5eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4aecff4fbba9b746E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hd28470d82864d8cfE($2,$1)|0);
 return ($3|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17h38c0dd8344bf2687E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $2 = HEAP8[$0>>0]|0;
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($buf$i)) + 128|0);
 $curr$0$i = 128;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $4 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $5 = $x$0$i & 15;
  $6 = ($x$0$i&255) >>> 4;
  $7 = ($5&255)<(10);
  $$$i = $7 ? 48 : 87;
  $8 = (($$$i) + ($5))<<24>>24;
  HEAP8[$4>>0] = $8;
  $9 = (($curr$0$i) + -1)|0;
  $10 = ($6<<24>>24)==(0);
  if ($10) {
   break;
  } else {
   $curr$0$i = $9;$iter$sroa$4$0$in$i = $4;$x$0$i = $6;
  }
 }
 $11 = ($9>>>0)>(128);
 if ($11) {
  __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($9,128);
  // unreachable;
 } else {
  $12 = (($buf$i) + ($9)|0);
  $13 = (129 - ($curr$0$i))|0;
  $14 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,10629,2,$12,$13)|0);
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h56e9712ea64abde7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 39;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (8767 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (8767 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (8767 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (8767 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h7744311cd00acfdaE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$arith2 = 0, $$off$i40$i = 0, $$off5$i43$i = 0, $$off6$i45$i = 0, $$overflow = 0, $$overflow3 = 0, $$sink$i = 0, $$sink$i47$i = 0, $$sink110$i = 0, $$sink12109$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $iter$sroa$0$0$in121$i = 0, $result$0122$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$sink$i = 0;
  } else {
   $5 = HEAP8[$1>>0]|0;
   $cond$i = ($5<<24>>24)==(43);
   if ($cond$i) {
    $6 = ((($1)) + 1|0);
    $7 = (($2) + -1)|0;
    $8 = ($7|0)==(0);
    if ($8) {
     $$sink$i = 0;
     break;
    } else {
     $$sink110$i = $7;$$sink12109$i = $6;
    }
   } else {
    $$sink110$i = $2;$$sink12109$i = $1;
   }
   $9 = (($$sink12109$i) + ($$sink110$i)|0);
   $iter$sroa$0$0$in121$i = $$sink12109$i;$result$0122$i = 0;
   while(1) {
    $10 = ((($iter$sroa$0$0$in121$i)) + 1|0);
    $11 = HEAP8[$iter$sroa$0$0$in121$i>>0]|0;
    $12 = $11&255;
    $$off$i40$i = (($12) + -48)|0;
    $13 = ($$off$i40$i>>>0)<(10);
    if ($13) {
     $$sink$i47$i = -48;
    } else {
     $$off5$i43$i = (($12) + -97)|0;
     $14 = ($$off5$i43$i>>>0)<(26);
     if ($14) {
      $$sink$i47$i = -87;
     } else {
      $$off6$i45$i = (($12) + -65)|0;
      $15 = ($$off6$i45$i>>>0)<(26);
      if ($15) {
       $$sink$i47$i = -55;
      } else {
       $$sink$i = 1;
       break L1;
      }
     }
    }
    $16 = (($$sink$i47$i) + ($12))|0;
    $17 = ($16>>>0)<(10);
    if (!($17)) {
     $$sink$i = 1;
     break L1;
    }
    $$arith2 = ($result$0122$i*10)|0;
    $$overflow3 = ($result$0122$i>>>0)>(429496729);
    if ($$overflow3) {
     $$sink$i = 2;
     break L1;
    }
    $$arith = (($$arith2) + ($16))|0;
    $$overflow = ($$arith>>>0)<($$arith2>>>0);
    if ($$overflow) {
     $$sink$i = 2;
     break L1;
    }
    $18 = ($10|0)==($9|0);
    if ($18) {
     break;
    } else {
     $iter$sroa$0$0$in121$i = $10;$result$0122$i = $$arith;
    }
   }
   HEAP8[$0>>0] = 0;
   $19 = ((($0)) + 4|0);
   HEAP32[$19>>2] = $$arith;
   return;
  }
 } while(0);
 HEAP8[$0>>0] = 1;
 $4 = ((($0)) + 1|0);
 HEAP8[$4>>0] = $$sink$i;
 return;
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h512fc584dd3af3feE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_17 = 0, $_9$sroa$0$0$$sroa_idx$i$i = 0, $_9$sroa$0$0$copyload$i = 0, $_9$sroa$0$0$copyload$pre$i = 0, $builder = 0, $cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17 = sp + 8|0;
 $builder = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 255]($3,10631,13)|0);
 HEAP32[$builder>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $8;
 $9 = ((($builder)) + 5|0);
 HEAP8[$9>>0] = 0;
 HEAP32[$_17>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h0bd982571ab7b467E($builder,10620,4,$_17,2232)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $_9$sroa$0$0$copyload$pre$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($11) {
  $_9$sroa$0$0$copyload$i = $_9$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
 }
 $cond$i$i = ($_9$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($cond$i$i) {
  $12 = HEAP32[$builder>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 4;
  $15 = ($14|0)!=(0);
  $$sink$i$i$i = $15 ? 10613 : 10615;
  $16 = ((($12)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($12)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 255]($17,$$sink$i$i$i,2)|0);
  $_0$sroa$0$0$i$i = $22;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_9$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
}
function __ZN4core3ptr13drop_in_place17h0fa011da284ec369E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0d50ab1835879707E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $trunc$i = HEAP8[$2>>0]|0;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $3 = ((($1)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 255]($4,10624,5)|0);
  $_0$sroa$0$0$i = $9;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 1:  {
  $10 = ((($1)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 255]($11,10644,12)|0);
  $_0$sroa$0$0$i = $16;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 2:  {
  $17 = ((($1)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($1)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iiii[$22 & 255]($18,10656,8)|0);
  $_0$sroa$0$0$i = $23;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 default: {
  $24 = ((($1)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$29 & 255]($25,10664,9)|0);
  $_0$sroa$0$0$i = $30;
  return ($_0$sroa$0$0$i|0);
 }
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h7f3c58ad94980558E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31$i = 0, $curr$232$i = 0, $curr$3$i = 0, $div$i = 0, $n1$033$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31$i = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(99);
 if ($4) {
  $5 = (($2&255) % 100)&-1;
  $6 = ($5 << 1)&255;
  $7 = $6&255;
  $div$i = (($2&255) / 100)&-1;
  $8 = $div$i&255;
  $9 = (8767 + ($7)|0);
  $10 = ((($buf31$i)) + 37|0);
  $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
  $curr$232$i = 36;$n1$033$i = $8;
  label = 4;
 } else {
  $12 = ($2&255)<(10);
  if ($12) {
   $curr$232$i = 38;$n1$033$i = $3;
   label = 4;
  } else {
   $16 = $3 << 1;
   $17 = (8767 + ($16)|0);
   $18 = ((($buf31$i)) + 37|0);
   $19 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $curr$3$i = 37;
  }
 }
 if ((label|0) == 4) {
  $13 = $n1$033$i&255;
  $14 = (($buf31$i) + ($curr$232$i)|0);
  $15 = (($13) + 48)<<24>>24;
  HEAP8[$14>>0] = $15;
  $curr$3$i = $curr$232$i;
 }
 $20 = (($buf31$i) + ($curr$3$i)|0);
 $21 = (39 - ($curr$3$i))|0;
 $22 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,13480,0,$20,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h2fccaf9d4f289295E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17hb0aee7a673799908E($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17hb0aee7a673799908E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (8767 + ($9)|0);
   $14 = (($buf31) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (8767 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf31) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (8767 + ($22)|0);
  $26 = (($buf31) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf31) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,$3,13480,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (8767 + ($33)|0);
  $36 = (($buf31) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,$3,13480,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hf405fccd0d0dc6e1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_18 = 0, $_26 = 0, $_9$sroa$0$0$$sroa_idx$i$i = 0, $_9$sroa$0$0$copyload$i = 0, $_9$sroa$0$0$copyload$pre$i = 0, $builder = 0, $cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_26 = sp + 12|0;
 $_18 = sp + 8|0;
 $builder = sp;
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 255]($4,10673,9)|0);
 HEAP32[$builder>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $9;
 $10 = ((($builder)) + 5|0);
 HEAP8[$10>>0] = 0;
 HEAP32[$_18>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h0bd982571ab7b467E($builder,10682,11,$_18,2200)|0);
 HEAP32[$_26>>2] = $2;
 (__ZN4core3fmt8builders11DebugStruct5field17h0bd982571ab7b467E($builder,10693,9,$_26,2248)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 $_9$sroa$0$0$copyload$pre$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($12) {
  $_9$sroa$0$0$copyload$i = $_9$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
 }
 $cond$i$i = ($_9$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($cond$i$i) {
  $13 = HEAP32[$builder>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 4;
  $16 = ($15|0)!=(0);
  $$sink$i$i$i = $16 ? 10613 : 10615;
  $17 = ((($13)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($13)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iiii[$22 & 255]($18,$$sink$i$i$i,2)|0);
  $_0$sroa$0$0$i$i = $23;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_9$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
}
function __ZN4core3ptr13drop_in_place17h87cd498484f9d839E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha074afa039c78944E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i14$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i21$i = 0, $_10$sroa$0$0$copyload$i23$i = 0, $_10$sroa$0$0$copyload$pre$i8$i = 0, $_23$i = 0, $_9$sroa$0$0$$sroa_idx$i$i6$i = 0, $builder1$i = 0;
 var $cond$i = 0, $cond$i$i$i18$i = 0, $cond$i$i9$i = 0, $cond8$i$i$i12$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_23$i = sp + 12|0;
 $builder1$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $cond$i = ($3<<24>>24)==(0);
 if ($cond$i) {
  $4 = ((($1)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($1)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiii[$9 & 255]($5,10702,4)|0);
  $_0$sroa$0$0$i = $10;
  STACKTOP = sp;return ($_0$sroa$0$0$i|0);
 }
 $11 = ((($2)) + 1|0);
 $12 = ((($1)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_iiii[$17 & 255]($13,10706,4)|0);
 HEAP32[$builder1$i>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i$i6$i = ((($builder1$i)) + 8|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i6$i>>0] = $18;
 $19 = ((($builder1$i)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($builder1$i)) + 9|0);
 HEAP8[$20>>0] = 0;
 HEAP32[$_23$i>>2] = $11;
 (__ZN4core3fmt8builders10DebugTuple5field17h2f7e84731acfd0fdE($builder1$i,$_23$i,2216)|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = ($21|0)==(0);
 $_10$sroa$0$0$copyload$pre$i8$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i$i6$i>>0]|0;
 if ($22) {
  $_10$sroa$0$0$copyload$i23$i = $_10$sroa$0$0$copyload$pre$i8$i;
 } else {
  $cond$i$i9$i = ($_10$sroa$0$0$copyload$pre$i8$i<<24>>24)==(0);
  do {
   if ($cond$i$i9$i) {
    $23 = HEAP32[$builder1$i>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & 4;
    $26 = ($25|0)==(0);
    if ($26) {
     $34 = $21;
    } else {
     $27 = ((($23)) + 24|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($23)) + 28|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($30)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (FUNCTION_TABLE_iiii[$32 & 255]($28,10577,1)|0);
     $cond8$i$i$i12$i = ($33<<24>>24)==(0);
     if (!($cond8$i$i$i12$i)) {
      $_0$sroa$0$0$i$i21$i = 1;
      break;
     }
     $$pre$i14$i = HEAP32[$19>>2]|0;
     $34 = $$pre$i14$i;
    }
    $35 = ($34|0)!=(1);
    $36 = HEAP8[$20>>0]|0;
    $37 = ($36<<24>>24)==(0);
    $or$cond$i = $35 | $37;
    if (!($or$cond$i)) {
     $38 = HEAP32[$builder1$i>>2]|0;
     $39 = ((($38)) + 24|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($38)) + 28|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($42)) + 12|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (FUNCTION_TABLE_iiii[$44 & 255]($40,5153,1)|0);
     $cond$i$i$i18$i = ($45<<24>>24)==(0);
     if (!($cond$i$i$i18$i)) {
      $_0$sroa$0$0$i$i21$i = 1;
      break;
     }
    }
    $46 = HEAP32[$builder1$i>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($46)) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_iiii[$52 & 255]($48,10578,1)|0);
    $_0$sroa$0$0$i$i21$i = $53;
   } else {
    $_0$sroa$0$0$i$i21$i = 1;
   }
  } while(0);
  HEAP8[$_9$sroa$0$0$$sroa_idx$i$i6$i>>0] = $_0$sroa$0$0$i$i21$i;
  $_10$sroa$0$0$copyload$i23$i = $_0$sroa$0$0$i$i21$i;
 }
 $_0$sroa$0$0$i = $_10$sroa$0$0$copyload$i23$i;
 STACKTOP = sp;return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h2341b4f67626ece6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($buf$i)) + 128|0);
 $curr$0$i = 128;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $4 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $5 = $x$0$i & 15;
  $6 = $x$0$i >>> 4;
  $7 = $5&255;
  $8 = ($7&255)<(10);
  $$$i = $8 ? 48 : 87;
  $9 = (($$$i) + ($7))<<24>>24;
  HEAP8[$4>>0] = $9;
  $10 = (($curr$0$i) + -1)|0;
  $11 = ($6|0)==(0);
  if ($11) {
   break;
  } else {
   $curr$0$i = $10;$iter$sroa$4$0$in$i = $4;$x$0$i = $6;
  }
 }
 $12 = ($10>>>0)>(128);
 if ($12) {
  __ZN4core5slice22slice_index_order_fail17h593b32876745960bE($10,128);
  // unreachable;
 } else {
  $13 = (($buf$i) + ($10)|0);
  $14 = (129 - ($curr$0$i))|0;
  $15 = (__ZN4core3fmt9Formatter12pad_integral17h7a4993c59bb02c18E($1,1,10629,2,$13,$14)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3227]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (12948 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[3227] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(12916)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (12948 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[3227] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(12928)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (12948 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[3227] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(12916)>>2] = $76;
     HEAP32[(12928)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(12912)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (13212 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (13212 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(12912)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(12928)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (12948 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[3227] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(12916)>>2] = $$0173$lcssa$i;
       HEAP32[(12928)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(12912)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (13212 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (13212 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(12916)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (13212 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(12912)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (12948 + ($383<<2)|0);
          $385 = HEAP32[3227]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[3227] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (13212 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(12912)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(12916)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(12928)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(12928)>>2] = $462;
   HEAP32[(12916)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(12916)>>2] = 0;
   HEAP32[(12928)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(12920)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(12920)>>2] = $477;
  $478 = HEAP32[(12932)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(12932)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[3345]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(13388)>>2] = 4096;
  HEAP32[(13384)>>2] = 4096;
  HEAP32[(13392)>>2] = -1;
  HEAP32[(13396)>>2] = -1;
  HEAP32[(13400)>>2] = 0;
  HEAP32[(13352)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[3345] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(13388)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(13348)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(13340)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(13352)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(12932)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (13356);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(13384)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(13340)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(13348)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(13388)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(13352)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(13352)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(13340)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(13340)>>2] = $578;
  $579 = HEAP32[(13344)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(13344)>>2] = $578;
  }
  $581 = HEAP32[(12932)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(12924)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(12924)>>2] = $$748$i;
    }
    HEAP32[(13356)>>2] = $$748$i;
    HEAP32[(13360)>>2] = $$723947$i;
    HEAP32[(13368)>>2] = 0;
    $586 = HEAP32[3345]|0;
    HEAP32[(12944)>>2] = $586;
    HEAP32[(12940)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (12948 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(12932)>>2] = $600;
    HEAP32[(12920)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(13396)>>2]|0;
    HEAP32[(12936)>>2] = $606;
   } else {
    $$024370$i = (13356);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(12920)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(12932)>>2] = $630;
       HEAP32[(12920)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(13396)>>2]|0;
       HEAP32[(12936)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(12924)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(12924)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (13356);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(12920)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(12920)>>2] = $678;
        HEAP32[(12932)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(12928)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(12916)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(12916)>>2] = $684;
         HEAP32[(12928)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[3227]|0;
            $703 = $702 & $701;
            HEAP32[3227] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (13212 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(12912)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(12912)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (12948 + ($762<<2)|0);
         $764 = HEAP32[3227]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[3227] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (13212 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(12912)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(12912)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (13356);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(12932)>>2] = $865;
    HEAP32[(12920)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(13396)>>2]|0;
    HEAP32[(12936)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(13356)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(13356)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(13356)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(13356)+12>>2]|0;
    HEAP32[(13356)>>2] = $$748$i;
    HEAP32[(13360)>>2] = $$723947$i;
    HEAP32[(13368)>>2] = 0;
    HEAP32[(13364)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (12948 + ($887<<2)|0);
      $889 = HEAP32[3227]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[3227] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (13212 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(12912)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(12912)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(12920)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(12920)>>2] = $962;
   $963 = HEAP32[(12932)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(12932)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(12924)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(12928)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(12916)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[3227]|0;
     $29 = $28 & $27;
     HEAP32[3227] = $29;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$86 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (13212 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(12912)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(12912)>>2] = $62;
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$86 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$86 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$86 = $2;
  }
 } while(0);
 $87 = ($86>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(12932)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(12928)>>2]|0;
  if ($95) {
   $97 = HEAP32[(12920)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(12920)>>2] = $98;
   HEAP32[(12932)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(12928)>>2] = 0;
   HEAP32[(12916)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(12916)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(12916)>>2] = $104;
   HEAP32[(12928)>>2] = $86;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($86) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[3227]|0;
     $120 = $119 & $118;
     HEAP32[3227] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (13212 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(12912)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(12912)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($86) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(12928)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(12916)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($86) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (12948 + ($180<<2)|0);
  $182 = HEAP32[3227]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[3227] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (13212 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(12912)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(12912)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(12940)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(12940)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (13364);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(12940)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(13388)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(12932)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(12920)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(12932)>>2] = $34;
  HEAP32[(12920)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(12928)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(12916)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(12916)>>2] = $storemerge1;
  HEAP32[(12928)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[3227]|0;
    $81 = $80 & $79;
    HEAP32[3227] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (13212 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(12912)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(12912)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(12928)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(12916)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[3227]|0;
     $25 = $24 & $23;
     HEAP32[3227] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (13212 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(12912)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(12912)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(12932)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(12928)>>2]|0;
  if ($87) {
   $89 = HEAP32[(12920)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(12920)>>2] = $90;
   HEAP32[(12932)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(12928)>>2] = 0;
   HEAP32[(12916)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(12916)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(12916)>>2] = $96;
   HEAP32[(12928)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[3227]|0;
     $112 = $111 & $110;
     HEAP32[3227] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (13212 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(12912)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(12912)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(12928)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(12916)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (12948 + ($172<<2)|0);
  $174 = HEAP32[3227]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[3227] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (13212 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(12912)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(12912)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($71) + ($70)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)>(16);
    $$ = $14 ? $1 : 16;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13404|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$25 = $17;
   while(1) {
    $26 = ($25|0)<(0);
    if ($26) {
     break;
    }
    $34 = (($$04855) - ($25))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($25>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($25) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$25 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4104|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 160;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (10710 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 10798;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 10798;
  } else {
   $$01214 = 10798;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((13468|0));
 return (13476|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((13468|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1118]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1118]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 255]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_494($0)|0);
 return ($1|0);
}
function ___bswap_16_494($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ee8a40636095d58E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h591d034c9ce37d35E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hcdc0891b8aa6e6e7E,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hb5283a538a93dc48E,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he023176ec91aa549E,b0,b0,b0
,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h400e4762f359b502E,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h1ec4f7757e70f328E,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h567d4565cabdb80aE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4core3fmt5write17h1b6d99dcd397fba4E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN3std2io5stdio6stdout11stdout_init17h57cc982e9f814456E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h6acdb6c422db3465E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN3std10sys_common11thread_info11THREAD_INFO7__getit17h1396895156aa9eecE,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN3std6thread5local2os13destroy_value17h278b96bd201ff7c4E,__ZN4core3ptr13drop_in_place17heccadbc270c1480eE,b2,b2,b2,__ZN4core3ptr13drop_in_place17h5fb21c76c2129501E,b2,__ZN4core3ptr13drop_in_place17ha82eb4648773bceaE,b2,b2,b2,b2,__ZN3std6thread5local2os13destroy_value17h7700075314f728e2E,__ZN4core3ptr13drop_in_place17h9fabf1aba0de77f2E,b2,b2,b2,__ZN4core3ptr13drop_in_place17h81fb84e5cc3365c9E,b2,b2,b2,b2,b2,__ZN4core3ptr13drop_in_place17h37fd86615cf818bdE,b2,__ZN4core3ptr13drop_in_place17hc3e39e740a81148bE,b2,b2
,b2,__ZN4core3ptr13drop_in_place17h341dfaf7383c3fbdE,b2,b2,b2,b2,b2,__ZN4core3ptr13drop_in_place17h19a3edbf66e80dadE,b2,__ZN3std6thread5local2os13destroy_value17hf9342004a7c1e87bE,__ZN4core3ptr13drop_in_place17h57058bbfc1627aa2E,b2,__ZN4core3ptr13drop_in_place17h6e9378da48f24f69E,b2,__ZN4core3ptr13drop_in_place17h83bc7cda5b0ac2deE,b2,__ZN4core3ptr13drop_in_place17h56f68143dbc3ca81E,b2,b2,__ZN4core3ptr13drop_in_place17h404387ea88c5ad22E,__ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h4dd8aef055c0581dE,__ZN4core3ptr13drop_in_place17hbc83d48ade734206E,b2,b2,b2,__ZN4core3ptr13drop_in_place17hfc3d6bfd16c2a175E,b2,b2,b2,__ZN4core3ptr13drop_in_place17haa9de1c104a1a350E
,b2,b2,__ZN4core3ptr13drop_in_place17hccdb7f88103bdf48E,b2,b2,b2,__ZN4core3ptr13drop_in_place17h7d9fe66ae5620156E,b2,__ZN4core3ptr13drop_in_place17h3ed8ceefb9f90bebE,b2,b2,b2,__ZN4core3ptr13drop_in_place17hbf4c6463023aaee1E,b2,b2,b2,__ZN4core3ptr13drop_in_place17hffbcfa995c66dc5eE,b2,__ZN4core3ptr13drop_in_place17h58cdafdcb194c76bE,b2,__ZN4core3ptr13drop_in_place17h0fa011da284ec369E,b2,__ZN4core3ptr13drop_in_place17h87cd498484f9d839E,b2,b2,b2,b2,b2,b2,b2
,b2,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h252185a273a892c1E,__ZN4core9panicking5panic17h8ce57b1f932a0889E,b2,b2,b2,b2,__ZN3std3sys3imp7condvar7Condvar4init17h92d73bb59c7061f8E,b2,b2,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h3d2ca5fbd548127cE,b2,b2,b2,b2,b2,__ZN3std10sys_common4util10dumb_print17h13e1706209dc3034E,__ZN3std9panicking12default_hook17hf7e2d6bbe02d6d77E,b2,b2,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17hda5d391745816277E,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,__ZN4core3ptr13drop_in_place17ha85bc5a166c444c6E,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core6result13unwrap_failed17h2ddc61b13be20e23E,__ZN4core3ptr13drop_in_place17h74602cb08776945bE,b2,__ZN49__LT_alloc__raw_vec__RawVec_LT_T_C__u20_A_GT__GT_6double17h2cfc03d2e4b17390E,b2,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hb2af5d4ca3403421E,b2,b2,b2,b2,__ZN3std6thread6Thread6unpark17ha337b21221f21174E,b2,__ZN4core3ptr13drop_in_place17hc13f35ed5dba80d4E,b2,__ZN3std9panicking3try7do_call17h4824268eebf21fd4E,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h4b7fa3e34be6aedfE,b3,b3,b3,b3,b3,b3,b3,b3,__ZN281__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h556f0bde872de163E,__ZN3std5error5Error5cause17h2ec2b447aaafa448E,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN89__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_std__error__Error_GT_11description17h7ad38f88921ff96cE,__ZN3std5error5Error5cause17hf2aa23a86f2c278cE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc814d1b8089bb507E,__ZN4core3ops8function6FnOnce9call_once17h9dce3249ba81abf1E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_13reserve_exact17hb5e9d145ed4d269aE,b3,b3,__ZN4core9panicking9panic_fmt17h4d1ab9bae1f32475E,b3,b3,b3,b3,b3,b3,__ZN4core5slice20slice_index_len_fail17h6a2d1647e96009c5E,b3,b3,b3,b3,b3,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hbb0b8161f180c76fE,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h29d5967feafbc7d1E,b3,b3,__ZN3std9panicking15begin_panic_fmt17h1f99907a52f4e034E
,b3,b3,b3,b3,b3,__ZN4core5slice22slice_index_order_fail17h593b32876745960bE,b3,b3,b3,b3,b3,b3,b3,__ZN4core6option13expect_failed17h299a35470dcb4d8eE,b3,b3,b3,b3,__ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h42e6a373fdad5ea9E,b3,b3,b3,b3,b3,b3,b3,b3,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17hfeaa3c2e8020fa0bE,b3,b3
,b3,b3,__ZN33__LT_alloc__vec__Vec_LT_T_GT__GT_7reserve17h2d0a1d5225d4db3eE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h13e8b151e6d3aaedE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std5error5Error7type_id17h9ac221bdb4c0cd18E,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZN3std5error5Error7type_id17h90aba9faf5727981E,b4,b4,b4,b4,b4,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h72d98e1d1843f304E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___stdio_close,b4,b4,b4,b4,__ZN3std6thread6Thread3new17hf3c4d6d1510ff550E
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_8try_with17h573444e47184597fE,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hd333b1d21b353fd1E,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17hc669c68984660094E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZN3std9panicking11begin_panic17h1c1679c7e7fd72f4E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h69c497245dc56dacE,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN87__LT_alloc__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h736590b09145a038E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17hc0861914e3408fa1E,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4main4main17hf6c132e6daf255a9E,__ZN4core6result13unwrap_failed17hd3623847d1842216E,b6
,__ZN4core6result13unwrap_failed17h0f6cc8b8f2677502E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core6result13unwrap_failed17h82e33a5bc3b5b8aeE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std6thread4park17h6fd56b4feaa98d88E,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iii = [b7,b7,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h23785145b9c69a10E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hf4db80ddf0dcda0cE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core3fmt5Write10write_char17he8538c45a70182d8E,__ZN4core3fmt5Write9write_fmt17hc2941f2f58a9ed79E,b7,b7,b7,b7,__ZN282__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h168052ee462b2244E,__ZN280__LT_std__error___LT_impl_u20_core__convert__From_LT_alloc__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h6b45654fea6516c8E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d41f8eb1a66babfE,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hb62deaaadf24ebc1E
,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h1e3a93cca8eadd3eE,b7,b7,b7,b7,__ZN90__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Display_GT_3fmt17h886cd6c0308243ffE,__ZN88__LT_std__sys__imp__backtrace__tracing__imp__UnwindError_u20_as_u20_core__fmt__Debug_GT_3fmt17hbc7307a594bc5e52E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h6d5b86af9c231899E,b7,b7,b7,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha7cbdfffa9299f44E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h78d72b51efaeacbeE,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4cbe974281be09a1E,b7,b7,b7,b7,b7,__ZN4core3fmt5Write10write_char17h640c5e6ff95c325fE,__ZN4core3fmt5Write9write_fmt17h98713a2091a1b095E,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9a7e795ea8af7aa8E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h46db9fd6b5c4178dE,b7
,b7,b7,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hcb7111d8a8561d7eE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h69d30e13deb50ba2E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h2cb9e3d088584a8cE,b7,b7,__ZN4core3fmt5Write10write_char17hd4d352b5daecb36fE,__ZN4core3fmt5Write9write_fmt17h80d74c6f6bde0202E,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h32dd55d407cef4c3E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h24ae4ed11da70660E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4aecff4fbba9b746E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1ef281c6b68fe8cdE,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0d50ab1835879707E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17ha074afa039c78944E,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hd91e1b34bf067662E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h3a64b0c1b3d07c41E,__ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17hf4ea064060c767d6E,b7,b7,__ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h9f190385fed1f8c9E,b7,b7,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hb30bcfde10df810eE,b7,b7,b7,b7,b7,b7,__ZN68__LT_std__thread__local__AccessError_u20_as_u20_core__fmt__Debug_GT_3fmt17haec9f51133c6f98dE,b7,b7,b7,b7,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h56e9712ea64abde7E,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h6a7d6b51b432c926E,b7,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0bab3d1be7de4311E,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h2729587ea2440bbcE,b7
,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hd28470d82864d8cfE,__ZN52__LT__BP_const_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1c6a3327670e9ba9E,b7,b7,b7,b7,__ZN3std3sys3imp9backtrace7tracing3imp8trace_fn17hf4065802a72a53dfE,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h512fc584dd3af3feE,__ZN75__LT_unwind__libunwind___Unwind_Reason_Code_u20_as_u20_core__fmt__Debug_GT_3fmt17h56ce4bcfe7181aeaE,__ZN60__LT_alloc__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h2c4b843095aebb6fE,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17hb0aee7a673799908E,__ZN4core3fmt9Formatter9write_fmt17h29ee21ab04a40b7dE,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17hf405fccd0d0dc6e1E,b7,b7,b7,__ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17he8fc179523a73dcbE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,__ZN65__LT_alloc__allocator__AllocErr_u20_as_u20_core__fmt__Display_GT_3fmt17h1f7cca65273349d9E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h2bd0c705cf3d223fE,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfff261e267016050E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u8_GT_3fmt17h38c0dd8344bf2687E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h5704e9dd15141a43E,__ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17hd274da0b09178fa2E,__ZN71__LT_core__ops__range__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h95ae8b11cb2be082E,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17he923db6f4f3df2c4E,__ZN4core3fmt10ArgumentV110show_usize17h980a1bcb100419a4E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf66bb2efbd2e5973E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17ha97448eff1ed027dE,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17hac63f4964f9674ebE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std3sys3imp6memchr7memrchr17hbb99f8c011977941E,__ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17h9a075e68f2005596E,b8,b8,b8,b8,b8,b8,b8,__ZN3std4sync4once4Once10call_inner17hcc3be45d61199d14E
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { _llvm_bswap_i32: _llvm_bswap_i32, ___rdl_dealloc: ___rdl_dealloc, _main: _main, ___rdl_usable_size: ___rdl_usable_size, dynCall_i: dynCall_i, stackSave: stackSave, _rust_eh_personality: _rust_eh_personality, _memset: _memset, _bitshift64Lshr: _bitshift64Lshr, setThrew: setThrew, dynCall_viii: dynCall_viii, ___rdl_alloc_zeroed: ___rdl_alloc_zeroed, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, setTempRet0: setTempRet0, ___rdl_alloc_excess: ___rdl_alloc_excess, ___rdl_grow_in_place: ___rdl_grow_in_place, dynCall_ii: dynCall_ii, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, dynCall_vii: dynCall_vii, ___rdl_oom: ___rdl_oom, dynCall_vi: dynCall_vi, getTempRet0: getTempRet0, _ntohs: _ntohs, _htonl: _htonl, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _pthread_mutex_unlock: _pthread_mutex_unlock, _llvm_bswap_i16: _llvm_bswap_i16, ___rdl_realloc_excess: ___rdl_realloc_excess, _emscripten_get_global_libc: _emscripten_get_global_libc, _htons: _htons, dynCall_viiii: dynCall_viiii, ___errno_location: ___errno_location, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, ___rdl_realloc: ___rdl_realloc, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, _pthread_mutex_lock: _pthread_mutex_lock, ___rdl_shrink_in_place: ___rdl_shrink_in_place, dynCall_v: dynCall_v, ___rdl_alloc: ___rdl_alloc };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____rdl_dealloc = asm["___rdl_dealloc"]; asm["___rdl_dealloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_dealloc.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real____rdl_usable_size = asm["___rdl_usable_size"]; asm["___rdl_usable_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_usable_size.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real__rust_eh_personality = asm["_rust_eh_personality"]; asm["_rust_eh_personality"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rust_eh_personality.apply(null, arguments);
};

var real____rdl_grow_in_place = asm["___rdl_grow_in_place"]; asm["___rdl_grow_in_place"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_grow_in_place.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real____rdl_alloc_zeroed = asm["___rdl_alloc_zeroed"]; asm["___rdl_alloc_zeroed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_alloc_zeroed.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real____rdl_alloc_excess = asm["___rdl_alloc_excess"]; asm["___rdl_alloc_excess"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_alloc_excess.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____rdl_oom = asm["___rdl_oom"]; asm["___rdl_oom"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_oom.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real____rdl_realloc_excess = asm["___rdl_realloc_excess"]; asm["___rdl_realloc_excess"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_realloc_excess.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real____rdl_realloc = asm["___rdl_realloc"]; asm["___rdl_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_realloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real____rdl_shrink_in_place = asm["___rdl_shrink_in_place"]; asm["___rdl_shrink_in_place"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_shrink_in_place.apply(null, arguments);
};

var real____rdl_alloc = asm["___rdl_alloc"]; asm["___rdl_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rdl_alloc.apply(null, arguments);
};
var ___rdl_dealloc = Module["___rdl_dealloc"] = asm["___rdl_dealloc"];
var _main = Module["_main"] = asm["_main"];
var ___rdl_usable_size = Module["___rdl_usable_size"] = asm["___rdl_usable_size"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _rust_eh_personality = Module["_rust_eh_personality"] = asm["_rust_eh_personality"];
var ___rdl_grow_in_place = Module["___rdl_grow_in_place"] = asm["___rdl_grow_in_place"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var ___rdl_alloc_zeroed = Module["___rdl_alloc_zeroed"] = asm["___rdl_alloc_zeroed"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var ___rdl_alloc_excess = Module["___rdl_alloc_excess"] = asm["___rdl_alloc_excess"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___rdl_oom = Module["___rdl_oom"] = asm["___rdl_oom"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var ___rdl_realloc_excess = Module["___rdl_realloc_excess"] = asm["___rdl_realloc_excess"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _htons = Module["_htons"] = asm["_htons"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___rdl_realloc = Module["___rdl_realloc"] = asm["___rdl_realloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var ___rdl_shrink_in_place = Module["___rdl_shrink_in_place"] = asm["___rdl_shrink_in_place"];
var ___rdl_alloc = Module["___rdl_alloc"] = asm["___rdl_alloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



